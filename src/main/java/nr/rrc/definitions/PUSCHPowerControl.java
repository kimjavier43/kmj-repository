/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PUSCHPowerControl implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class P0AlphaSets implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<P0PUSCHAlphaSet> seqOf = null;

		public P0AlphaSets() {
			seqOf = new ArrayList<P0PUSCHAlphaSet>();
		}

		public P0AlphaSets(byte[] code) {
			this.code = code;
		}

		public List<P0PUSCHAlphaSet> getP0PUSCHAlphaSet() {
			if (seqOf == null) {
				seqOf = new ArrayList<P0PUSCHAlphaSet>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				P0PUSCHAlphaSet element = new P0PUSCHAlphaSet();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<P0PUSCHAlphaSet> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PathlossReferenceRSToAddModList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<PUSCHPathlossReferenceRS> seqOf = null;

		public PathlossReferenceRSToAddModList() {
			seqOf = new ArrayList<PUSCHPathlossReferenceRS>();
		}

		public PathlossReferenceRSToAddModList(byte[] code) {
			this.code = code;
		}

		public List<PUSCHPathlossReferenceRS> getPUSCHPathlossReferenceRS() {
			if (seqOf == null) {
				seqOf = new ArrayList<PUSCHPathlossReferenceRS>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				PUSCHPathlossReferenceRS element = new PUSCHPathlossReferenceRS();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<PUSCHPathlossReferenceRS> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PathlossReferenceRSToReleaseList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<PUSCHPathlossReferenceRSId> seqOf = null;

		public PathlossReferenceRSToReleaseList() {
			seqOf = new ArrayList<PUSCHPathlossReferenceRSId>();
		}

		public PathlossReferenceRSToReleaseList(byte[] code) {
			this.code = code;
		}

		public List<PUSCHPathlossReferenceRSId> getPUSCHPathlossReferenceRSId() {
			if (seqOf == null) {
				seqOf = new ArrayList<PUSCHPathlossReferenceRSId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				PUSCHPathlossReferenceRSId element = new PUSCHPathlossReferenceRSId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<PUSCHPathlossReferenceRSId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class SriPUSCHMappingToAddModList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SRIPUSCHPowerControl> seqOf = null;

		public SriPUSCHMappingToAddModList() {
			seqOf = new ArrayList<SRIPUSCHPowerControl>();
		}

		public SriPUSCHMappingToAddModList(byte[] code) {
			this.code = code;
		}

		public List<SRIPUSCHPowerControl> getSRIPUSCHPowerControl() {
			if (seqOf == null) {
				seqOf = new ArrayList<SRIPUSCHPowerControl>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SRIPUSCHPowerControl element = new SRIPUSCHPowerControl();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SRIPUSCHPowerControl> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class SriPUSCHMappingToReleaseList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SRIPUSCHPowerControlId> seqOf = null;

		public SriPUSCHMappingToReleaseList() {
			seqOf = new ArrayList<SRIPUSCHPowerControlId>();
		}

		public SriPUSCHMappingToReleaseList(byte[] code) {
			this.code = code;
		}

		public List<SRIPUSCHPowerControlId> getSRIPUSCHPowerControlId() {
			if (seqOf == null) {
				seqOf = new ArrayList<SRIPUSCHPowerControlId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SRIPUSCHPowerControlId element = new SRIPUSCHPowerControlId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SRIPUSCHPowerControlId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum tpcAccumulation = null;
	private Alpha msg3Alpha = null;
	private BerInteger p0NominalWithoutGrant = null;
	private P0AlphaSets p0AlphaSets = null;
	private PathlossReferenceRSToAddModList pathlossReferenceRSToAddModList = null;
	private PathlossReferenceRSToReleaseList pathlossReferenceRSToReleaseList = null;
	private BerEnum twoPUSCHPCAdjustmentStates = null;
	private BerEnum deltaMCS = null;
	private SriPUSCHMappingToAddModList sriPUSCHMappingToAddModList = null;
	private SriPUSCHMappingToReleaseList sriPUSCHMappingToReleaseList = null;
	
	public PUSCHPowerControl() {
	}

	public PUSCHPowerControl(byte[] code) {
		this.code = code;
	}

	public void setTpcAccumulation(BerEnum tpcAccumulation) {
		this.tpcAccumulation = tpcAccumulation;
	}

	public BerEnum getTpcAccumulation() {
		return tpcAccumulation;
	}

	public void setMsg3Alpha(Alpha msg3Alpha) {
		this.msg3Alpha = msg3Alpha;
	}

	public Alpha getMsg3Alpha() {
		return msg3Alpha;
	}

	public void setP0NominalWithoutGrant(BerInteger p0NominalWithoutGrant) {
		this.p0NominalWithoutGrant = p0NominalWithoutGrant;
	}

	public BerInteger getP0NominalWithoutGrant() {
		return p0NominalWithoutGrant;
	}

	public void setP0AlphaSets(P0AlphaSets p0AlphaSets) {
		this.p0AlphaSets = p0AlphaSets;
	}

	public P0AlphaSets getP0AlphaSets() {
		return p0AlphaSets;
	}

	public void setPathlossReferenceRSToAddModList(PathlossReferenceRSToAddModList pathlossReferenceRSToAddModList) {
		this.pathlossReferenceRSToAddModList = pathlossReferenceRSToAddModList;
	}

	public PathlossReferenceRSToAddModList getPathlossReferenceRSToAddModList() {
		return pathlossReferenceRSToAddModList;
	}

	public void setPathlossReferenceRSToReleaseList(PathlossReferenceRSToReleaseList pathlossReferenceRSToReleaseList) {
		this.pathlossReferenceRSToReleaseList = pathlossReferenceRSToReleaseList;
	}

	public PathlossReferenceRSToReleaseList getPathlossReferenceRSToReleaseList() {
		return pathlossReferenceRSToReleaseList;
	}

	public void setTwoPUSCHPCAdjustmentStates(BerEnum twoPUSCHPCAdjustmentStates) {
		this.twoPUSCHPCAdjustmentStates = twoPUSCHPCAdjustmentStates;
	}

	public BerEnum getTwoPUSCHPCAdjustmentStates() {
		return twoPUSCHPCAdjustmentStates;
	}

	public void setDeltaMCS(BerEnum deltaMCS) {
		this.deltaMCS = deltaMCS;
	}

	public BerEnum getDeltaMCS() {
		return deltaMCS;
	}

	public void setSriPUSCHMappingToAddModList(SriPUSCHMappingToAddModList sriPUSCHMappingToAddModList) {
		this.sriPUSCHMappingToAddModList = sriPUSCHMappingToAddModList;
	}

	public SriPUSCHMappingToAddModList getSriPUSCHMappingToAddModList() {
		return sriPUSCHMappingToAddModList;
	}

	public void setSriPUSCHMappingToReleaseList(SriPUSCHMappingToReleaseList sriPUSCHMappingToReleaseList) {
		this.sriPUSCHMappingToReleaseList = sriPUSCHMappingToReleaseList;
	}

	public SriPUSCHMappingToReleaseList getSriPUSCHMappingToReleaseList() {
		return sriPUSCHMappingToReleaseList;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (sriPUSCHMappingToReleaseList != null) {
			codeLength += sriPUSCHMappingToReleaseList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (sriPUSCHMappingToAddModList != null) {
			codeLength += sriPUSCHMappingToAddModList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (deltaMCS != null) {
			codeLength += deltaMCS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (twoPUSCHPCAdjustmentStates != null) {
			codeLength += twoPUSCHPCAdjustmentStates.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (pathlossReferenceRSToReleaseList != null) {
			codeLength += pathlossReferenceRSToReleaseList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (pathlossReferenceRSToAddModList != null) {
			codeLength += pathlossReferenceRSToAddModList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (p0AlphaSets != null) {
			codeLength += p0AlphaSets.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (p0NominalWithoutGrant != null) {
			codeLength += p0NominalWithoutGrant.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (msg3Alpha != null) {
			codeLength += msg3Alpha.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		if (tpcAccumulation != null) {
			codeLength += tpcAccumulation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			tpcAccumulation = new BerEnum();
			subCodeLength += tpcAccumulation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			msg3Alpha = new Alpha();
			subCodeLength += msg3Alpha.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			p0NominalWithoutGrant = new BerInteger();
			subCodeLength += p0NominalWithoutGrant.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			p0AlphaSets = new P0AlphaSets();
			subCodeLength += p0AlphaSets.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			pathlossReferenceRSToAddModList = new PathlossReferenceRSToAddModList();
			subCodeLength += pathlossReferenceRSToAddModList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			pathlossReferenceRSToReleaseList = new PathlossReferenceRSToReleaseList();
			subCodeLength += pathlossReferenceRSToReleaseList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			twoPUSCHPCAdjustmentStates = new BerEnum();
			subCodeLength += twoPUSCHPCAdjustmentStates.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			deltaMCS = new BerEnum();
			subCodeLength += deltaMCS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			sriPUSCHMappingToAddModList = new SriPUSCHMappingToAddModList();
			subCodeLength += sriPUSCHMappingToAddModList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			sriPUSCHMappingToReleaseList = new SriPUSCHMappingToReleaseList();
			subCodeLength += sriPUSCHMappingToReleaseList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (tpcAccumulation != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tpcAccumulation: ").append(tpcAccumulation);
			firstSelectedElement = false;
		}
		
		if (msg3Alpha != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("msg3Alpha: ").append(msg3Alpha);
			firstSelectedElement = false;
		}
		
		if (p0NominalWithoutGrant != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("p0NominalWithoutGrant: ").append(p0NominalWithoutGrant);
			firstSelectedElement = false;
		}
		
		if (p0AlphaSets != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("p0AlphaSets: ");
			p0AlphaSets.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (pathlossReferenceRSToAddModList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pathlossReferenceRSToAddModList: ");
			pathlossReferenceRSToAddModList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (pathlossReferenceRSToReleaseList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pathlossReferenceRSToReleaseList: ");
			pathlossReferenceRSToReleaseList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (twoPUSCHPCAdjustmentStates != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("twoPUSCHPCAdjustmentStates: ").append(twoPUSCHPCAdjustmentStates);
			firstSelectedElement = false;
		}
		
		if (deltaMCS != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("deltaMCS: ").append(deltaMCS);
			firstSelectedElement = false;
		}
		
		if (sriPUSCHMappingToAddModList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sriPUSCHMappingToAddModList: ");
			sriPUSCHMappingToAddModList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (sriPUSCHMappingToReleaseList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sriPUSCHMappingToReleaseList: ");
			sriPUSCHMappingToReleaseList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

