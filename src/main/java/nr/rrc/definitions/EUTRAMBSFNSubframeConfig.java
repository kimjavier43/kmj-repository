/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class EUTRAMBSFNSubframeConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SubframeAllocation implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerBitString oneFrame = null;
		private BerBitString fourFrames = null;
		
		public SubframeAllocation() {
		}

		public SubframeAllocation(byte[] code) {
			this.code = code;
		}

		public void setOneFrame(BerBitString oneFrame) {
			this.oneFrame = oneFrame;
		}

		public BerBitString getOneFrame() {
			return oneFrame;
		}

		public void setFourFrames(BerBitString fourFrames) {
			this.fourFrames = fourFrames;
		}

		public BerBitString getFourFrames() {
			return fourFrames;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (fourFrames != null) {
				codeLength += fourFrames.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (oneFrame != null) {
				codeLength += oneFrame.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				oneFrame = new BerBitString();
				codeLength += oneFrame.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				fourFrames = new BerBitString();
				codeLength += fourFrames.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (oneFrame != null) {
				sb.append("oneFrame: ").append(oneFrame);
				return;
			}

			if (fourFrames != null) {
				sb.append("fourFrames: ").append(fourFrames);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class SubframeAllocationV1430 implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerBitString oneFrameV1430 = null;
		private BerBitString fourFramesV1430 = null;
		
		public SubframeAllocationV1430() {
		}

		public SubframeAllocationV1430(byte[] code) {
			this.code = code;
		}

		public void setOneFrameV1430(BerBitString oneFrameV1430) {
			this.oneFrameV1430 = oneFrameV1430;
		}

		public BerBitString getOneFrameV1430() {
			return oneFrameV1430;
		}

		public void setFourFramesV1430(BerBitString fourFramesV1430) {
			this.fourFramesV1430 = fourFramesV1430;
		}

		public BerBitString getFourFramesV1430() {
			return fourFramesV1430;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (fourFramesV1430 != null) {
				codeLength += fourFramesV1430.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (oneFrameV1430 != null) {
				codeLength += oneFrameV1430.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				oneFrameV1430 = new BerBitString();
				codeLength += oneFrameV1430.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				fourFramesV1430 = new BerBitString();
				codeLength += fourFramesV1430.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (oneFrameV1430 != null) {
				sb.append("oneFrameV1430: ").append(oneFrameV1430);
				return;
			}

			if (fourFramesV1430 != null) {
				sb.append("fourFramesV1430: ").append(fourFramesV1430);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum radioframeAllocationPeriod = null;
	private BerInteger radioframeAllocationOffset = null;
	private SubframeAllocation subframeAllocation = null;
	private SubframeAllocationV1430 subframeAllocationV1430 = null;
	
	public EUTRAMBSFNSubframeConfig() {
	}

	public EUTRAMBSFNSubframeConfig(byte[] code) {
		this.code = code;
	}

	public void setRadioframeAllocationPeriod(BerEnum radioframeAllocationPeriod) {
		this.radioframeAllocationPeriod = radioframeAllocationPeriod;
	}

	public BerEnum getRadioframeAllocationPeriod() {
		return radioframeAllocationPeriod;
	}

	public void setRadioframeAllocationOffset(BerInteger radioframeAllocationOffset) {
		this.radioframeAllocationOffset = radioframeAllocationOffset;
	}

	public BerInteger getRadioframeAllocationOffset() {
		return radioframeAllocationOffset;
	}

	public void setSubframeAllocation(SubframeAllocation subframeAllocation) {
		this.subframeAllocation = subframeAllocation;
	}

	public SubframeAllocation getSubframeAllocation() {
		return subframeAllocation;
	}

	public void setSubframeAllocationV1430(SubframeAllocationV1430 subframeAllocationV1430) {
		this.subframeAllocationV1430 = subframeAllocationV1430;
	}

	public SubframeAllocationV1430 getSubframeAllocationV1430() {
		return subframeAllocationV1430;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (subframeAllocationV1430 != null) {
			sublength = subframeAllocationV1430.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		sublength = subframeAllocation.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
		reverseOS.write(0xA2);
		codeLength += 1;
		
		codeLength += radioframeAllocationOffset.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += radioframeAllocationPeriod.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			radioframeAllocationPeriod = new BerEnum();
			subCodeLength += radioframeAllocationPeriod.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			radioframeAllocationOffset = new BerInteger();
			subCodeLength += radioframeAllocationOffset.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			subCodeLength += length.decode(is);
			subframeAllocation = new SubframeAllocation();
			subCodeLength += subframeAllocation.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			subCodeLength += length.decode(is);
			subframeAllocationV1430 = new SubframeAllocationV1430();
			subCodeLength += subframeAllocationV1430.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (radioframeAllocationPeriod != null) {
			sb.append("radioframeAllocationPeriod: ").append(radioframeAllocationPeriod);
		}
		else {
			sb.append("radioframeAllocationPeriod: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (radioframeAllocationOffset != null) {
			sb.append("radioframeAllocationOffset: ").append(radioframeAllocationOffset);
		}
		else {
			sb.append("radioframeAllocationOffset: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (subframeAllocation != null) {
			sb.append("subframeAllocation: ");
			subframeAllocation.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("subframeAllocation: <empty-required-field>");
		}
		
		if (subframeAllocationV1430 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subframeAllocationV1430: ");
			subframeAllocationV1430.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

