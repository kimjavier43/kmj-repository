/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class MeasResultNR implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class MeasResult implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static class CellResults implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private MeasQuantityResults resultsSSBCell = null;
			private MeasQuantityResults resultsCSIRSCell = null;
			
			public CellResults() {
			}

			public CellResults(byte[] code) {
				this.code = code;
			}

			public void setResultsSSBCell(MeasQuantityResults resultsSSBCell) {
				this.resultsSSBCell = resultsSSBCell;
			}

			public MeasQuantityResults getResultsSSBCell() {
				return resultsSSBCell;
			}

			public void setResultsCSIRSCell(MeasQuantityResults resultsCSIRSCell) {
				this.resultsCSIRSCell = resultsCSIRSCell;
			}

			public MeasQuantityResults getResultsCSIRSCell() {
				return resultsCSIRSCell;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (resultsCSIRSCell != null) {
					codeLength += resultsCSIRSCell.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					reverseOS.write(0xA1);
					codeLength += 1;
				}
				
				if (resultsSSBCell != null) {
					codeLength += resultsSSBCell.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
					reverseOS.write(0xA0);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == 0) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					resultsSSBCell = new MeasQuantityResults();
					subCodeLength += resultsSSBCell.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					resultsCSIRSCell = new MeasQuantityResults();
					subCodeLength += resultsCSIRSCell.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				boolean firstSelectedElement = true;
				if (resultsSSBCell != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("resultsSSBCell: ");
					resultsSSBCell.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (resultsCSIRSCell != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("resultsCSIRSCell: ");
					resultsCSIRSCell.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class RsIndexResults implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private ResultsPerSSBIndexList resultsSSBIndexes = null;
			private ResultsPerCSIRSIndexList resultsCSIRSIndexes = null;
			
			public RsIndexResults() {
			}

			public RsIndexResults(byte[] code) {
				this.code = code;
			}

			public void setResultsSSBIndexes(ResultsPerSSBIndexList resultsSSBIndexes) {
				this.resultsSSBIndexes = resultsSSBIndexes;
			}

			public ResultsPerSSBIndexList getResultsSSBIndexes() {
				return resultsSSBIndexes;
			}

			public void setResultsCSIRSIndexes(ResultsPerCSIRSIndexList resultsCSIRSIndexes) {
				this.resultsCSIRSIndexes = resultsCSIRSIndexes;
			}

			public ResultsPerCSIRSIndexList getResultsCSIRSIndexes() {
				return resultsCSIRSIndexes;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (resultsCSIRSIndexes != null) {
					codeLength += resultsCSIRSIndexes.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					reverseOS.write(0xA1);
					codeLength += 1;
				}
				
				if (resultsSSBIndexes != null) {
					codeLength += resultsSSBIndexes.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
					reverseOS.write(0xA0);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == 0) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					resultsSSBIndexes = new ResultsPerSSBIndexList();
					subCodeLength += resultsSSBIndexes.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					resultsCSIRSIndexes = new ResultsPerCSIRSIndexList();
					subCodeLength += resultsCSIRSIndexes.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				boolean firstSelectedElement = true;
				if (resultsSSBIndexes != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("resultsSSBIndexes: ");
					resultsSSBIndexes.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (resultsCSIRSIndexes != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("resultsCSIRSIndexes: ");
					resultsCSIRSIndexes.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private CellResults cellResults = null;
		private RsIndexResults rsIndexResults = null;
		
		public MeasResult() {
		}

		public MeasResult(byte[] code) {
			this.code = code;
		}

		public void setCellResults(CellResults cellResults) {
			this.cellResults = cellResults;
		}

		public CellResults getCellResults() {
			return cellResults;
		}

		public void setRsIndexResults(RsIndexResults rsIndexResults) {
			this.rsIndexResults = rsIndexResults;
		}

		public RsIndexResults getRsIndexResults() {
			return rsIndexResults;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (rsIndexResults != null) {
				codeLength += rsIndexResults.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
			}
			
			codeLength += cellResults.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				cellResults = new CellResults();
				subCodeLength += cellResults.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				rsIndexResults = new RsIndexResults();
				subCodeLength += rsIndexResults.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (cellResults != null) {
				sb.append("cellResults: ");
				cellResults.appendAsString(sb, indentLevel + 1);
			}
			else {
				sb.append("cellResults: <empty-required-field>");
			}
			
			if (rsIndexResults != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("rsIndexResults: ");
				rsIndexResults.appendAsString(sb, indentLevel + 1);
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private PhysCellId physCellId = null;
	private MeasResult measResult = null;
	
	public MeasResultNR() {
	}

	public MeasResultNR(byte[] code) {
		this.code = code;
	}

	public void setPhysCellId(PhysCellId physCellId) {
		this.physCellId = physCellId;
	}

	public PhysCellId getPhysCellId() {
		return physCellId;
	}

	public void setMeasResult(MeasResult measResult) {
		this.measResult = measResult;
	}

	public MeasResult getMeasResult() {
		return measResult;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += measResult.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		if (physCellId != null) {
			codeLength += physCellId.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			physCellId = new PhysCellId();
			subCodeLength += physCellId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			measResult = new MeasResult();
			subCodeLength += measResult.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (physCellId != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("physCellId: ").append(physCellId);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (measResult != null) {
			sb.append("measResult: ");
			measResult.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("measResult: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

