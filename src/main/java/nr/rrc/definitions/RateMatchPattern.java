/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class RateMatchPattern implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class PatternType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Bitmaps implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class SymbolsInResourceBlock implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				private BerBitString oneSlot = null;
				private BerBitString twoSlots = null;
				
				public SymbolsInResourceBlock() {
				}

				public SymbolsInResourceBlock(byte[] code) {
					this.code = code;
				}

				public void setOneSlot(BerBitString oneSlot) {
					this.oneSlot = oneSlot;
				}

				public BerBitString getOneSlot() {
					return oneSlot;
				}

				public void setTwoSlots(BerBitString twoSlots) {
					this.twoSlots = twoSlots;
				}

				public BerBitString getTwoSlots() {
					return twoSlots;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (twoSlots != null) {
						codeLength += twoSlots.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						return codeLength;
					}
					
					if (oneSlot != null) {
						codeLength += oneSlot.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 0
						reverseOS.write(0x80);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
						oneSlot = new BerBitString();
						codeLength += oneSlot.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
						twoSlots = new BerBitString();
						codeLength += twoSlots.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (oneSlot != null) {
						sb.append("oneSlot: ").append(oneSlot);
						return;
					}

					if (twoSlots != null) {
						sb.append("twoSlots: ").append(twoSlots);
						return;
					}

					sb.append("<none>");
				}

			}

			public static class PeriodicityAndPattern implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				private BerBitString n2 = null;
				private BerBitString n4 = null;
				private BerBitString n5 = null;
				private BerBitString n8 = null;
				private BerBitString n10 = null;
				private BerBitString n20 = null;
				private BerBitString n40 = null;
				
				public PeriodicityAndPattern() {
				}

				public PeriodicityAndPattern(byte[] code) {
					this.code = code;
				}

				public void setN2(BerBitString n2) {
					this.n2 = n2;
				}

				public BerBitString getN2() {
					return n2;
				}

				public void setN4(BerBitString n4) {
					this.n4 = n4;
				}

				public BerBitString getN4() {
					return n4;
				}

				public void setN5(BerBitString n5) {
					this.n5 = n5;
				}

				public BerBitString getN5() {
					return n5;
				}

				public void setN8(BerBitString n8) {
					this.n8 = n8;
				}

				public BerBitString getN8() {
					return n8;
				}

				public void setN10(BerBitString n10) {
					this.n10 = n10;
				}

				public BerBitString getN10() {
					return n10;
				}

				public void setN20(BerBitString n20) {
					this.n20 = n20;
				}

				public BerBitString getN20() {
					return n20;
				}

				public void setN40(BerBitString n40) {
					this.n40 = n40;
				}

				public BerBitString getN40() {
					return n40;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (n40 != null) {
						codeLength += n40.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 6
						reverseOS.write(0x86);
						codeLength += 1;
						return codeLength;
					}
					
					if (n20 != null) {
						codeLength += n20.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 5
						reverseOS.write(0x85);
						codeLength += 1;
						return codeLength;
					}
					
					if (n10 != null) {
						codeLength += n10.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 4
						reverseOS.write(0x84);
						codeLength += 1;
						return codeLength;
					}
					
					if (n8 != null) {
						codeLength += n8.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 3
						reverseOS.write(0x83);
						codeLength += 1;
						return codeLength;
					}
					
					if (n5 != null) {
						codeLength += n5.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 2
						reverseOS.write(0x82);
						codeLength += 1;
						return codeLength;
					}
					
					if (n4 != null) {
						codeLength += n4.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						return codeLength;
					}
					
					if (n2 != null) {
						codeLength += n2.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 0
						reverseOS.write(0x80);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
						n2 = new BerBitString();
						codeLength += n2.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
						n4 = new BerBitString();
						codeLength += n4.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
						n5 = new BerBitString();
						codeLength += n5.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
						n8 = new BerBitString();
						codeLength += n8.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
						n10 = new BerBitString();
						codeLength += n10.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
						n20 = new BerBitString();
						codeLength += n20.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
						n40 = new BerBitString();
						codeLength += n40.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (n2 != null) {
						sb.append("n2: ").append(n2);
						return;
					}

					if (n4 != null) {
						sb.append("n4: ").append(n4);
						return;
					}

					if (n5 != null) {
						sb.append("n5: ").append(n5);
						return;
					}

					if (n8 != null) {
						sb.append("n8: ").append(n8);
						return;
					}

					if (n10 != null) {
						sb.append("n10: ").append(n10);
						return;
					}

					if (n20 != null) {
						sb.append("n20: ").append(n20);
						return;
					}

					if (n40 != null) {
						sb.append("n40: ").append(n40);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerBitString resourceBlocks = null;
			private SymbolsInResourceBlock symbolsInResourceBlock = null;
			private PeriodicityAndPattern periodicityAndPattern = null;
			
			public Bitmaps() {
			}

			public Bitmaps(byte[] code) {
				this.code = code;
			}

			public void setResourceBlocks(BerBitString resourceBlocks) {
				this.resourceBlocks = resourceBlocks;
			}

			public BerBitString getResourceBlocks() {
				return resourceBlocks;
			}

			public void setSymbolsInResourceBlock(SymbolsInResourceBlock symbolsInResourceBlock) {
				this.symbolsInResourceBlock = symbolsInResourceBlock;
			}

			public SymbolsInResourceBlock getSymbolsInResourceBlock() {
				return symbolsInResourceBlock;
			}

			public void setPeriodicityAndPattern(PeriodicityAndPattern periodicityAndPattern) {
				this.periodicityAndPattern = periodicityAndPattern;
			}

			public PeriodicityAndPattern getPeriodicityAndPattern() {
				return periodicityAndPattern;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				if (periodicityAndPattern != null) {
					sublength = periodicityAndPattern.encode(reverseOS);
					codeLength += sublength;
					codeLength += BerLength.encodeLength(reverseOS, sublength);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
					reverseOS.write(0xA2);
					codeLength += 1;
				}
				
				sublength = symbolsInResourceBlock.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				
				codeLength += resourceBlocks.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					resourceBlocks = new BerBitString();
					subCodeLength += resourceBlocks.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					subCodeLength += length.decode(is);
					symbolsInResourceBlock = new SymbolsInResourceBlock();
					subCodeLength += symbolsInResourceBlock.decode(is, null);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
					subCodeLength += length.decode(is);
					periodicityAndPattern = new PeriodicityAndPattern();
					subCodeLength += periodicityAndPattern.decode(is, null);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (resourceBlocks != null) {
					sb.append("resourceBlocks: ").append(resourceBlocks);
				}
				else {
					sb.append("resourceBlocks: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (symbolsInResourceBlock != null) {
					sb.append("symbolsInResourceBlock: ");
					symbolsInResourceBlock.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("symbolsInResourceBlock: <empty-required-field>");
				}
				
				if (periodicityAndPattern != null) {
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("periodicityAndPattern: ");
					periodicityAndPattern.appendAsString(sb, indentLevel + 1);
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private Bitmaps bitmaps = null;
		private ControlResourceSetId controlResourceSet = null;
		
		public PatternType() {
		}

		public PatternType(byte[] code) {
			this.code = code;
		}

		public void setBitmaps(Bitmaps bitmaps) {
			this.bitmaps = bitmaps;
		}

		public Bitmaps getBitmaps() {
			return bitmaps;
		}

		public void setControlResourceSet(ControlResourceSetId controlResourceSet) {
			this.controlResourceSet = controlResourceSet;
		}

		public ControlResourceSetId getControlResourceSet() {
			return controlResourceSet;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (controlResourceSet != null) {
				codeLength += controlResourceSet.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (bitmaps != null) {
				codeLength += bitmaps.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				bitmaps = new Bitmaps();
				codeLength += bitmaps.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				controlResourceSet = new ControlResourceSetId();
				codeLength += controlResourceSet.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (bitmaps != null) {
				sb.append("bitmaps: ");
				bitmaps.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (controlResourceSet != null) {
				sb.append("controlResourceSet: ").append(controlResourceSet);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private RateMatchPatternId rateMatchPatternId = null;
	private PatternType patternType = null;
	private SubcarrierSpacing subcarrierSpacing = null;
	private BerEnum mode = null;
	
	public RateMatchPattern() {
	}

	public RateMatchPattern(byte[] code) {
		this.code = code;
	}

	public void setRateMatchPatternId(RateMatchPatternId rateMatchPatternId) {
		this.rateMatchPatternId = rateMatchPatternId;
	}

	public RateMatchPatternId getRateMatchPatternId() {
		return rateMatchPatternId;
	}

	public void setPatternType(PatternType patternType) {
		this.patternType = patternType;
	}

	public PatternType getPatternType() {
		return patternType;
	}

	public void setSubcarrierSpacing(SubcarrierSpacing subcarrierSpacing) {
		this.subcarrierSpacing = subcarrierSpacing;
	}

	public SubcarrierSpacing getSubcarrierSpacing() {
		return subcarrierSpacing;
	}

	public void setMode(BerEnum mode) {
		this.mode = mode;
	}

	public BerEnum getMode() {
		return mode;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		codeLength += mode.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		if (subcarrierSpacing != null) {
			codeLength += subcarrierSpacing.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		sublength = patternType.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		codeLength += rateMatchPatternId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			rateMatchPatternId = new RateMatchPatternId();
			subCodeLength += rateMatchPatternId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			patternType = new PatternType();
			subCodeLength += patternType.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			subcarrierSpacing = new SubcarrierSpacing();
			subCodeLength += subcarrierSpacing.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			mode = new BerEnum();
			subCodeLength += mode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rateMatchPatternId != null) {
			sb.append("rateMatchPatternId: ").append(rateMatchPatternId);
		}
		else {
			sb.append("rateMatchPatternId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (patternType != null) {
			sb.append("patternType: ");
			patternType.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("patternType: <empty-required-field>");
		}
		
		if (subcarrierSpacing != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subcarrierSpacing: ").append(subcarrierSpacing);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (mode != null) {
			sb.append("mode: ").append(mode);
		}
		else {
			sb.append("mode: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

