/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class DMRSUplinkConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class TransformPrecodingDisabled implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger scramblingID0 = null;
		private BerInteger scramblingID1 = null;
		
		public TransformPrecodingDisabled() {
		}

		public TransformPrecodingDisabled(byte[] code) {
			this.code = code;
		}

		public void setScramblingID0(BerInteger scramblingID0) {
			this.scramblingID0 = scramblingID0;
		}

		public BerInteger getScramblingID0() {
			return scramblingID0;
		}

		public void setScramblingID1(BerInteger scramblingID1) {
			this.scramblingID1 = scramblingID1;
		}

		public BerInteger getScramblingID1() {
			return scramblingID1;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (scramblingID1 != null) {
				codeLength += scramblingID1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (scramblingID0 != null) {
				codeLength += scramblingID0.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				scramblingID0 = new BerInteger();
				subCodeLength += scramblingID0.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				scramblingID1 = new BerInteger();
				subCodeLength += scramblingID1.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (scramblingID0 != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scramblingID0: ").append(scramblingID0);
				firstSelectedElement = false;
			}
			
			if (scramblingID1 != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scramblingID1: ").append(scramblingID1);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TransformPrecodingEnabled implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger nPUSCHIdentity = null;
		private BerEnum disableSequenceGroupHopping = null;
		private BerEnum sequenceHoppingEnabled = null;
		
		public TransformPrecodingEnabled() {
		}

		public TransformPrecodingEnabled(byte[] code) {
			this.code = code;
		}

		public void setNPUSCHIdentity(BerInteger nPUSCHIdentity) {
			this.nPUSCHIdentity = nPUSCHIdentity;
		}

		public BerInteger getNPUSCHIdentity() {
			return nPUSCHIdentity;
		}

		public void setDisableSequenceGroupHopping(BerEnum disableSequenceGroupHopping) {
			this.disableSequenceGroupHopping = disableSequenceGroupHopping;
		}

		public BerEnum getDisableSequenceGroupHopping() {
			return disableSequenceGroupHopping;
		}

		public void setSequenceHoppingEnabled(BerEnum sequenceHoppingEnabled) {
			this.sequenceHoppingEnabled = sequenceHoppingEnabled;
		}

		public BerEnum getSequenceHoppingEnabled() {
			return sequenceHoppingEnabled;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (sequenceHoppingEnabled != null) {
				codeLength += sequenceHoppingEnabled.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
			}
			
			if (disableSequenceGroupHopping != null) {
				codeLength += disableSequenceGroupHopping.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (nPUSCHIdentity != null) {
				codeLength += nPUSCHIdentity.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				nPUSCHIdentity = new BerInteger();
				subCodeLength += nPUSCHIdentity.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				disableSequenceGroupHopping = new BerEnum();
				subCodeLength += disableSequenceGroupHopping.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				sequenceHoppingEnabled = new BerEnum();
				subCodeLength += sequenceHoppingEnabled.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (nPUSCHIdentity != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("nPUSCHIdentity: ").append(nPUSCHIdentity);
				firstSelectedElement = false;
			}
			
			if (disableSequenceGroupHopping != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("disableSequenceGroupHopping: ").append(disableSequenceGroupHopping);
				firstSelectedElement = false;
			}
			
			if (sequenceHoppingEnabled != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("sequenceHoppingEnabled: ").append(sequenceHoppingEnabled);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum dmrsType = null;
	private BerEnum dmrsAdditionalPosition = null;
	private SetupRelease phaseTrackingRS = null;
	private BerEnum maxLength = null;
	private TransformPrecodingDisabled transformPrecodingDisabled = null;
	private TransformPrecodingEnabled transformPrecodingEnabled = null;
	
	public DMRSUplinkConfig() {
	}

	public DMRSUplinkConfig(byte[] code) {
		this.code = code;
	}

	public void setDmrsType(BerEnum dmrsType) {
		this.dmrsType = dmrsType;
	}

	public BerEnum getDmrsType() {
		return dmrsType;
	}

	public void setDmrsAdditionalPosition(BerEnum dmrsAdditionalPosition) {
		this.dmrsAdditionalPosition = dmrsAdditionalPosition;
	}

	public BerEnum getDmrsAdditionalPosition() {
		return dmrsAdditionalPosition;
	}

	public void setPhaseTrackingRS(SetupRelease phaseTrackingRS) {
		this.phaseTrackingRS = phaseTrackingRS;
	}

	public SetupRelease getPhaseTrackingRS() {
		return phaseTrackingRS;
	}

	public void setMaxLength(BerEnum maxLength) {
		this.maxLength = maxLength;
	}

	public BerEnum getMaxLength() {
		return maxLength;
	}

	public void setTransformPrecodingDisabled(TransformPrecodingDisabled transformPrecodingDisabled) {
		this.transformPrecodingDisabled = transformPrecodingDisabled;
	}

	public TransformPrecodingDisabled getTransformPrecodingDisabled() {
		return transformPrecodingDisabled;
	}

	public void setTransformPrecodingEnabled(TransformPrecodingEnabled transformPrecodingEnabled) {
		this.transformPrecodingEnabled = transformPrecodingEnabled;
	}

	public TransformPrecodingEnabled getTransformPrecodingEnabled() {
		return transformPrecodingEnabled;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (transformPrecodingEnabled != null) {
			codeLength += transformPrecodingEnabled.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (transformPrecodingDisabled != null) {
			codeLength += transformPrecodingDisabled.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (maxLength != null) {
			codeLength += maxLength.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (phaseTrackingRS != null) {
			sublength = phaseTrackingRS.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (dmrsAdditionalPosition != null) {
			codeLength += dmrsAdditionalPosition.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		if (dmrsType != null) {
			codeLength += dmrsType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			dmrsType = new BerEnum();
			subCodeLength += dmrsType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			dmrsAdditionalPosition = new BerEnum();
			subCodeLength += dmrsAdditionalPosition.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			subCodeLength += length.decode(is);
			phaseTrackingRS = new SetupRelease();
			subCodeLength += phaseTrackingRS.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			maxLength = new BerEnum();
			subCodeLength += maxLength.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			transformPrecodingDisabled = new TransformPrecodingDisabled();
			subCodeLength += transformPrecodingDisabled.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			transformPrecodingEnabled = new TransformPrecodingEnabled();
			subCodeLength += transformPrecodingEnabled.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (dmrsType != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dmrsType: ").append(dmrsType);
			firstSelectedElement = false;
		}
		
		if (dmrsAdditionalPosition != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dmrsAdditionalPosition: ").append(dmrsAdditionalPosition);
			firstSelectedElement = false;
		}
		
		if (phaseTrackingRS != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("phaseTrackingRS: ");
			phaseTrackingRS.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (maxLength != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxLength: ").append(maxLength);
			firstSelectedElement = false;
		}
		
		if (transformPrecodingDisabled != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transformPrecodingDisabled: ");
			transformPrecodingDisabled.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (transformPrecodingEnabled != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transformPrecodingEnabled: ");
			transformPrecodingEnabled.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

