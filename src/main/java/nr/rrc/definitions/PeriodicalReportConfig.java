/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PeriodicalReportConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private NRRSType rsType = null;
	private ReportInterval reportInterval = null;
	private BerEnum reportAmount = null;
	private MeasReportQuantity reportQuantityCell = null;
	private BerInteger maxReportCells = null;
	private MeasReportQuantity reportQuantityRsIndexes = null;
	private BerInteger maxNrofRsIndexesToReport = null;
	private BerBoolean includeBeamMeasurements = null;
	private BerBoolean useWhiteCellList = null;
	
	public PeriodicalReportConfig() {
	}

	public PeriodicalReportConfig(byte[] code) {
		this.code = code;
	}

	public void setRsType(NRRSType rsType) {
		this.rsType = rsType;
	}

	public NRRSType getRsType() {
		return rsType;
	}

	public void setReportInterval(ReportInterval reportInterval) {
		this.reportInterval = reportInterval;
	}

	public ReportInterval getReportInterval() {
		return reportInterval;
	}

	public void setReportAmount(BerEnum reportAmount) {
		this.reportAmount = reportAmount;
	}

	public BerEnum getReportAmount() {
		return reportAmount;
	}

	public void setReportQuantityCell(MeasReportQuantity reportQuantityCell) {
		this.reportQuantityCell = reportQuantityCell;
	}

	public MeasReportQuantity getReportQuantityCell() {
		return reportQuantityCell;
	}

	public void setMaxReportCells(BerInteger maxReportCells) {
		this.maxReportCells = maxReportCells;
	}

	public BerInteger getMaxReportCells() {
		return maxReportCells;
	}

	public void setReportQuantityRsIndexes(MeasReportQuantity reportQuantityRsIndexes) {
		this.reportQuantityRsIndexes = reportQuantityRsIndexes;
	}

	public MeasReportQuantity getReportQuantityRsIndexes() {
		return reportQuantityRsIndexes;
	}

	public void setMaxNrofRsIndexesToReport(BerInteger maxNrofRsIndexesToReport) {
		this.maxNrofRsIndexesToReport = maxNrofRsIndexesToReport;
	}

	public BerInteger getMaxNrofRsIndexesToReport() {
		return maxNrofRsIndexesToReport;
	}

	public void setIncludeBeamMeasurements(BerBoolean includeBeamMeasurements) {
		this.includeBeamMeasurements = includeBeamMeasurements;
	}

	public BerBoolean getIncludeBeamMeasurements() {
		return includeBeamMeasurements;
	}

	public void setUseWhiteCellList(BerBoolean useWhiteCellList) {
		this.useWhiteCellList = useWhiteCellList;
	}

	public BerBoolean getUseWhiteCellList() {
		return useWhiteCellList;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += useWhiteCellList.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		reverseOS.write(0x88);
		codeLength += 1;
		
		codeLength += includeBeamMeasurements.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 7
		reverseOS.write(0x87);
		codeLength += 1;
		
		if (maxNrofRsIndexesToReport != null) {
			codeLength += maxNrofRsIndexesToReport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (reportQuantityRsIndexes != null) {
			codeLength += reportQuantityRsIndexes.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		codeLength += maxReportCells.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += reportQuantityCell.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
		reverseOS.write(0xA3);
		codeLength += 1;
		
		codeLength += reportAmount.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += reportInterval.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += rsType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			rsType = new NRRSType();
			subCodeLength += rsType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			reportInterval = new ReportInterval();
			subCodeLength += reportInterval.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			reportAmount = new BerEnum();
			subCodeLength += reportAmount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			reportQuantityCell = new MeasReportQuantity();
			subCodeLength += reportQuantityCell.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			maxReportCells = new BerInteger();
			subCodeLength += maxReportCells.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			reportQuantityRsIndexes = new MeasReportQuantity();
			subCodeLength += reportQuantityRsIndexes.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			maxNrofRsIndexesToReport = new BerInteger();
			subCodeLength += maxNrofRsIndexesToReport.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			includeBeamMeasurements = new BerBoolean();
			subCodeLength += includeBeamMeasurements.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			useWhiteCellList = new BerBoolean();
			subCodeLength += useWhiteCellList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rsType != null) {
			sb.append("rsType: ").append(rsType);
		}
		else {
			sb.append("rsType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportInterval != null) {
			sb.append("reportInterval: ").append(reportInterval);
		}
		else {
			sb.append("reportInterval: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportAmount != null) {
			sb.append("reportAmount: ").append(reportAmount);
		}
		else {
			sb.append("reportAmount: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportQuantityCell != null) {
			sb.append("reportQuantityCell: ");
			reportQuantityCell.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("reportQuantityCell: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxReportCells != null) {
			sb.append("maxReportCells: ").append(maxReportCells);
		}
		else {
			sb.append("maxReportCells: <empty-required-field>");
		}
		
		if (reportQuantityRsIndexes != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("reportQuantityRsIndexes: ");
			reportQuantityRsIndexes.appendAsString(sb, indentLevel + 1);
		}
		
		if (maxNrofRsIndexesToReport != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNrofRsIndexesToReport: ").append(maxNrofRsIndexesToReport);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (includeBeamMeasurements != null) {
			sb.append("includeBeamMeasurements: ").append(includeBeamMeasurements);
		}
		else {
			sb.append("includeBeamMeasurements: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (useWhiteCellList != null) {
			sb.append("useWhiteCellList: ").append(useWhiteCellList);
		}
		else {
			sb.append("useWhiteCellList: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

