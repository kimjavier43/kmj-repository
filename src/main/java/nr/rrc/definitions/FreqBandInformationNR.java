/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class FreqBandInformationNR implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private FreqBandIndicatorNR bandNR = null;
	private AggregatedBandwith maxBandwidthRequestedDL = null;
	private AggregatedBandwith maxBandwidthRequestedUL = null;
	private BerInteger maxCarriersRequestedDL = null;
	private BerInteger maxCarriersRequestedUL = null;
	
	public FreqBandInformationNR() {
	}

	public FreqBandInformationNR(byte[] code) {
		this.code = code;
	}

	public void setBandNR(FreqBandIndicatorNR bandNR) {
		this.bandNR = bandNR;
	}

	public FreqBandIndicatorNR getBandNR() {
		return bandNR;
	}

	public void setMaxBandwidthRequestedDL(AggregatedBandwith maxBandwidthRequestedDL) {
		this.maxBandwidthRequestedDL = maxBandwidthRequestedDL;
	}

	public AggregatedBandwith getMaxBandwidthRequestedDL() {
		return maxBandwidthRequestedDL;
	}

	public void setMaxBandwidthRequestedUL(AggregatedBandwith maxBandwidthRequestedUL) {
		this.maxBandwidthRequestedUL = maxBandwidthRequestedUL;
	}

	public AggregatedBandwith getMaxBandwidthRequestedUL() {
		return maxBandwidthRequestedUL;
	}

	public void setMaxCarriersRequestedDL(BerInteger maxCarriersRequestedDL) {
		this.maxCarriersRequestedDL = maxCarriersRequestedDL;
	}

	public BerInteger getMaxCarriersRequestedDL() {
		return maxCarriersRequestedDL;
	}

	public void setMaxCarriersRequestedUL(BerInteger maxCarriersRequestedUL) {
		this.maxCarriersRequestedUL = maxCarriersRequestedUL;
	}

	public BerInteger getMaxCarriersRequestedUL() {
		return maxCarriersRequestedUL;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (maxCarriersRequestedUL != null) {
			codeLength += maxCarriersRequestedUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (maxCarriersRequestedDL != null) {
			codeLength += maxCarriersRequestedDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (maxBandwidthRequestedUL != null) {
			codeLength += maxBandwidthRequestedUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (maxBandwidthRequestedDL != null) {
			codeLength += maxBandwidthRequestedDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += bandNR.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			bandNR = new FreqBandIndicatorNR();
			subCodeLength += bandNR.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			maxBandwidthRequestedDL = new AggregatedBandwith();
			subCodeLength += maxBandwidthRequestedDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			maxBandwidthRequestedUL = new AggregatedBandwith();
			subCodeLength += maxBandwidthRequestedUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			maxCarriersRequestedDL = new BerInteger();
			subCodeLength += maxCarriersRequestedDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			maxCarriersRequestedUL = new BerInteger();
			subCodeLength += maxCarriersRequestedUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (bandNR != null) {
			sb.append("bandNR: ").append(bandNR);
		}
		else {
			sb.append("bandNR: <empty-required-field>");
		}
		
		if (maxBandwidthRequestedDL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxBandwidthRequestedDL: ").append(maxBandwidthRequestedDL);
		}
		
		if (maxBandwidthRequestedUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxBandwidthRequestedUL: ").append(maxBandwidthRequestedUL);
		}
		
		if (maxCarriersRequestedDL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxCarriersRequestedDL: ").append(maxCarriersRequestedDL);
		}
		
		if (maxCarriersRequestedUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxCarriersRequestedUL: ").append(maxCarriersRequestedUL);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

