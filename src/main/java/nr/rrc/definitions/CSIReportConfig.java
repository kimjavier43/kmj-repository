/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CSIReportConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class ReportConfigType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Periodic implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class PucchCSIResourceList implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<PUCCHCSIResource> seqOf = null;

				public PucchCSIResourceList() {
					seqOf = new ArrayList<PUCCHCSIResource>();
				}

				public PucchCSIResourceList(byte[] code) {
					this.code = code;
				}

				public List<PUCCHCSIResource> getPUCCHCSIResource() {
					if (seqOf == null) {
						seqOf = new ArrayList<PUCCHCSIResource>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						PUCCHCSIResource element = new PUCCHCSIResource();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<PUCCHCSIResource> it = seqOf.iterator();
						if (it.hasNext()) {
							it.next().appendAsString(sb, indentLevel + 1);
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								it.next().appendAsString(sb, indentLevel + 1);
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private CSIReportPeriodicityAndOffset reportSlotConfig = null;
			private PucchCSIResourceList pucchCSIResourceList = null;
			
			public Periodic() {
			}

			public Periodic(byte[] code) {
				this.code = code;
			}

			public void setReportSlotConfig(CSIReportPeriodicityAndOffset reportSlotConfig) {
				this.reportSlotConfig = reportSlotConfig;
			}

			public CSIReportPeriodicityAndOffset getReportSlotConfig() {
				return reportSlotConfig;
			}

			public void setPucchCSIResourceList(PucchCSIResourceList pucchCSIResourceList) {
				this.pucchCSIResourceList = pucchCSIResourceList;
			}

			public PucchCSIResourceList getPucchCSIResourceList() {
				return pucchCSIResourceList;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += pucchCSIResourceList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				
				sublength = reportSlotConfig.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					reportSlotConfig = new CSIReportPeriodicityAndOffset();
					subCodeLength += reportSlotConfig.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					pucchCSIResourceList = new PucchCSIResourceList();
					subCodeLength += pucchCSIResourceList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportSlotConfig != null) {
					sb.append("reportSlotConfig: ");
					reportSlotConfig.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("reportSlotConfig: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (pucchCSIResourceList != null) {
					sb.append("pucchCSIResourceList: ");
					pucchCSIResourceList.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("pucchCSIResourceList: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class SemiPersistentOnPUCCH implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class PucchCSIResourceList implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<PUCCHCSIResource> seqOf = null;

				public PucchCSIResourceList() {
					seqOf = new ArrayList<PUCCHCSIResource>();
				}

				public PucchCSIResourceList(byte[] code) {
					this.code = code;
				}

				public List<PUCCHCSIResource> getPUCCHCSIResource() {
					if (seqOf == null) {
						seqOf = new ArrayList<PUCCHCSIResource>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						PUCCHCSIResource element = new PUCCHCSIResource();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<PUCCHCSIResource> it = seqOf.iterator();
						if (it.hasNext()) {
							it.next().appendAsString(sb, indentLevel + 1);
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								it.next().appendAsString(sb, indentLevel + 1);
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private CSIReportPeriodicityAndOffset reportSlotConfig = null;
			private PucchCSIResourceList pucchCSIResourceList = null;
			
			public SemiPersistentOnPUCCH() {
			}

			public SemiPersistentOnPUCCH(byte[] code) {
				this.code = code;
			}

			public void setReportSlotConfig(CSIReportPeriodicityAndOffset reportSlotConfig) {
				this.reportSlotConfig = reportSlotConfig;
			}

			public CSIReportPeriodicityAndOffset getReportSlotConfig() {
				return reportSlotConfig;
			}

			public void setPucchCSIResourceList(PucchCSIResourceList pucchCSIResourceList) {
				this.pucchCSIResourceList = pucchCSIResourceList;
			}

			public PucchCSIResourceList getPucchCSIResourceList() {
				return pucchCSIResourceList;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += pucchCSIResourceList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				
				sublength = reportSlotConfig.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					reportSlotConfig = new CSIReportPeriodicityAndOffset();
					subCodeLength += reportSlotConfig.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					pucchCSIResourceList = new PucchCSIResourceList();
					subCodeLength += pucchCSIResourceList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportSlotConfig != null) {
					sb.append("reportSlotConfig: ");
					reportSlotConfig.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("reportSlotConfig: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (pucchCSIResourceList != null) {
					sb.append("pucchCSIResourceList: ");
					pucchCSIResourceList.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("pucchCSIResourceList: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class SemiPersistentOnPUSCH implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class ReportSlotOffsetList implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<BerInteger> seqOf = null;

				public ReportSlotOffsetList() {
					seqOf = new ArrayList<BerInteger>();
				}

				public ReportSlotOffsetList(byte[] code) {
					this.code = code;
				}

				public List<BerInteger> getBerInteger() {
					if (seqOf == null) {
						seqOf = new ArrayList<BerInteger>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						BerInteger element = new BerInteger();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<BerInteger> it = seqOf.iterator();
						if (it.hasNext()) {
							sb.append(it.next());
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								sb.append(it.next());
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum reportSlotConfig = null;
			private ReportSlotOffsetList reportSlotOffsetList = null;
			private P0PUSCHAlphaSetId p0alpha = null;
			
			public SemiPersistentOnPUSCH() {
			}

			public SemiPersistentOnPUSCH(byte[] code) {
				this.code = code;
			}

			public void setReportSlotConfig(BerEnum reportSlotConfig) {
				this.reportSlotConfig = reportSlotConfig;
			}

			public BerEnum getReportSlotConfig() {
				return reportSlotConfig;
			}

			public void setReportSlotOffsetList(ReportSlotOffsetList reportSlotOffsetList) {
				this.reportSlotOffsetList = reportSlotOffsetList;
			}

			public ReportSlotOffsetList getReportSlotOffsetList() {
				return reportSlotOffsetList;
			}

			public void setP0alpha(P0PUSCHAlphaSetId p0alpha) {
				this.p0alpha = p0alpha;
			}

			public P0PUSCHAlphaSetId getP0alpha() {
				return p0alpha;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += p0alpha.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				codeLength += reportSlotOffsetList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				
				codeLength += reportSlotConfig.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					reportSlotConfig = new BerEnum();
					subCodeLength += reportSlotConfig.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					reportSlotOffsetList = new ReportSlotOffsetList();
					subCodeLength += reportSlotOffsetList.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					p0alpha = new P0PUSCHAlphaSetId();
					subCodeLength += p0alpha.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportSlotConfig != null) {
					sb.append("reportSlotConfig: ").append(reportSlotConfig);
				}
				else {
					sb.append("reportSlotConfig: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportSlotOffsetList != null) {
					sb.append("reportSlotOffsetList: ");
					reportSlotOffsetList.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("reportSlotOffsetList: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (p0alpha != null) {
					sb.append("p0alpha: ").append(p0alpha);
				}
				else {
					sb.append("p0alpha: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Aperiodic implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class ReportSlotOffsetList implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<BerInteger> seqOf = null;

				public ReportSlotOffsetList() {
					seqOf = new ArrayList<BerInteger>();
				}

				public ReportSlotOffsetList(byte[] code) {
					this.code = code;
				}

				public List<BerInteger> getBerInteger() {
					if (seqOf == null) {
						seqOf = new ArrayList<BerInteger>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						BerInteger element = new BerInteger();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<BerInteger> it = seqOf.iterator();
						if (it.hasNext()) {
							sb.append(it.next());
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								sb.append(it.next());
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private ReportSlotOffsetList reportSlotOffsetList = null;
			
			public Aperiodic() {
			}

			public Aperiodic(byte[] code) {
				this.code = code;
			}

			public void setReportSlotOffsetList(ReportSlotOffsetList reportSlotOffsetList) {
				this.reportSlotOffsetList = reportSlotOffsetList;
			}

			public ReportSlotOffsetList getReportSlotOffsetList() {
				return reportSlotOffsetList;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += reportSlotOffsetList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					reportSlotOffsetList = new ReportSlotOffsetList();
					subCodeLength += reportSlotOffsetList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportSlotOffsetList != null) {
					sb.append("reportSlotOffsetList: ");
					reportSlotOffsetList.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("reportSlotOffsetList: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private Periodic periodic = null;
		private SemiPersistentOnPUCCH semiPersistentOnPUCCH = null;
		private SemiPersistentOnPUSCH semiPersistentOnPUSCH = null;
		private Aperiodic aperiodic = null;
		
		public ReportConfigType() {
		}

		public ReportConfigType(byte[] code) {
			this.code = code;
		}

		public void setPeriodic(Periodic periodic) {
			this.periodic = periodic;
		}

		public Periodic getPeriodic() {
			return periodic;
		}

		public void setSemiPersistentOnPUCCH(SemiPersistentOnPUCCH semiPersistentOnPUCCH) {
			this.semiPersistentOnPUCCH = semiPersistentOnPUCCH;
		}

		public SemiPersistentOnPUCCH getSemiPersistentOnPUCCH() {
			return semiPersistentOnPUCCH;
		}

		public void setSemiPersistentOnPUSCH(SemiPersistentOnPUSCH semiPersistentOnPUSCH) {
			this.semiPersistentOnPUSCH = semiPersistentOnPUSCH;
		}

		public SemiPersistentOnPUSCH getSemiPersistentOnPUSCH() {
			return semiPersistentOnPUSCH;
		}

		public void setAperiodic(Aperiodic aperiodic) {
			this.aperiodic = aperiodic;
		}

		public Aperiodic getAperiodic() {
			return aperiodic;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (aperiodic != null) {
				codeLength += aperiodic.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
				return codeLength;
			}
			
			if (semiPersistentOnPUSCH != null) {
				codeLength += semiPersistentOnPUSCH.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
				return codeLength;
			}
			
			if (semiPersistentOnPUCCH != null) {
				codeLength += semiPersistentOnPUCCH.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (periodic != null) {
				codeLength += periodic.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				periodic = new Periodic();
				codeLength += periodic.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				semiPersistentOnPUCCH = new SemiPersistentOnPUCCH();
				codeLength += semiPersistentOnPUCCH.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				semiPersistentOnPUSCH = new SemiPersistentOnPUSCH();
				codeLength += semiPersistentOnPUSCH.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				aperiodic = new Aperiodic();
				codeLength += aperiodic.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (periodic != null) {
				sb.append("periodic: ");
				periodic.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (semiPersistentOnPUCCH != null) {
				sb.append("semiPersistentOnPUCCH: ");
				semiPersistentOnPUCCH.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (semiPersistentOnPUSCH != null) {
				sb.append("semiPersistentOnPUSCH: ");
				semiPersistentOnPUSCH.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (aperiodic != null) {
				sb.append("aperiodic: ");
				aperiodic.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class ReportQuantity implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class CriRII1CQI implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum pdschBundleSizeForCSI = null;
			
			public CriRII1CQI() {
			}

			public CriRII1CQI(byte[] code) {
				this.code = code;
			}

			public void setPdschBundleSizeForCSI(BerEnum pdschBundleSizeForCSI) {
				this.pdschBundleSizeForCSI = pdschBundleSizeForCSI;
			}

			public BerEnum getPdschBundleSizeForCSI() {
				return pdschBundleSizeForCSI;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (pdschBundleSizeForCSI != null) {
					codeLength += pdschBundleSizeForCSI.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == 0) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					pdschBundleSizeForCSI = new BerEnum();
					subCodeLength += pdschBundleSizeForCSI.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				if (pdschBundleSizeForCSI != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("pdschBundleSizeForCSI: ").append(pdschBundleSizeForCSI);
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private BerNull none = null;
		private BerNull criRIPMICQI = null;
		private BerNull criRII1 = null;
		private CriRII1CQI criRII1CQI = null;
		private BerNull criRICQI = null;
		private BerNull criRSRP = null;
		private BerNull ssbIndexRSRP = null;
		private BerNull criRILIPMICQI = null;
		
		public ReportQuantity() {
		}

		public ReportQuantity(byte[] code) {
			this.code = code;
		}

		public void setNone(BerNull none) {
			this.none = none;
		}

		public BerNull getNone() {
			return none;
		}

		public void setCriRIPMICQI(BerNull criRIPMICQI) {
			this.criRIPMICQI = criRIPMICQI;
		}

		public BerNull getCriRIPMICQI() {
			return criRIPMICQI;
		}

		public void setCriRII1(BerNull criRII1) {
			this.criRII1 = criRII1;
		}

		public BerNull getCriRII1() {
			return criRII1;
		}

		public void setCriRII1CQI(CriRII1CQI criRII1CQI) {
			this.criRII1CQI = criRII1CQI;
		}

		public CriRII1CQI getCriRII1CQI() {
			return criRII1CQI;
		}

		public void setCriRICQI(BerNull criRICQI) {
			this.criRICQI = criRICQI;
		}

		public BerNull getCriRICQI() {
			return criRICQI;
		}

		public void setCriRSRP(BerNull criRSRP) {
			this.criRSRP = criRSRP;
		}

		public BerNull getCriRSRP() {
			return criRSRP;
		}

		public void setSsbIndexRSRP(BerNull ssbIndexRSRP) {
			this.ssbIndexRSRP = ssbIndexRSRP;
		}

		public BerNull getSsbIndexRSRP() {
			return ssbIndexRSRP;
		}

		public void setCriRILIPMICQI(BerNull criRILIPMICQI) {
			this.criRILIPMICQI = criRILIPMICQI;
		}

		public BerNull getCriRILIPMICQI() {
			return criRILIPMICQI;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (criRILIPMICQI != null) {
				codeLength += criRILIPMICQI.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 7
				reverseOS.write(0x87);
				codeLength += 1;
				return codeLength;
			}
			
			if (ssbIndexRSRP != null) {
				codeLength += ssbIndexRSRP.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 6
				reverseOS.write(0x86);
				codeLength += 1;
				return codeLength;
			}
			
			if (criRSRP != null) {
				codeLength += criRSRP.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 5
				reverseOS.write(0x85);
				codeLength += 1;
				return codeLength;
			}
			
			if (criRICQI != null) {
				codeLength += criRICQI.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				return codeLength;
			}
			
			if (criRII1CQI != null) {
				codeLength += criRII1CQI.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
				return codeLength;
			}
			
			if (criRII1 != null) {
				codeLength += criRII1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				return codeLength;
			}
			
			if (criRIPMICQI != null) {
				codeLength += criRIPMICQI.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (none != null) {
				codeLength += none.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				none = new BerNull();
				codeLength += none.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				criRIPMICQI = new BerNull();
				codeLength += criRIPMICQI.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				criRII1 = new BerNull();
				codeLength += criRII1.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				criRII1CQI = new CriRII1CQI();
				codeLength += criRII1CQI.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				criRICQI = new BerNull();
				codeLength += criRICQI.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				criRSRP = new BerNull();
				codeLength += criRSRP.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				ssbIndexRSRP = new BerNull();
				codeLength += ssbIndexRSRP.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				criRILIPMICQI = new BerNull();
				codeLength += criRILIPMICQI.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (none != null) {
				sb.append("none: ").append(none);
				return;
			}

			if (criRIPMICQI != null) {
				sb.append("criRIPMICQI: ").append(criRIPMICQI);
				return;
			}

			if (criRII1 != null) {
				sb.append("criRII1: ").append(criRII1);
				return;
			}

			if (criRII1CQI != null) {
				sb.append("criRII1CQI: ");
				criRII1CQI.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (criRICQI != null) {
				sb.append("criRICQI: ").append(criRICQI);
				return;
			}

			if (criRSRP != null) {
				sb.append("criRSRP: ").append(criRSRP);
				return;
			}

			if (ssbIndexRSRP != null) {
				sb.append("ssbIndexRSRP: ").append(ssbIndexRSRP);
				return;
			}

			if (criRILIPMICQI != null) {
				sb.append("criRILIPMICQI: ").append(criRILIPMICQI);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class ReportFreqConfiguration implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static class CsiReportingBand implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public byte[] code = null;
			private BerBitString subbands3 = null;
			private BerBitString subbands4 = null;
			private BerBitString subbands5 = null;
			private BerBitString subbands6 = null;
			private BerBitString subbands7 = null;
			private BerBitString subbands8 = null;
			private BerBitString subbands9 = null;
			private BerBitString subbands10 = null;
			private BerBitString subbands11 = null;
			private BerBitString subbands12 = null;
			private BerBitString subbands13 = null;
			private BerBitString subbands14 = null;
			private BerBitString subbands15 = null;
			private BerBitString subbands16 = null;
			private BerBitString subbands17 = null;
			private BerBitString subbands18 = null;
			
			public CsiReportingBand() {
			}

			public CsiReportingBand(byte[] code) {
				this.code = code;
			}

			public void setSubbands3(BerBitString subbands3) {
				this.subbands3 = subbands3;
			}

			public BerBitString getSubbands3() {
				return subbands3;
			}

			public void setSubbands4(BerBitString subbands4) {
				this.subbands4 = subbands4;
			}

			public BerBitString getSubbands4() {
				return subbands4;
			}

			public void setSubbands5(BerBitString subbands5) {
				this.subbands5 = subbands5;
			}

			public BerBitString getSubbands5() {
				return subbands5;
			}

			public void setSubbands6(BerBitString subbands6) {
				this.subbands6 = subbands6;
			}

			public BerBitString getSubbands6() {
				return subbands6;
			}

			public void setSubbands7(BerBitString subbands7) {
				this.subbands7 = subbands7;
			}

			public BerBitString getSubbands7() {
				return subbands7;
			}

			public void setSubbands8(BerBitString subbands8) {
				this.subbands8 = subbands8;
			}

			public BerBitString getSubbands8() {
				return subbands8;
			}

			public void setSubbands9(BerBitString subbands9) {
				this.subbands9 = subbands9;
			}

			public BerBitString getSubbands9() {
				return subbands9;
			}

			public void setSubbands10(BerBitString subbands10) {
				this.subbands10 = subbands10;
			}

			public BerBitString getSubbands10() {
				return subbands10;
			}

			public void setSubbands11(BerBitString subbands11) {
				this.subbands11 = subbands11;
			}

			public BerBitString getSubbands11() {
				return subbands11;
			}

			public void setSubbands12(BerBitString subbands12) {
				this.subbands12 = subbands12;
			}

			public BerBitString getSubbands12() {
				return subbands12;
			}

			public void setSubbands13(BerBitString subbands13) {
				this.subbands13 = subbands13;
			}

			public BerBitString getSubbands13() {
				return subbands13;
			}

			public void setSubbands14(BerBitString subbands14) {
				this.subbands14 = subbands14;
			}

			public BerBitString getSubbands14() {
				return subbands14;
			}

			public void setSubbands15(BerBitString subbands15) {
				this.subbands15 = subbands15;
			}

			public BerBitString getSubbands15() {
				return subbands15;
			}

			public void setSubbands16(BerBitString subbands16) {
				this.subbands16 = subbands16;
			}

			public BerBitString getSubbands16() {
				return subbands16;
			}

			public void setSubbands17(BerBitString subbands17) {
				this.subbands17 = subbands17;
			}

			public BerBitString getSubbands17() {
				return subbands17;
			}

			public void setSubbands18(BerBitString subbands18) {
				this.subbands18 = subbands18;
			}

			public BerBitString getSubbands18() {
				return subbands18;
			}

			public int encode(OutputStream reverseOS) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					return code.length;
				}

				int codeLength = 0;
				if (subbands18 != null) {
					codeLength += subbands18.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 15
					reverseOS.write(0x8F);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands17 != null) {
					codeLength += subbands17.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 14
					reverseOS.write(0x8E);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands16 != null) {
					codeLength += subbands16.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 13
					reverseOS.write(0x8D);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands15 != null) {
					codeLength += subbands15.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 12
					reverseOS.write(0x8C);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands14 != null) {
					codeLength += subbands14.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 11
					reverseOS.write(0x8B);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands13 != null) {
					codeLength += subbands13.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 10
					reverseOS.write(0x8A);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands12 != null) {
					codeLength += subbands12.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 9
					reverseOS.write(0x89);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands11 != null) {
					codeLength += subbands11.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 8
					reverseOS.write(0x88);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands10 != null) {
					codeLength += subbands10.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 7
					reverseOS.write(0x87);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands9 != null) {
					codeLength += subbands9.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 6
					reverseOS.write(0x86);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands8 != null) {
					codeLength += subbands8.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 5
					reverseOS.write(0x85);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands7 != null) {
					codeLength += subbands7.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 4
					reverseOS.write(0x84);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands6 != null) {
					codeLength += subbands6.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 3
					reverseOS.write(0x83);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands5 != null) {
					codeLength += subbands5.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 2
					reverseOS.write(0x82);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands4 != null) {
					codeLength += subbands4.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 1
					reverseOS.write(0x81);
					codeLength += 1;
					return codeLength;
				}
				
				if (subbands3 != null) {
					codeLength += subbands3.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
					return codeLength;
				}
				
				throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, null);
			}

			public int decode(InputStream is, BerTag berTag) throws IOException {

				int codeLength = 0;
				BerTag passedTag = berTag;

				if (berTag == null) {
					berTag = new BerTag();
					codeLength += berTag.decode(is);
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					subbands3 = new BerBitString();
					codeLength += subbands3.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					subbands4 = new BerBitString();
					codeLength += subbands4.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					subbands5 = new BerBitString();
					codeLength += subbands5.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					subbands6 = new BerBitString();
					codeLength += subbands6.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
					subbands7 = new BerBitString();
					codeLength += subbands7.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
					subbands8 = new BerBitString();
					codeLength += subbands8.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
					subbands9 = new BerBitString();
					codeLength += subbands9.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
					subbands10 = new BerBitString();
					codeLength += subbands10.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
					subbands11 = new BerBitString();
					codeLength += subbands11.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
					subbands12 = new BerBitString();
					codeLength += subbands12.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
					subbands13 = new BerBitString();
					codeLength += subbands13.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
					subbands14 = new BerBitString();
					codeLength += subbands14.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
					subbands15 = new BerBitString();
					codeLength += subbands15.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
					subbands16 = new BerBitString();
					codeLength += subbands16.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
					subbands17 = new BerBitString();
					codeLength += subbands17.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
					subbands18 = new BerBitString();
					codeLength += subbands18.decode(is, false);
					return codeLength;
				}

				if (passedTag != null) {
					return 0;
				}

				throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				if (subbands3 != null) {
					sb.append("subbands3: ").append(subbands3);
					return;
				}

				if (subbands4 != null) {
					sb.append("subbands4: ").append(subbands4);
					return;
				}

				if (subbands5 != null) {
					sb.append("subbands5: ").append(subbands5);
					return;
				}

				if (subbands6 != null) {
					sb.append("subbands6: ").append(subbands6);
					return;
				}

				if (subbands7 != null) {
					sb.append("subbands7: ").append(subbands7);
					return;
				}

				if (subbands8 != null) {
					sb.append("subbands8: ").append(subbands8);
					return;
				}

				if (subbands9 != null) {
					sb.append("subbands9: ").append(subbands9);
					return;
				}

				if (subbands10 != null) {
					sb.append("subbands10: ").append(subbands10);
					return;
				}

				if (subbands11 != null) {
					sb.append("subbands11: ").append(subbands11);
					return;
				}

				if (subbands12 != null) {
					sb.append("subbands12: ").append(subbands12);
					return;
				}

				if (subbands13 != null) {
					sb.append("subbands13: ").append(subbands13);
					return;
				}

				if (subbands14 != null) {
					sb.append("subbands14: ").append(subbands14);
					return;
				}

				if (subbands15 != null) {
					sb.append("subbands15: ").append(subbands15);
					return;
				}

				if (subbands16 != null) {
					sb.append("subbands16: ").append(subbands16);
					return;
				}

				if (subbands17 != null) {
					sb.append("subbands17: ").append(subbands17);
					return;
				}

				if (subbands18 != null) {
					sb.append("subbands18: ").append(subbands18);
					return;
				}

				sb.append("<none>");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum cqiFormatIndicator = null;
		private BerEnum pmiFormatIndicator = null;
		private CsiReportingBand csiReportingBand = null;
		
		public ReportFreqConfiguration() {
		}

		public ReportFreqConfiguration(byte[] code) {
			this.code = code;
		}

		public void setCqiFormatIndicator(BerEnum cqiFormatIndicator) {
			this.cqiFormatIndicator = cqiFormatIndicator;
		}

		public BerEnum getCqiFormatIndicator() {
			return cqiFormatIndicator;
		}

		public void setPmiFormatIndicator(BerEnum pmiFormatIndicator) {
			this.pmiFormatIndicator = pmiFormatIndicator;
		}

		public BerEnum getPmiFormatIndicator() {
			return pmiFormatIndicator;
		}

		public void setCsiReportingBand(CsiReportingBand csiReportingBand) {
			this.csiReportingBand = csiReportingBand;
		}

		public CsiReportingBand getCsiReportingBand() {
			return csiReportingBand;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			int sublength;

			if (csiReportingBand != null) {
				sublength = csiReportingBand.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
			}
			
			if (pmiFormatIndicator != null) {
				codeLength += pmiFormatIndicator.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (cqiFormatIndicator != null) {
				codeLength += cqiFormatIndicator.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				cqiFormatIndicator = new BerEnum();
				subCodeLength += cqiFormatIndicator.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				pmiFormatIndicator = new BerEnum();
				subCodeLength += pmiFormatIndicator.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				subCodeLength += length.decode(is);
				csiReportingBand = new CsiReportingBand();
				subCodeLength += csiReportingBand.decode(is, null);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (cqiFormatIndicator != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("cqiFormatIndicator: ").append(cqiFormatIndicator);
				firstSelectedElement = false;
			}
			
			if (pmiFormatIndicator != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("pmiFormatIndicator: ").append(pmiFormatIndicator);
				firstSelectedElement = false;
			}
			
			if (csiReportingBand != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("csiReportingBand: ");
				csiReportingBand.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class GroupBasedBeamReporting implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Disabled implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum nrofReportedRS = null;
			
			public Disabled() {
			}

			public Disabled(byte[] code) {
				this.code = code;
			}

			public void setNrofReportedRS(BerEnum nrofReportedRS) {
				this.nrofReportedRS = nrofReportedRS;
			}

			public BerEnum getNrofReportedRS() {
				return nrofReportedRS;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (nrofReportedRS != null) {
					codeLength += nrofReportedRS.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == 0) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					nrofReportedRS = new BerEnum();
					subCodeLength += nrofReportedRS.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				if (nrofReportedRS != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("nrofReportedRS: ").append(nrofReportedRS);
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private BerNull enabled = null;
		private Disabled disabled = null;
		
		public GroupBasedBeamReporting() {
		}

		public GroupBasedBeamReporting(byte[] code) {
			this.code = code;
		}

		public void setEnabled(BerNull enabled) {
			this.enabled = enabled;
		}

		public BerNull getEnabled() {
			return enabled;
		}

		public void setDisabled(Disabled disabled) {
			this.disabled = disabled;
		}

		public Disabled getDisabled() {
			return disabled;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (disabled != null) {
				codeLength += disabled.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (enabled != null) {
				codeLength += enabled.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				enabled = new BerNull();
				codeLength += enabled.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				disabled = new Disabled();
				codeLength += disabled.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (enabled != null) {
				sb.append("enabled: ").append(enabled);
				return;
			}

			if (disabled != null) {
				sb.append("disabled: ");
				disabled.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class NonPMIPortIndication implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<PortIndexFor8Ranks> seqOf = null;

		public NonPMIPortIndication() {
			seqOf = new ArrayList<PortIndexFor8Ranks>();
		}

		public NonPMIPortIndication(byte[] code) {
			this.code = code;
		}

		public List<PortIndexFor8Ranks> getPortIndexFor8Ranks() {
			if (seqOf == null) {
				seqOf = new ArrayList<PortIndexFor8Ranks>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				PortIndexFor8Ranks element = new PortIndexFor8Ranks();
				subCodeLength += element.decode(is, null);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<PortIndexFor8Ranks> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private CSIReportConfigId reportConfigId = null;
	private ServCellIndex carrier = null;
	private CSIResourceConfigId resourcesForChannelMeasurement = null;
	private CSIResourceConfigId csiIMResourcesForInterference = null;
	private CSIResourceConfigId nzpCSIRSResourcesForInterference = null;
	private ReportConfigType reportConfigType = null;
	private ReportQuantity reportQuantity = null;
	private ReportFreqConfiguration reportFreqConfiguration = null;
	private BerEnum timeRestrictionForChannelMeasurements = null;
	private BerEnum timeRestrictionForInterferenceMeasurements = null;
	private CodebookConfig codebookConfig = null;
	private BerEnum nrofCQIsPerReport = null;
	private GroupBasedBeamReporting groupBasedBeamReporting = null;
	private BerEnum cqiTable = null;
	private BerEnum subbandSize = null;
	private NonPMIPortIndication nonPMIPortIndication = null;
	
	public CSIReportConfig() {
	}

	public CSIReportConfig(byte[] code) {
		this.code = code;
	}

	public void setReportConfigId(CSIReportConfigId reportConfigId) {
		this.reportConfigId = reportConfigId;
	}

	public CSIReportConfigId getReportConfigId() {
		return reportConfigId;
	}

	public void setCarrier(ServCellIndex carrier) {
		this.carrier = carrier;
	}

	public ServCellIndex getCarrier() {
		return carrier;
	}

	public void setResourcesForChannelMeasurement(CSIResourceConfigId resourcesForChannelMeasurement) {
		this.resourcesForChannelMeasurement = resourcesForChannelMeasurement;
	}

	public CSIResourceConfigId getResourcesForChannelMeasurement() {
		return resourcesForChannelMeasurement;
	}

	public void setCsiIMResourcesForInterference(CSIResourceConfigId csiIMResourcesForInterference) {
		this.csiIMResourcesForInterference = csiIMResourcesForInterference;
	}

	public CSIResourceConfigId getCsiIMResourcesForInterference() {
		return csiIMResourcesForInterference;
	}

	public void setNzpCSIRSResourcesForInterference(CSIResourceConfigId nzpCSIRSResourcesForInterference) {
		this.nzpCSIRSResourcesForInterference = nzpCSIRSResourcesForInterference;
	}

	public CSIResourceConfigId getNzpCSIRSResourcesForInterference() {
		return nzpCSIRSResourcesForInterference;
	}

	public void setReportConfigType(ReportConfigType reportConfigType) {
		this.reportConfigType = reportConfigType;
	}

	public ReportConfigType getReportConfigType() {
		return reportConfigType;
	}

	public void setReportQuantity(ReportQuantity reportQuantity) {
		this.reportQuantity = reportQuantity;
	}

	public ReportQuantity getReportQuantity() {
		return reportQuantity;
	}

	public void setReportFreqConfiguration(ReportFreqConfiguration reportFreqConfiguration) {
		this.reportFreqConfiguration = reportFreqConfiguration;
	}

	public ReportFreqConfiguration getReportFreqConfiguration() {
		return reportFreqConfiguration;
	}

	public void setTimeRestrictionForChannelMeasurements(BerEnum timeRestrictionForChannelMeasurements) {
		this.timeRestrictionForChannelMeasurements = timeRestrictionForChannelMeasurements;
	}

	public BerEnum getTimeRestrictionForChannelMeasurements() {
		return timeRestrictionForChannelMeasurements;
	}

	public void setTimeRestrictionForInterferenceMeasurements(BerEnum timeRestrictionForInterferenceMeasurements) {
		this.timeRestrictionForInterferenceMeasurements = timeRestrictionForInterferenceMeasurements;
	}

	public BerEnum getTimeRestrictionForInterferenceMeasurements() {
		return timeRestrictionForInterferenceMeasurements;
	}

	public void setCodebookConfig(CodebookConfig codebookConfig) {
		this.codebookConfig = codebookConfig;
	}

	public CodebookConfig getCodebookConfig() {
		return codebookConfig;
	}

	public void setNrofCQIsPerReport(BerEnum nrofCQIsPerReport) {
		this.nrofCQIsPerReport = nrofCQIsPerReport;
	}

	public BerEnum getNrofCQIsPerReport() {
		return nrofCQIsPerReport;
	}

	public void setGroupBasedBeamReporting(GroupBasedBeamReporting groupBasedBeamReporting) {
		this.groupBasedBeamReporting = groupBasedBeamReporting;
	}

	public GroupBasedBeamReporting getGroupBasedBeamReporting() {
		return groupBasedBeamReporting;
	}

	public void setCqiTable(BerEnum cqiTable) {
		this.cqiTable = cqiTable;
	}

	public BerEnum getCqiTable() {
		return cqiTable;
	}

	public void setSubbandSize(BerEnum subbandSize) {
		this.subbandSize = subbandSize;
	}

	public BerEnum getSubbandSize() {
		return subbandSize;
	}

	public void setNonPMIPortIndication(NonPMIPortIndication nonPMIPortIndication) {
		this.nonPMIPortIndication = nonPMIPortIndication;
	}

	public NonPMIPortIndication getNonPMIPortIndication() {
		return nonPMIPortIndication;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (nonPMIPortIndication != null) {
			codeLength += nonPMIPortIndication.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			reverseOS.write(0xAF);
			codeLength += 1;
		}
		
		codeLength += subbandSize.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 14
		reverseOS.write(0x8E);
		codeLength += 1;
		
		if (cqiTable != null) {
			codeLength += cqiTable.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		sublength = groupBasedBeamReporting.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
		reverseOS.write(0xAC);
		codeLength += 1;
		
		if (nrofCQIsPerReport != null) {
			codeLength += nrofCQIsPerReport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (codebookConfig != null) {
			codeLength += codebookConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		codeLength += timeRestrictionForInterferenceMeasurements.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 9
		reverseOS.write(0x89);
		codeLength += 1;
		
		codeLength += timeRestrictionForChannelMeasurements.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		reverseOS.write(0x88);
		codeLength += 1;
		
		if (reportFreqConfiguration != null) {
			codeLength += reportFreqConfiguration.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		sublength = reportQuantity.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
		reverseOS.write(0xA6);
		codeLength += 1;
		
		sublength = reportConfigType.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
		reverseOS.write(0xA5);
		codeLength += 1;
		
		if (nzpCSIRSResourcesForInterference != null) {
			codeLength += nzpCSIRSResourcesForInterference.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (csiIMResourcesForInterference != null) {
			codeLength += csiIMResourcesForInterference.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		codeLength += resourcesForChannelMeasurement.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		if (carrier != null) {
			codeLength += carrier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += reportConfigId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			reportConfigId = new CSIReportConfigId();
			subCodeLength += reportConfigId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			carrier = new ServCellIndex();
			subCodeLength += carrier.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			resourcesForChannelMeasurement = new CSIResourceConfigId();
			subCodeLength += resourcesForChannelMeasurement.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			csiIMResourcesForInterference = new CSIResourceConfigId();
			subCodeLength += csiIMResourcesForInterference.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			nzpCSIRSResourcesForInterference = new CSIResourceConfigId();
			subCodeLength += nzpCSIRSResourcesForInterference.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			subCodeLength += length.decode(is);
			reportConfigType = new ReportConfigType();
			subCodeLength += reportConfigType.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			subCodeLength += length.decode(is);
			reportQuantity = new ReportQuantity();
			subCodeLength += reportQuantity.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			reportFreqConfiguration = new ReportFreqConfiguration();
			subCodeLength += reportFreqConfiguration.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			timeRestrictionForChannelMeasurements = new BerEnum();
			subCodeLength += timeRestrictionForChannelMeasurements.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			timeRestrictionForInterferenceMeasurements = new BerEnum();
			subCodeLength += timeRestrictionForInterferenceMeasurements.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			codebookConfig = new CodebookConfig();
			subCodeLength += codebookConfig.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			nrofCQIsPerReport = new BerEnum();
			subCodeLength += nrofCQIsPerReport.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			subCodeLength += length.decode(is);
			groupBasedBeamReporting = new GroupBasedBeamReporting();
			subCodeLength += groupBasedBeamReporting.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			cqiTable = new BerEnum();
			subCodeLength += cqiTable.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			subbandSize = new BerEnum();
			subCodeLength += subbandSize.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			nonPMIPortIndication = new NonPMIPortIndication();
			subCodeLength += nonPMIPortIndication.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportConfigId != null) {
			sb.append("reportConfigId: ").append(reportConfigId);
		}
		else {
			sb.append("reportConfigId: <empty-required-field>");
		}
		
		if (carrier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("carrier: ").append(carrier);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (resourcesForChannelMeasurement != null) {
			sb.append("resourcesForChannelMeasurement: ").append(resourcesForChannelMeasurement);
		}
		else {
			sb.append("resourcesForChannelMeasurement: <empty-required-field>");
		}
		
		if (csiIMResourcesForInterference != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("csiIMResourcesForInterference: ").append(csiIMResourcesForInterference);
		}
		
		if (nzpCSIRSResourcesForInterference != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nzpCSIRSResourcesForInterference: ").append(nzpCSIRSResourcesForInterference);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportConfigType != null) {
			sb.append("reportConfigType: ");
			reportConfigType.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("reportConfigType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportQuantity != null) {
			sb.append("reportQuantity: ");
			reportQuantity.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("reportQuantity: <empty-required-field>");
		}
		
		if (reportFreqConfiguration != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("reportFreqConfiguration: ");
			reportFreqConfiguration.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (timeRestrictionForChannelMeasurements != null) {
			sb.append("timeRestrictionForChannelMeasurements: ").append(timeRestrictionForChannelMeasurements);
		}
		else {
			sb.append("timeRestrictionForChannelMeasurements: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (timeRestrictionForInterferenceMeasurements != null) {
			sb.append("timeRestrictionForInterferenceMeasurements: ").append(timeRestrictionForInterferenceMeasurements);
		}
		else {
			sb.append("timeRestrictionForInterferenceMeasurements: <empty-required-field>");
		}
		
		if (codebookConfig != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("codebookConfig: ");
			codebookConfig.appendAsString(sb, indentLevel + 1);
		}
		
		if (nrofCQIsPerReport != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nrofCQIsPerReport: ").append(nrofCQIsPerReport);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (groupBasedBeamReporting != null) {
			sb.append("groupBasedBeamReporting: ");
			groupBasedBeamReporting.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("groupBasedBeamReporting: <empty-required-field>");
		}
		
		if (cqiTable != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cqiTable: ").append(cqiTable);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (subbandSize != null) {
			sb.append("subbandSize: ").append(subbandSize);
		}
		else {
			sb.append("subbandSize: <empty-required-field>");
		}
		
		if (nonPMIPortIndication != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonPMIPortIndication: ");
			nonPMIPortIndication.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

