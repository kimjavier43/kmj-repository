/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class UENRCapability implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class FeatureSetCombinations implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<FeatureSetCombination> seqOf = null;

		public FeatureSetCombinations() {
			seqOf = new ArrayList<FeatureSetCombination>();
		}

		public FeatureSetCombinations(byte[] code) {
			this.code = code;
		}

		public List<FeatureSetCombination> getFeatureSetCombination() {
			if (seqOf == null) {
				seqOf = new ArrayList<FeatureSetCombination>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				FeatureSetCombination element = new FeatureSetCombination();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<FeatureSetCombination> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class NonCriticalExtension implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		
		public NonCriticalExtension() {
		}

		public NonCriticalExtension(byte[] code) {
			this.code = code;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			return subCodeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private AccessStratumRelease accessStratumRelease = null;
	private PDCPParameters pdcpParameters = null;
	private RLCParameters rlcParameters = null;
	private MACParameters macParameters = null;
	private PhyParameters phyParameters = null;
	private RFParameters rfParameters = null;
	private MeasParameters measParameters = null;
	private UENRCapabilityAddXDDMode fddAddUENRCapabilities = null;
	private UENRCapabilityAddXDDMode tddAddUENRCapabilities = null;
	private UENRCapabilityAddFRXMode fr1AddUENRCapabilities = null;
	private UENRCapabilityAddFRXMode fr2AddUENRCapabilities = null;
	private FeatureSets featureSets = null;
	private FeatureSetCombinations featureSetCombinations = null;
	private BerOctetString lateNonCriticalExtension = null;
	private NonCriticalExtension nonCriticalExtension = null;
	
	public UENRCapability() {
	}

	public UENRCapability(byte[] code) {
		this.code = code;
	}

	public void setAccessStratumRelease(AccessStratumRelease accessStratumRelease) {
		this.accessStratumRelease = accessStratumRelease;
	}

	public AccessStratumRelease getAccessStratumRelease() {
		return accessStratumRelease;
	}

	public void setPdcpParameters(PDCPParameters pdcpParameters) {
		this.pdcpParameters = pdcpParameters;
	}

	public PDCPParameters getPdcpParameters() {
		return pdcpParameters;
	}

	public void setRlcParameters(RLCParameters rlcParameters) {
		this.rlcParameters = rlcParameters;
	}

	public RLCParameters getRlcParameters() {
		return rlcParameters;
	}

	public void setMacParameters(MACParameters macParameters) {
		this.macParameters = macParameters;
	}

	public MACParameters getMacParameters() {
		return macParameters;
	}

	public void setPhyParameters(PhyParameters phyParameters) {
		this.phyParameters = phyParameters;
	}

	public PhyParameters getPhyParameters() {
		return phyParameters;
	}

	public void setRfParameters(RFParameters rfParameters) {
		this.rfParameters = rfParameters;
	}

	public RFParameters getRfParameters() {
		return rfParameters;
	}

	public void setMeasParameters(MeasParameters measParameters) {
		this.measParameters = measParameters;
	}

	public MeasParameters getMeasParameters() {
		return measParameters;
	}

	public void setFddAddUENRCapabilities(UENRCapabilityAddXDDMode fddAddUENRCapabilities) {
		this.fddAddUENRCapabilities = fddAddUENRCapabilities;
	}

	public UENRCapabilityAddXDDMode getFddAddUENRCapabilities() {
		return fddAddUENRCapabilities;
	}

	public void setTddAddUENRCapabilities(UENRCapabilityAddXDDMode tddAddUENRCapabilities) {
		this.tddAddUENRCapabilities = tddAddUENRCapabilities;
	}

	public UENRCapabilityAddXDDMode getTddAddUENRCapabilities() {
		return tddAddUENRCapabilities;
	}

	public void setFr1AddUENRCapabilities(UENRCapabilityAddFRXMode fr1AddUENRCapabilities) {
		this.fr1AddUENRCapabilities = fr1AddUENRCapabilities;
	}

	public UENRCapabilityAddFRXMode getFr1AddUENRCapabilities() {
		return fr1AddUENRCapabilities;
	}

	public void setFr2AddUENRCapabilities(UENRCapabilityAddFRXMode fr2AddUENRCapabilities) {
		this.fr2AddUENRCapabilities = fr2AddUENRCapabilities;
	}

	public UENRCapabilityAddFRXMode getFr2AddUENRCapabilities() {
		return fr2AddUENRCapabilities;
	}

	public void setFeatureSets(FeatureSets featureSets) {
		this.featureSets = featureSets;
	}

	public FeatureSets getFeatureSets() {
		return featureSets;
	}

	public void setFeatureSetCombinations(FeatureSetCombinations featureSetCombinations) {
		this.featureSetCombinations = featureSetCombinations;
	}

	public FeatureSetCombinations getFeatureSetCombinations() {
		return featureSetCombinations;
	}

	public void setLateNonCriticalExtension(BerOctetString lateNonCriticalExtension) {
		this.lateNonCriticalExtension = lateNonCriticalExtension;
	}

	public BerOctetString getLateNonCriticalExtension() {
		return lateNonCriticalExtension;
	}

	public void setNonCriticalExtension(NonCriticalExtension nonCriticalExtension) {
		this.nonCriticalExtension = nonCriticalExtension;
	}

	public NonCriticalExtension getNonCriticalExtension() {
		return nonCriticalExtension;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (nonCriticalExtension != null) {
			codeLength += nonCriticalExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
			reverseOS.write(0xAE);
			codeLength += 1;
		}
		
		if (lateNonCriticalExtension != null) {
			codeLength += lateNonCriticalExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (featureSetCombinations != null) {
			codeLength += featureSetCombinations.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (featureSets != null) {
			codeLength += featureSets.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (fr2AddUENRCapabilities != null) {
			codeLength += fr2AddUENRCapabilities.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (fr1AddUENRCapabilities != null) {
			codeLength += fr1AddUENRCapabilities.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (tddAddUENRCapabilities != null) {
			codeLength += tddAddUENRCapabilities.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (fddAddUENRCapabilities != null) {
			codeLength += fddAddUENRCapabilities.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (measParameters != null) {
			codeLength += measParameters.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		codeLength += rfParameters.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
		reverseOS.write(0xA5);
		codeLength += 1;
		
		codeLength += phyParameters.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
		reverseOS.write(0xA4);
		codeLength += 1;
		
		if (macParameters != null) {
			codeLength += macParameters.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (rlcParameters != null) {
			codeLength += rlcParameters.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		codeLength += pdcpParameters.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		codeLength += accessStratumRelease.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			accessStratumRelease = new AccessStratumRelease();
			subCodeLength += accessStratumRelease.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			pdcpParameters = new PDCPParameters();
			subCodeLength += pdcpParameters.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			rlcParameters = new RLCParameters();
			subCodeLength += rlcParameters.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			macParameters = new MACParameters();
			subCodeLength += macParameters.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			phyParameters = new PhyParameters();
			subCodeLength += phyParameters.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			rfParameters = new RFParameters();
			subCodeLength += rfParameters.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			measParameters = new MeasParameters();
			subCodeLength += measParameters.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			fddAddUENRCapabilities = new UENRCapabilityAddXDDMode();
			subCodeLength += fddAddUENRCapabilities.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			tddAddUENRCapabilities = new UENRCapabilityAddXDDMode();
			subCodeLength += tddAddUENRCapabilities.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			fr1AddUENRCapabilities = new UENRCapabilityAddFRXMode();
			subCodeLength += fr1AddUENRCapabilities.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			fr2AddUENRCapabilities = new UENRCapabilityAddFRXMode();
			subCodeLength += fr2AddUENRCapabilities.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			featureSets = new FeatureSets();
			subCodeLength += featureSets.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			featureSetCombinations = new FeatureSetCombinations();
			subCodeLength += featureSetCombinations.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			lateNonCriticalExtension = new BerOctetString();
			subCodeLength += lateNonCriticalExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			nonCriticalExtension = new NonCriticalExtension();
			subCodeLength += nonCriticalExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accessStratumRelease != null) {
			sb.append("accessStratumRelease: ").append(accessStratumRelease);
		}
		else {
			sb.append("accessStratumRelease: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (pdcpParameters != null) {
			sb.append("pdcpParameters: ");
			pdcpParameters.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("pdcpParameters: <empty-required-field>");
		}
		
		if (rlcParameters != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rlcParameters: ");
			rlcParameters.appendAsString(sb, indentLevel + 1);
		}
		
		if (macParameters != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("macParameters: ");
			macParameters.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (phyParameters != null) {
			sb.append("phyParameters: ");
			phyParameters.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("phyParameters: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rfParameters != null) {
			sb.append("rfParameters: ");
			rfParameters.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("rfParameters: <empty-required-field>");
		}
		
		if (measParameters != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("measParameters: ");
			measParameters.appendAsString(sb, indentLevel + 1);
		}
		
		if (fddAddUENRCapabilities != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fddAddUENRCapabilities: ");
			fddAddUENRCapabilities.appendAsString(sb, indentLevel + 1);
		}
		
		if (tddAddUENRCapabilities != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tddAddUENRCapabilities: ");
			tddAddUENRCapabilities.appendAsString(sb, indentLevel + 1);
		}
		
		if (fr1AddUENRCapabilities != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fr1AddUENRCapabilities: ");
			fr1AddUENRCapabilities.appendAsString(sb, indentLevel + 1);
		}
		
		if (fr2AddUENRCapabilities != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fr2AddUENRCapabilities: ");
			fr2AddUENRCapabilities.appendAsString(sb, indentLevel + 1);
		}
		
		if (featureSets != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("featureSets: ");
			featureSets.appendAsString(sb, indentLevel + 1);
		}
		
		if (featureSetCombinations != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("featureSetCombinations: ");
			featureSetCombinations.appendAsString(sb, indentLevel + 1);
		}
		
		if (lateNonCriticalExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lateNonCriticalExtension: ").append(lateNonCriticalExtension);
		}
		
		if (nonCriticalExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonCriticalExtension: ");
			nonCriticalExtension.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

