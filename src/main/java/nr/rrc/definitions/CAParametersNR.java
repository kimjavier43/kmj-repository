/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CAParametersNR implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum multipleTimingAdvances = null;
	private BerEnum parallelTxSRSPUCCHPUSCH = null;
	private BerEnum parallelTxPRACHSRSPUCCHPUSCH = null;
	private BerEnum simultaneousRxTxInterBandCA = null;
	private BerEnum simultaneousRxTxSUL = null;
	private BerEnum diffNumerologyAcrossPUCCHGroup = null;
	private BerEnum diffNumerologyWithinPUCCHGroup = null;
	private BerEnum supportedNumberTAG = null;
	
	public CAParametersNR() {
	}

	public CAParametersNR(byte[] code) {
		this.code = code;
	}

	public void setMultipleTimingAdvances(BerEnum multipleTimingAdvances) {
		this.multipleTimingAdvances = multipleTimingAdvances;
	}

	public BerEnum getMultipleTimingAdvances() {
		return multipleTimingAdvances;
	}

	public void setParallelTxSRSPUCCHPUSCH(BerEnum parallelTxSRSPUCCHPUSCH) {
		this.parallelTxSRSPUCCHPUSCH = parallelTxSRSPUCCHPUSCH;
	}

	public BerEnum getParallelTxSRSPUCCHPUSCH() {
		return parallelTxSRSPUCCHPUSCH;
	}

	public void setParallelTxPRACHSRSPUCCHPUSCH(BerEnum parallelTxPRACHSRSPUCCHPUSCH) {
		this.parallelTxPRACHSRSPUCCHPUSCH = parallelTxPRACHSRSPUCCHPUSCH;
	}

	public BerEnum getParallelTxPRACHSRSPUCCHPUSCH() {
		return parallelTxPRACHSRSPUCCHPUSCH;
	}

	public void setSimultaneousRxTxInterBandCA(BerEnum simultaneousRxTxInterBandCA) {
		this.simultaneousRxTxInterBandCA = simultaneousRxTxInterBandCA;
	}

	public BerEnum getSimultaneousRxTxInterBandCA() {
		return simultaneousRxTxInterBandCA;
	}

	public void setSimultaneousRxTxSUL(BerEnum simultaneousRxTxSUL) {
		this.simultaneousRxTxSUL = simultaneousRxTxSUL;
	}

	public BerEnum getSimultaneousRxTxSUL() {
		return simultaneousRxTxSUL;
	}

	public void setDiffNumerologyAcrossPUCCHGroup(BerEnum diffNumerologyAcrossPUCCHGroup) {
		this.diffNumerologyAcrossPUCCHGroup = diffNumerologyAcrossPUCCHGroup;
	}

	public BerEnum getDiffNumerologyAcrossPUCCHGroup() {
		return diffNumerologyAcrossPUCCHGroup;
	}

	public void setDiffNumerologyWithinPUCCHGroup(BerEnum diffNumerologyWithinPUCCHGroup) {
		this.diffNumerologyWithinPUCCHGroup = diffNumerologyWithinPUCCHGroup;
	}

	public BerEnum getDiffNumerologyWithinPUCCHGroup() {
		return diffNumerologyWithinPUCCHGroup;
	}

	public void setSupportedNumberTAG(BerEnum supportedNumberTAG) {
		this.supportedNumberTAG = supportedNumberTAG;
	}

	public BerEnum getSupportedNumberTAG() {
		return supportedNumberTAG;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (supportedNumberTAG != null) {
			codeLength += supportedNumberTAG.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (diffNumerologyWithinPUCCHGroup != null) {
			codeLength += diffNumerologyWithinPUCCHGroup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (diffNumerologyAcrossPUCCHGroup != null) {
			codeLength += diffNumerologyAcrossPUCCHGroup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (simultaneousRxTxSUL != null) {
			codeLength += simultaneousRxTxSUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (simultaneousRxTxInterBandCA != null) {
			codeLength += simultaneousRxTxInterBandCA.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (parallelTxPRACHSRSPUCCHPUSCH != null) {
			codeLength += parallelTxPRACHSRSPUCCHPUSCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (parallelTxSRSPUCCHPUSCH != null) {
			codeLength += parallelTxSRSPUCCHPUSCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		if (multipleTimingAdvances != null) {
			codeLength += multipleTimingAdvances.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			multipleTimingAdvances = new BerEnum();
			subCodeLength += multipleTimingAdvances.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			parallelTxSRSPUCCHPUSCH = new BerEnum();
			subCodeLength += parallelTxSRSPUCCHPUSCH.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			parallelTxPRACHSRSPUCCHPUSCH = new BerEnum();
			subCodeLength += parallelTxPRACHSRSPUCCHPUSCH.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			simultaneousRxTxInterBandCA = new BerEnum();
			subCodeLength += simultaneousRxTxInterBandCA.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			simultaneousRxTxSUL = new BerEnum();
			subCodeLength += simultaneousRxTxSUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			diffNumerologyAcrossPUCCHGroup = new BerEnum();
			subCodeLength += diffNumerologyAcrossPUCCHGroup.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			diffNumerologyWithinPUCCHGroup = new BerEnum();
			subCodeLength += diffNumerologyWithinPUCCHGroup.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			supportedNumberTAG = new BerEnum();
			subCodeLength += supportedNumberTAG.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (multipleTimingAdvances != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("multipleTimingAdvances: ").append(multipleTimingAdvances);
			firstSelectedElement = false;
		}
		
		if (parallelTxSRSPUCCHPUSCH != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("parallelTxSRSPUCCHPUSCH: ").append(parallelTxSRSPUCCHPUSCH);
			firstSelectedElement = false;
		}
		
		if (parallelTxPRACHSRSPUCCHPUSCH != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("parallelTxPRACHSRSPUCCHPUSCH: ").append(parallelTxPRACHSRSPUCCHPUSCH);
			firstSelectedElement = false;
		}
		
		if (simultaneousRxTxInterBandCA != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("simultaneousRxTxInterBandCA: ").append(simultaneousRxTxInterBandCA);
			firstSelectedElement = false;
		}
		
		if (simultaneousRxTxSUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("simultaneousRxTxSUL: ").append(simultaneousRxTxSUL);
			firstSelectedElement = false;
		}
		
		if (diffNumerologyAcrossPUCCHGroup != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("diffNumerologyAcrossPUCCHGroup: ").append(diffNumerologyAcrossPUCCHGroup);
			firstSelectedElement = false;
		}
		
		if (diffNumerologyWithinPUCCHGroup != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("diffNumerologyWithinPUCCHGroup: ").append(diffNumerologyWithinPUCCHGroup);
			firstSelectedElement = false;
		}
		
		if (supportedNumberTAG != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supportedNumberTAG: ").append(supportedNumberTAG);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

