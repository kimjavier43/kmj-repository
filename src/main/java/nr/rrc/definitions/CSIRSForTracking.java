/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CSIRSForTracking implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger burstLength = null;
	private BerInteger maxSimultaneousResourceSetsPerCC = null;
	private BerInteger maxConfiguredResourceSetsPerCC = null;
	private BerInteger maxConfiguredResourceSetsAllCC = null;
	
	public CSIRSForTracking() {
	}

	public CSIRSForTracking(byte[] code) {
		this.code = code;
	}

	public void setBurstLength(BerInteger burstLength) {
		this.burstLength = burstLength;
	}

	public BerInteger getBurstLength() {
		return burstLength;
	}

	public void setMaxSimultaneousResourceSetsPerCC(BerInteger maxSimultaneousResourceSetsPerCC) {
		this.maxSimultaneousResourceSetsPerCC = maxSimultaneousResourceSetsPerCC;
	}

	public BerInteger getMaxSimultaneousResourceSetsPerCC() {
		return maxSimultaneousResourceSetsPerCC;
	}

	public void setMaxConfiguredResourceSetsPerCC(BerInteger maxConfiguredResourceSetsPerCC) {
		this.maxConfiguredResourceSetsPerCC = maxConfiguredResourceSetsPerCC;
	}

	public BerInteger getMaxConfiguredResourceSetsPerCC() {
		return maxConfiguredResourceSetsPerCC;
	}

	public void setMaxConfiguredResourceSetsAllCC(BerInteger maxConfiguredResourceSetsAllCC) {
		this.maxConfiguredResourceSetsAllCC = maxConfiguredResourceSetsAllCC;
	}

	public BerInteger getMaxConfiguredResourceSetsAllCC() {
		return maxConfiguredResourceSetsAllCC;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += maxConfiguredResourceSetsAllCC.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += maxConfiguredResourceSetsPerCC.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += maxSimultaneousResourceSetsPerCC.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += burstLength.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			burstLength = new BerInteger();
			subCodeLength += burstLength.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			maxSimultaneousResourceSetsPerCC = new BerInteger();
			subCodeLength += maxSimultaneousResourceSetsPerCC.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			maxConfiguredResourceSetsPerCC = new BerInteger();
			subCodeLength += maxConfiguredResourceSetsPerCC.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			maxConfiguredResourceSetsAllCC = new BerInteger();
			subCodeLength += maxConfiguredResourceSetsAllCC.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (burstLength != null) {
			sb.append("burstLength: ").append(burstLength);
		}
		else {
			sb.append("burstLength: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxSimultaneousResourceSetsPerCC != null) {
			sb.append("maxSimultaneousResourceSetsPerCC: ").append(maxSimultaneousResourceSetsPerCC);
		}
		else {
			sb.append("maxSimultaneousResourceSetsPerCC: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxConfiguredResourceSetsPerCC != null) {
			sb.append("maxConfiguredResourceSetsPerCC: ").append(maxConfiguredResourceSetsPerCC);
		}
		else {
			sb.append("maxConfiguredResourceSetsPerCC: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxConfiguredResourceSetsAllCC != null) {
			sb.append("maxConfiguredResourceSetsAllCC: ").append(maxConfiguredResourceSetsAllCC);
		}
		else {
			sb.append("maxConfiguredResourceSetsAllCC: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

