/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PUCCHPowerControl implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class P0Set implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<P0PUCCH> seqOf = null;

		public P0Set() {
			seqOf = new ArrayList<P0PUCCH>();
		}

		public P0Set(byte[] code) {
			this.code = code;
		}

		public List<P0PUCCH> getP0PUCCH() {
			if (seqOf == null) {
				seqOf = new ArrayList<P0PUCCH>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				P0PUCCH element = new P0PUCCH();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<P0PUCCH> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PathlossReferenceRSs implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<PUCCHPathlossReferenceRS> seqOf = null;

		public PathlossReferenceRSs() {
			seqOf = new ArrayList<PUCCHPathlossReferenceRS>();
		}

		public PathlossReferenceRSs(byte[] code) {
			this.code = code;
		}

		public List<PUCCHPathlossReferenceRS> getPUCCHPathlossReferenceRS() {
			if (seqOf == null) {
				seqOf = new ArrayList<PUCCHPathlossReferenceRS>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				PUCCHPathlossReferenceRS element = new PUCCHPathlossReferenceRS();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<PUCCHPathlossReferenceRS> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger deltaFPUCCHF0 = null;
	private BerInteger deltaFPUCCHF1 = null;
	private BerInteger deltaFPUCCHF2 = null;
	private BerInteger deltaFPUCCHF3 = null;
	private BerInteger deltaFPUCCHF4 = null;
	private P0Set p0Set = null;
	private PathlossReferenceRSs pathlossReferenceRSs = null;
	private BerEnum twoPUCCHPCAdjustmentStates = null;
	
	public PUCCHPowerControl() {
	}

	public PUCCHPowerControl(byte[] code) {
		this.code = code;
	}

	public void setDeltaFPUCCHF0(BerInteger deltaFPUCCHF0) {
		this.deltaFPUCCHF0 = deltaFPUCCHF0;
	}

	public BerInteger getDeltaFPUCCHF0() {
		return deltaFPUCCHF0;
	}

	public void setDeltaFPUCCHF1(BerInteger deltaFPUCCHF1) {
		this.deltaFPUCCHF1 = deltaFPUCCHF1;
	}

	public BerInteger getDeltaFPUCCHF1() {
		return deltaFPUCCHF1;
	}

	public void setDeltaFPUCCHF2(BerInteger deltaFPUCCHF2) {
		this.deltaFPUCCHF2 = deltaFPUCCHF2;
	}

	public BerInteger getDeltaFPUCCHF2() {
		return deltaFPUCCHF2;
	}

	public void setDeltaFPUCCHF3(BerInteger deltaFPUCCHF3) {
		this.deltaFPUCCHF3 = deltaFPUCCHF3;
	}

	public BerInteger getDeltaFPUCCHF3() {
		return deltaFPUCCHF3;
	}

	public void setDeltaFPUCCHF4(BerInteger deltaFPUCCHF4) {
		this.deltaFPUCCHF4 = deltaFPUCCHF4;
	}

	public BerInteger getDeltaFPUCCHF4() {
		return deltaFPUCCHF4;
	}

	public void setP0Set(P0Set p0Set) {
		this.p0Set = p0Set;
	}

	public P0Set getP0Set() {
		return p0Set;
	}

	public void setPathlossReferenceRSs(PathlossReferenceRSs pathlossReferenceRSs) {
		this.pathlossReferenceRSs = pathlossReferenceRSs;
	}

	public PathlossReferenceRSs getPathlossReferenceRSs() {
		return pathlossReferenceRSs;
	}

	public void setTwoPUCCHPCAdjustmentStates(BerEnum twoPUCCHPCAdjustmentStates) {
		this.twoPUCCHPCAdjustmentStates = twoPUCCHPCAdjustmentStates;
	}

	public BerEnum getTwoPUCCHPCAdjustmentStates() {
		return twoPUCCHPCAdjustmentStates;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (twoPUCCHPCAdjustmentStates != null) {
			codeLength += twoPUCCHPCAdjustmentStates.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (pathlossReferenceRSs != null) {
			codeLength += pathlossReferenceRSs.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (p0Set != null) {
			codeLength += p0Set.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (deltaFPUCCHF4 != null) {
			codeLength += deltaFPUCCHF4.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (deltaFPUCCHF3 != null) {
			codeLength += deltaFPUCCHF3.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (deltaFPUCCHF2 != null) {
			codeLength += deltaFPUCCHF2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (deltaFPUCCHF1 != null) {
			codeLength += deltaFPUCCHF1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		if (deltaFPUCCHF0 != null) {
			codeLength += deltaFPUCCHF0.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			deltaFPUCCHF0 = new BerInteger();
			subCodeLength += deltaFPUCCHF0.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			deltaFPUCCHF1 = new BerInteger();
			subCodeLength += deltaFPUCCHF1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			deltaFPUCCHF2 = new BerInteger();
			subCodeLength += deltaFPUCCHF2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			deltaFPUCCHF3 = new BerInteger();
			subCodeLength += deltaFPUCCHF3.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			deltaFPUCCHF4 = new BerInteger();
			subCodeLength += deltaFPUCCHF4.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			p0Set = new P0Set();
			subCodeLength += p0Set.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			pathlossReferenceRSs = new PathlossReferenceRSs();
			subCodeLength += pathlossReferenceRSs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			twoPUCCHPCAdjustmentStates = new BerEnum();
			subCodeLength += twoPUCCHPCAdjustmentStates.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (deltaFPUCCHF0 != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("deltaFPUCCHF0: ").append(deltaFPUCCHF0);
			firstSelectedElement = false;
		}
		
		if (deltaFPUCCHF1 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("deltaFPUCCHF1: ").append(deltaFPUCCHF1);
			firstSelectedElement = false;
		}
		
		if (deltaFPUCCHF2 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("deltaFPUCCHF2: ").append(deltaFPUCCHF2);
			firstSelectedElement = false;
		}
		
		if (deltaFPUCCHF3 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("deltaFPUCCHF3: ").append(deltaFPUCCHF3);
			firstSelectedElement = false;
		}
		
		if (deltaFPUCCHF4 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("deltaFPUCCHF4: ").append(deltaFPUCCHF4);
			firstSelectedElement = false;
		}
		
		if (p0Set != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("p0Set: ");
			p0Set.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (pathlossReferenceRSs != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pathlossReferenceRSs: ");
			pathlossReferenceRSs.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (twoPUCCHPCAdjustmentStates != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("twoPUCCHPCAdjustmentStates: ").append(twoPUCCHPCAdjustmentStates);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

