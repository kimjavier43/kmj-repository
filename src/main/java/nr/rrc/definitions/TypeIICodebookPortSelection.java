/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class TypeIICodebookPortSelection implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum maxNumberTxPortsPerResource = null;
	private BerInteger maxNumberResources = null;
	private BerInteger totalNumberTxPorts = null;
	private BerInteger parameterLx = null;
	private BerEnum amplitudeScalingType = null;
	private BerInteger maxNumberCSIRSPerResourceSet = null;
	
	public TypeIICodebookPortSelection() {
	}

	public TypeIICodebookPortSelection(byte[] code) {
		this.code = code;
	}

	public void setMaxNumberTxPortsPerResource(BerEnum maxNumberTxPortsPerResource) {
		this.maxNumberTxPortsPerResource = maxNumberTxPortsPerResource;
	}

	public BerEnum getMaxNumberTxPortsPerResource() {
		return maxNumberTxPortsPerResource;
	}

	public void setMaxNumberResources(BerInteger maxNumberResources) {
		this.maxNumberResources = maxNumberResources;
	}

	public BerInteger getMaxNumberResources() {
		return maxNumberResources;
	}

	public void setTotalNumberTxPorts(BerInteger totalNumberTxPorts) {
		this.totalNumberTxPorts = totalNumberTxPorts;
	}

	public BerInteger getTotalNumberTxPorts() {
		return totalNumberTxPorts;
	}

	public void setParameterLx(BerInteger parameterLx) {
		this.parameterLx = parameterLx;
	}

	public BerInteger getParameterLx() {
		return parameterLx;
	}

	public void setAmplitudeScalingType(BerEnum amplitudeScalingType) {
		this.amplitudeScalingType = amplitudeScalingType;
	}

	public BerEnum getAmplitudeScalingType() {
		return amplitudeScalingType;
	}

	public void setMaxNumberCSIRSPerResourceSet(BerInteger maxNumberCSIRSPerResourceSet) {
		this.maxNumberCSIRSPerResourceSet = maxNumberCSIRSPerResourceSet;
	}

	public BerInteger getMaxNumberCSIRSPerResourceSet() {
		return maxNumberCSIRSPerResourceSet;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += maxNumberCSIRSPerResourceSet.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += amplitudeScalingType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += parameterLx.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += totalNumberTxPorts.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += maxNumberResources.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += maxNumberTxPortsPerResource.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			maxNumberTxPortsPerResource = new BerEnum();
			subCodeLength += maxNumberTxPortsPerResource.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			maxNumberResources = new BerInteger();
			subCodeLength += maxNumberResources.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			totalNumberTxPorts = new BerInteger();
			subCodeLength += totalNumberTxPorts.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			parameterLx = new BerInteger();
			subCodeLength += parameterLx.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			amplitudeScalingType = new BerEnum();
			subCodeLength += amplitudeScalingType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			maxNumberCSIRSPerResourceSet = new BerInteger();
			subCodeLength += maxNumberCSIRSPerResourceSet.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberTxPortsPerResource != null) {
			sb.append("maxNumberTxPortsPerResource: ").append(maxNumberTxPortsPerResource);
		}
		else {
			sb.append("maxNumberTxPortsPerResource: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberResources != null) {
			sb.append("maxNumberResources: ").append(maxNumberResources);
		}
		else {
			sb.append("maxNumberResources: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (totalNumberTxPorts != null) {
			sb.append("totalNumberTxPorts: ").append(totalNumberTxPorts);
		}
		else {
			sb.append("totalNumberTxPorts: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (parameterLx != null) {
			sb.append("parameterLx: ").append(parameterLx);
		}
		else {
			sb.append("parameterLx: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (amplitudeScalingType != null) {
			sb.append("amplitudeScalingType: ").append(amplitudeScalingType);
		}
		else {
			sb.append("amplitudeScalingType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberCSIRSPerResourceSet != null) {
			sb.append("maxNumberCSIRSPerResourceSet: ").append(maxNumberCSIRSPerResourceSet);
		}
		else {
			sb.append("maxNumberCSIRSPerResourceSet: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

