/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class NZPCSIRSResource implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private NZPCSIRSResourceId nzpCSIRSResourceId = null;
	private CSIRSResourceMapping resourceMapping = null;
	private BerInteger powerControlOffset = null;
	private BerEnum powerControlOffsetSS = null;
	private ScramblingId scramblingID = null;
	private CSIResourcePeriodicityAndOffset periodicityAndOffset = null;
	private TCIStateId qclInfoPeriodicCSIRS = null;
	
	public NZPCSIRSResource() {
	}

	public NZPCSIRSResource(byte[] code) {
		this.code = code;
	}

	public void setNzpCSIRSResourceId(NZPCSIRSResourceId nzpCSIRSResourceId) {
		this.nzpCSIRSResourceId = nzpCSIRSResourceId;
	}

	public NZPCSIRSResourceId getNzpCSIRSResourceId() {
		return nzpCSIRSResourceId;
	}

	public void setResourceMapping(CSIRSResourceMapping resourceMapping) {
		this.resourceMapping = resourceMapping;
	}

	public CSIRSResourceMapping getResourceMapping() {
		return resourceMapping;
	}

	public void setPowerControlOffset(BerInteger powerControlOffset) {
		this.powerControlOffset = powerControlOffset;
	}

	public BerInteger getPowerControlOffset() {
		return powerControlOffset;
	}

	public void setPowerControlOffsetSS(BerEnum powerControlOffsetSS) {
		this.powerControlOffsetSS = powerControlOffsetSS;
	}

	public BerEnum getPowerControlOffsetSS() {
		return powerControlOffsetSS;
	}

	public void setScramblingID(ScramblingId scramblingID) {
		this.scramblingID = scramblingID;
	}

	public ScramblingId getScramblingID() {
		return scramblingID;
	}

	public void setPeriodicityAndOffset(CSIResourcePeriodicityAndOffset periodicityAndOffset) {
		this.periodicityAndOffset = periodicityAndOffset;
	}

	public CSIResourcePeriodicityAndOffset getPeriodicityAndOffset() {
		return periodicityAndOffset;
	}

	public void setQclInfoPeriodicCSIRS(TCIStateId qclInfoPeriodicCSIRS) {
		this.qclInfoPeriodicCSIRS = qclInfoPeriodicCSIRS;
	}

	public TCIStateId getQclInfoPeriodicCSIRS() {
		return qclInfoPeriodicCSIRS;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (qclInfoPeriodicCSIRS != null) {
			codeLength += qclInfoPeriodicCSIRS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (periodicityAndOffset != null) {
			sublength = periodicityAndOffset.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		codeLength += scramblingID.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		if (powerControlOffsetSS != null) {
			codeLength += powerControlOffsetSS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		codeLength += powerControlOffset.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += resourceMapping.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		codeLength += nzpCSIRSResourceId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			nzpCSIRSResourceId = new NZPCSIRSResourceId();
			subCodeLength += nzpCSIRSResourceId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			resourceMapping = new CSIRSResourceMapping();
			subCodeLength += resourceMapping.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			powerControlOffset = new BerInteger();
			subCodeLength += powerControlOffset.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			powerControlOffsetSS = new BerEnum();
			subCodeLength += powerControlOffsetSS.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			scramblingID = new ScramblingId();
			subCodeLength += scramblingID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			subCodeLength += length.decode(is);
			periodicityAndOffset = new CSIResourcePeriodicityAndOffset();
			subCodeLength += periodicityAndOffset.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			qclInfoPeriodicCSIRS = new TCIStateId();
			subCodeLength += qclInfoPeriodicCSIRS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nzpCSIRSResourceId != null) {
			sb.append("nzpCSIRSResourceId: ").append(nzpCSIRSResourceId);
		}
		else {
			sb.append("nzpCSIRSResourceId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (resourceMapping != null) {
			sb.append("resourceMapping: ");
			resourceMapping.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("resourceMapping: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (powerControlOffset != null) {
			sb.append("powerControlOffset: ").append(powerControlOffset);
		}
		else {
			sb.append("powerControlOffset: <empty-required-field>");
		}
		
		if (powerControlOffsetSS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("powerControlOffsetSS: ").append(powerControlOffsetSS);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (scramblingID != null) {
			sb.append("scramblingID: ").append(scramblingID);
		}
		else {
			sb.append("scramblingID: <empty-required-field>");
		}
		
		if (periodicityAndOffset != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("periodicityAndOffset: ");
			periodicityAndOffset.appendAsString(sb, indentLevel + 1);
		}
		
		if (qclInfoPeriodicCSIRS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qclInfoPeriodicCSIRS: ").append(qclInfoPeriodicCSIRS);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

