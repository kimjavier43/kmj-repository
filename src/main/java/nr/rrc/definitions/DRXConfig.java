/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class DRXConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class DrxOnDurationTimer implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerInteger subMilliSeconds = null;
		private BerEnum milliSeconds = null;
		
		public DrxOnDurationTimer() {
		}

		public DrxOnDurationTimer(byte[] code) {
			this.code = code;
		}

		public void setSubMilliSeconds(BerInteger subMilliSeconds) {
			this.subMilliSeconds = subMilliSeconds;
		}

		public BerInteger getSubMilliSeconds() {
			return subMilliSeconds;
		}

		public void setMilliSeconds(BerEnum milliSeconds) {
			this.milliSeconds = milliSeconds;
		}

		public BerEnum getMilliSeconds() {
			return milliSeconds;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (milliSeconds != null) {
				codeLength += milliSeconds.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (subMilliSeconds != null) {
				codeLength += subMilliSeconds.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				subMilliSeconds = new BerInteger();
				codeLength += subMilliSeconds.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				milliSeconds = new BerEnum();
				codeLength += milliSeconds.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (subMilliSeconds != null) {
				sb.append("subMilliSeconds: ").append(subMilliSeconds);
				return;
			}

			if (milliSeconds != null) {
				sb.append("milliSeconds: ").append(milliSeconds);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class DrxLongCycleStartOffset implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerInteger ms10 = null;
		private BerInteger ms20 = null;
		private BerInteger ms32 = null;
		private BerInteger ms40 = null;
		private BerInteger ms60 = null;
		private BerInteger ms64 = null;
		private BerInteger ms70 = null;
		private BerInteger ms80 = null;
		private BerInteger ms128 = null;
		private BerInteger ms160 = null;
		private BerInteger ms256 = null;
		private BerInteger ms320 = null;
		private BerInteger ms512 = null;
		private BerInteger ms640 = null;
		private BerInteger ms1024 = null;
		private BerInteger ms1280 = null;
		private BerInteger ms2048 = null;
		private BerInteger ms2560 = null;
		private BerInteger ms5120 = null;
		private BerInteger ms10240 = null;
		
		public DrxLongCycleStartOffset() {
		}

		public DrxLongCycleStartOffset(byte[] code) {
			this.code = code;
		}

		public void setMs10(BerInteger ms10) {
			this.ms10 = ms10;
		}

		public BerInteger getMs10() {
			return ms10;
		}

		public void setMs20(BerInteger ms20) {
			this.ms20 = ms20;
		}

		public BerInteger getMs20() {
			return ms20;
		}

		public void setMs32(BerInteger ms32) {
			this.ms32 = ms32;
		}

		public BerInteger getMs32() {
			return ms32;
		}

		public void setMs40(BerInteger ms40) {
			this.ms40 = ms40;
		}

		public BerInteger getMs40() {
			return ms40;
		}

		public void setMs60(BerInteger ms60) {
			this.ms60 = ms60;
		}

		public BerInteger getMs60() {
			return ms60;
		}

		public void setMs64(BerInteger ms64) {
			this.ms64 = ms64;
		}

		public BerInteger getMs64() {
			return ms64;
		}

		public void setMs70(BerInteger ms70) {
			this.ms70 = ms70;
		}

		public BerInteger getMs70() {
			return ms70;
		}

		public void setMs80(BerInteger ms80) {
			this.ms80 = ms80;
		}

		public BerInteger getMs80() {
			return ms80;
		}

		public void setMs128(BerInteger ms128) {
			this.ms128 = ms128;
		}

		public BerInteger getMs128() {
			return ms128;
		}

		public void setMs160(BerInteger ms160) {
			this.ms160 = ms160;
		}

		public BerInteger getMs160() {
			return ms160;
		}

		public void setMs256(BerInteger ms256) {
			this.ms256 = ms256;
		}

		public BerInteger getMs256() {
			return ms256;
		}

		public void setMs320(BerInteger ms320) {
			this.ms320 = ms320;
		}

		public BerInteger getMs320() {
			return ms320;
		}

		public void setMs512(BerInteger ms512) {
			this.ms512 = ms512;
		}

		public BerInteger getMs512() {
			return ms512;
		}

		public void setMs640(BerInteger ms640) {
			this.ms640 = ms640;
		}

		public BerInteger getMs640() {
			return ms640;
		}

		public void setMs1024(BerInteger ms1024) {
			this.ms1024 = ms1024;
		}

		public BerInteger getMs1024() {
			return ms1024;
		}

		public void setMs1280(BerInteger ms1280) {
			this.ms1280 = ms1280;
		}

		public BerInteger getMs1280() {
			return ms1280;
		}

		public void setMs2048(BerInteger ms2048) {
			this.ms2048 = ms2048;
		}

		public BerInteger getMs2048() {
			return ms2048;
		}

		public void setMs2560(BerInteger ms2560) {
			this.ms2560 = ms2560;
		}

		public BerInteger getMs2560() {
			return ms2560;
		}

		public void setMs5120(BerInteger ms5120) {
			this.ms5120 = ms5120;
		}

		public BerInteger getMs5120() {
			return ms5120;
		}

		public void setMs10240(BerInteger ms10240) {
			this.ms10240 = ms10240;
		}

		public BerInteger getMs10240() {
			return ms10240;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (ms10240 != null) {
				codeLength += ms10240.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 19
				reverseOS.write(0x93);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms5120 != null) {
				codeLength += ms5120.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 18
				reverseOS.write(0x92);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms2560 != null) {
				codeLength += ms2560.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 17
				reverseOS.write(0x91);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms2048 != null) {
				codeLength += ms2048.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 16
				reverseOS.write(0x90);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms1280 != null) {
				codeLength += ms1280.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 15
				reverseOS.write(0x8F);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms1024 != null) {
				codeLength += ms1024.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 14
				reverseOS.write(0x8E);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms640 != null) {
				codeLength += ms640.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 13
				reverseOS.write(0x8D);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms512 != null) {
				codeLength += ms512.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 12
				reverseOS.write(0x8C);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms320 != null) {
				codeLength += ms320.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 11
				reverseOS.write(0x8B);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms256 != null) {
				codeLength += ms256.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 10
				reverseOS.write(0x8A);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms160 != null) {
				codeLength += ms160.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 9
				reverseOS.write(0x89);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms128 != null) {
				codeLength += ms128.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 8
				reverseOS.write(0x88);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms80 != null) {
				codeLength += ms80.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 7
				reverseOS.write(0x87);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms70 != null) {
				codeLength += ms70.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 6
				reverseOS.write(0x86);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms64 != null) {
				codeLength += ms64.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 5
				reverseOS.write(0x85);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms60 != null) {
				codeLength += ms60.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms40 != null) {
				codeLength += ms40.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms32 != null) {
				codeLength += ms32.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms20 != null) {
				codeLength += ms20.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms10 != null) {
				codeLength += ms10.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				ms10 = new BerInteger();
				codeLength += ms10.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				ms20 = new BerInteger();
				codeLength += ms20.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				ms32 = new BerInteger();
				codeLength += ms32.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				ms40 = new BerInteger();
				codeLength += ms40.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				ms60 = new BerInteger();
				codeLength += ms60.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				ms64 = new BerInteger();
				codeLength += ms64.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				ms70 = new BerInteger();
				codeLength += ms70.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				ms80 = new BerInteger();
				codeLength += ms80.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				ms128 = new BerInteger();
				codeLength += ms128.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				ms160 = new BerInteger();
				codeLength += ms160.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
				ms256 = new BerInteger();
				codeLength += ms256.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				ms320 = new BerInteger();
				codeLength += ms320.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
				ms512 = new BerInteger();
				codeLength += ms512.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
				ms640 = new BerInteger();
				codeLength += ms640.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
				ms1024 = new BerInteger();
				codeLength += ms1024.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
				ms1280 = new BerInteger();
				codeLength += ms1280.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
				ms2048 = new BerInteger();
				codeLength += ms2048.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
				ms2560 = new BerInteger();
				codeLength += ms2560.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
				ms5120 = new BerInteger();
				codeLength += ms5120.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
				ms10240 = new BerInteger();
				codeLength += ms10240.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (ms10 != null) {
				sb.append("ms10: ").append(ms10);
				return;
			}

			if (ms20 != null) {
				sb.append("ms20: ").append(ms20);
				return;
			}

			if (ms32 != null) {
				sb.append("ms32: ").append(ms32);
				return;
			}

			if (ms40 != null) {
				sb.append("ms40: ").append(ms40);
				return;
			}

			if (ms60 != null) {
				sb.append("ms60: ").append(ms60);
				return;
			}

			if (ms64 != null) {
				sb.append("ms64: ").append(ms64);
				return;
			}

			if (ms70 != null) {
				sb.append("ms70: ").append(ms70);
				return;
			}

			if (ms80 != null) {
				sb.append("ms80: ").append(ms80);
				return;
			}

			if (ms128 != null) {
				sb.append("ms128: ").append(ms128);
				return;
			}

			if (ms160 != null) {
				sb.append("ms160: ").append(ms160);
				return;
			}

			if (ms256 != null) {
				sb.append("ms256: ").append(ms256);
				return;
			}

			if (ms320 != null) {
				sb.append("ms320: ").append(ms320);
				return;
			}

			if (ms512 != null) {
				sb.append("ms512: ").append(ms512);
				return;
			}

			if (ms640 != null) {
				sb.append("ms640: ").append(ms640);
				return;
			}

			if (ms1024 != null) {
				sb.append("ms1024: ").append(ms1024);
				return;
			}

			if (ms1280 != null) {
				sb.append("ms1280: ").append(ms1280);
				return;
			}

			if (ms2048 != null) {
				sb.append("ms2048: ").append(ms2048);
				return;
			}

			if (ms2560 != null) {
				sb.append("ms2560: ").append(ms2560);
				return;
			}

			if (ms5120 != null) {
				sb.append("ms5120: ").append(ms5120);
				return;
			}

			if (ms10240 != null) {
				sb.append("ms10240: ").append(ms10240);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class ShortDRX implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum drxShortCycle = null;
		private BerInteger drxShortCycleTimer = null;
		
		public ShortDRX() {
		}

		public ShortDRX(byte[] code) {
			this.code = code;
		}

		public void setDrxShortCycle(BerEnum drxShortCycle) {
			this.drxShortCycle = drxShortCycle;
		}

		public BerEnum getDrxShortCycle() {
			return drxShortCycle;
		}

		public void setDrxShortCycleTimer(BerInteger drxShortCycleTimer) {
			this.drxShortCycleTimer = drxShortCycleTimer;
		}

		public BerInteger getDrxShortCycleTimer() {
			return drxShortCycleTimer;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += drxShortCycleTimer.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += drxShortCycle.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				drxShortCycle = new BerEnum();
				subCodeLength += drxShortCycle.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				drxShortCycleTimer = new BerInteger();
				subCodeLength += drxShortCycleTimer.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (drxShortCycle != null) {
				sb.append("drxShortCycle: ").append(drxShortCycle);
			}
			else {
				sb.append("drxShortCycle: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (drxShortCycleTimer != null) {
				sb.append("drxShortCycleTimer: ").append(drxShortCycleTimer);
			}
			else {
				sb.append("drxShortCycleTimer: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private DrxOnDurationTimer drxOnDurationTimer = null;
	private BerEnum drxInactivityTimer = null;
	private BerInteger drxHARQRTTTimerDL = null;
	private BerInteger drxHARQRTTTimerUL = null;
	private BerEnum drxRetransmissionTimerDL = null;
	private BerEnum drxRetransmissionTimerUL = null;
	private DrxLongCycleStartOffset drxLongCycleStartOffset = null;
	private ShortDRX shortDRX = null;
	private BerInteger drxSlotOffset = null;
	
	public DRXConfig() {
	}

	public DRXConfig(byte[] code) {
		this.code = code;
	}

	public void setDrxOnDurationTimer(DrxOnDurationTimer drxOnDurationTimer) {
		this.drxOnDurationTimer = drxOnDurationTimer;
	}

	public DrxOnDurationTimer getDrxOnDurationTimer() {
		return drxOnDurationTimer;
	}

	public void setDrxInactivityTimer(BerEnum drxInactivityTimer) {
		this.drxInactivityTimer = drxInactivityTimer;
	}

	public BerEnum getDrxInactivityTimer() {
		return drxInactivityTimer;
	}

	public void setDrxHARQRTTTimerDL(BerInteger drxHARQRTTTimerDL) {
		this.drxHARQRTTTimerDL = drxHARQRTTTimerDL;
	}

	public BerInteger getDrxHARQRTTTimerDL() {
		return drxHARQRTTTimerDL;
	}

	public void setDrxHARQRTTTimerUL(BerInteger drxHARQRTTTimerUL) {
		this.drxHARQRTTTimerUL = drxHARQRTTTimerUL;
	}

	public BerInteger getDrxHARQRTTTimerUL() {
		return drxHARQRTTTimerUL;
	}

	public void setDrxRetransmissionTimerDL(BerEnum drxRetransmissionTimerDL) {
		this.drxRetransmissionTimerDL = drxRetransmissionTimerDL;
	}

	public BerEnum getDrxRetransmissionTimerDL() {
		return drxRetransmissionTimerDL;
	}

	public void setDrxRetransmissionTimerUL(BerEnum drxRetransmissionTimerUL) {
		this.drxRetransmissionTimerUL = drxRetransmissionTimerUL;
	}

	public BerEnum getDrxRetransmissionTimerUL() {
		return drxRetransmissionTimerUL;
	}

	public void setDrxLongCycleStartOffset(DrxLongCycleStartOffset drxLongCycleStartOffset) {
		this.drxLongCycleStartOffset = drxLongCycleStartOffset;
	}

	public DrxLongCycleStartOffset getDrxLongCycleStartOffset() {
		return drxLongCycleStartOffset;
	}

	public void setShortDRX(ShortDRX shortDRX) {
		this.shortDRX = shortDRX;
	}

	public ShortDRX getShortDRX() {
		return shortDRX;
	}

	public void setDrxSlotOffset(BerInteger drxSlotOffset) {
		this.drxSlotOffset = drxSlotOffset;
	}

	public BerInteger getDrxSlotOffset() {
		return drxSlotOffset;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		codeLength += drxSlotOffset.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		reverseOS.write(0x88);
		codeLength += 1;
		
		if (shortDRX != null) {
			codeLength += shortDRX.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		sublength = drxLongCycleStartOffset.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
		reverseOS.write(0xA6);
		codeLength += 1;
		
		codeLength += drxRetransmissionTimerUL.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += drxRetransmissionTimerDL.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += drxHARQRTTTimerUL.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += drxHARQRTTTimerDL.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += drxInactivityTimer.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		sublength = drxOnDurationTimer.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			subCodeLength += length.decode(is);
			drxOnDurationTimer = new DrxOnDurationTimer();
			subCodeLength += drxOnDurationTimer.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			drxInactivityTimer = new BerEnum();
			subCodeLength += drxInactivityTimer.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			drxHARQRTTTimerDL = new BerInteger();
			subCodeLength += drxHARQRTTTimerDL.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			drxHARQRTTTimerUL = new BerInteger();
			subCodeLength += drxHARQRTTTimerUL.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			drxRetransmissionTimerDL = new BerEnum();
			subCodeLength += drxRetransmissionTimerDL.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			drxRetransmissionTimerUL = new BerEnum();
			subCodeLength += drxRetransmissionTimerUL.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			subCodeLength += length.decode(is);
			drxLongCycleStartOffset = new DrxLongCycleStartOffset();
			subCodeLength += drxLongCycleStartOffset.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			shortDRX = new ShortDRX();
			subCodeLength += shortDRX.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			drxSlotOffset = new BerInteger();
			subCodeLength += drxSlotOffset.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (drxOnDurationTimer != null) {
			sb.append("drxOnDurationTimer: ");
			drxOnDurationTimer.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("drxOnDurationTimer: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (drxInactivityTimer != null) {
			sb.append("drxInactivityTimer: ").append(drxInactivityTimer);
		}
		else {
			sb.append("drxInactivityTimer: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (drxHARQRTTTimerDL != null) {
			sb.append("drxHARQRTTTimerDL: ").append(drxHARQRTTTimerDL);
		}
		else {
			sb.append("drxHARQRTTTimerDL: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (drxHARQRTTTimerUL != null) {
			sb.append("drxHARQRTTTimerUL: ").append(drxHARQRTTTimerUL);
		}
		else {
			sb.append("drxHARQRTTTimerUL: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (drxRetransmissionTimerDL != null) {
			sb.append("drxRetransmissionTimerDL: ").append(drxRetransmissionTimerDL);
		}
		else {
			sb.append("drxRetransmissionTimerDL: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (drxRetransmissionTimerUL != null) {
			sb.append("drxRetransmissionTimerUL: ").append(drxRetransmissionTimerUL);
		}
		else {
			sb.append("drxRetransmissionTimerUL: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (drxLongCycleStartOffset != null) {
			sb.append("drxLongCycleStartOffset: ");
			drxLongCycleStartOffset.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("drxLongCycleStartOffset: <empty-required-field>");
		}
		
		if (shortDRX != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("shortDRX: ");
			shortDRX.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (drxSlotOffset != null) {
			sb.append("drxSlotOffset: ").append(drxSlotOffset);
		}
		else {
			sb.append("drxSlotOffset: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

