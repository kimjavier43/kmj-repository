/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CSIRSResourceMobility implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SlotConfig implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerInteger ms4 = null;
		private BerInteger ms5 = null;
		private BerInteger ms10 = null;
		private BerInteger ms20 = null;
		private BerInteger ms40 = null;
		
		public SlotConfig() {
		}

		public SlotConfig(byte[] code) {
			this.code = code;
		}

		public void setMs4(BerInteger ms4) {
			this.ms4 = ms4;
		}

		public BerInteger getMs4() {
			return ms4;
		}

		public void setMs5(BerInteger ms5) {
			this.ms5 = ms5;
		}

		public BerInteger getMs5() {
			return ms5;
		}

		public void setMs10(BerInteger ms10) {
			this.ms10 = ms10;
		}

		public BerInteger getMs10() {
			return ms10;
		}

		public void setMs20(BerInteger ms20) {
			this.ms20 = ms20;
		}

		public BerInteger getMs20() {
			return ms20;
		}

		public void setMs40(BerInteger ms40) {
			this.ms40 = ms40;
		}

		public BerInteger getMs40() {
			return ms40;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (ms40 != null) {
				codeLength += ms40.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms20 != null) {
				codeLength += ms20.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms10 != null) {
				codeLength += ms10.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms5 != null) {
				codeLength += ms5.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (ms4 != null) {
				codeLength += ms4.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				ms4 = new BerInteger();
				codeLength += ms4.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				ms5 = new BerInteger();
				codeLength += ms5.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				ms10 = new BerInteger();
				codeLength += ms10.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				ms20 = new BerInteger();
				codeLength += ms20.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				ms40 = new BerInteger();
				codeLength += ms40.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (ms4 != null) {
				sb.append("ms4: ").append(ms4);
				return;
			}

			if (ms5 != null) {
				sb.append("ms5: ").append(ms5);
				return;
			}

			if (ms10 != null) {
				sb.append("ms10: ").append(ms10);
				return;
			}

			if (ms20 != null) {
				sb.append("ms20: ").append(ms20);
				return;
			}

			if (ms40 != null) {
				sb.append("ms40: ").append(ms40);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class AssociatedSSB implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private SSBIndex ssbIndex = null;
		private BerBoolean isQuasiColocated = null;
		
		public AssociatedSSB() {
		}

		public AssociatedSSB(byte[] code) {
			this.code = code;
		}

		public void setSsbIndex(SSBIndex ssbIndex) {
			this.ssbIndex = ssbIndex;
		}

		public SSBIndex getSsbIndex() {
			return ssbIndex;
		}

		public void setIsQuasiColocated(BerBoolean isQuasiColocated) {
			this.isQuasiColocated = isQuasiColocated;
		}

		public BerBoolean getIsQuasiColocated() {
			return isQuasiColocated;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += isQuasiColocated.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += ssbIndex.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				ssbIndex = new SSBIndex();
				subCodeLength += ssbIndex.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				isQuasiColocated = new BerBoolean();
				subCodeLength += isQuasiColocated.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (ssbIndex != null) {
				sb.append("ssbIndex: ").append(ssbIndex);
			}
			else {
				sb.append("ssbIndex: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (isQuasiColocated != null) {
				sb.append("isQuasiColocated: ").append(isQuasiColocated);
			}
			else {
				sb.append("isQuasiColocated: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class FrequencyDomainAllocation implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerBitString row1 = null;
		private BerBitString row2 = null;
		
		public FrequencyDomainAllocation() {
		}

		public FrequencyDomainAllocation(byte[] code) {
			this.code = code;
		}

		public void setRow1(BerBitString row1) {
			this.row1 = row1;
		}

		public BerBitString getRow1() {
			return row1;
		}

		public void setRow2(BerBitString row2) {
			this.row2 = row2;
		}

		public BerBitString getRow2() {
			return row2;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (row2 != null) {
				codeLength += row2.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (row1 != null) {
				codeLength += row1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				row1 = new BerBitString();
				codeLength += row1.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				row2 = new BerBitString();
				codeLength += row2.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (row1 != null) {
				sb.append("row1: ").append(row1);
				return;
			}

			if (row2 != null) {
				sb.append("row2: ").append(row2);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private CSIRSIndex csiRSIndex = null;
	private SlotConfig slotConfig = null;
	private AssociatedSSB associatedSSB = null;
	private FrequencyDomainAllocation frequencyDomainAllocation = null;
	private BerInteger firstOFDMSymbolInTimeDomain = null;
	private BerInteger sequenceGenerationConfig = null;
	
	public CSIRSResourceMobility() {
	}

	public CSIRSResourceMobility(byte[] code) {
		this.code = code;
	}

	public void setCsiRSIndex(CSIRSIndex csiRSIndex) {
		this.csiRSIndex = csiRSIndex;
	}

	public CSIRSIndex getCsiRSIndex() {
		return csiRSIndex;
	}

	public void setSlotConfig(SlotConfig slotConfig) {
		this.slotConfig = slotConfig;
	}

	public SlotConfig getSlotConfig() {
		return slotConfig;
	}

	public void setAssociatedSSB(AssociatedSSB associatedSSB) {
		this.associatedSSB = associatedSSB;
	}

	public AssociatedSSB getAssociatedSSB() {
		return associatedSSB;
	}

	public void setFrequencyDomainAllocation(FrequencyDomainAllocation frequencyDomainAllocation) {
		this.frequencyDomainAllocation = frequencyDomainAllocation;
	}

	public FrequencyDomainAllocation getFrequencyDomainAllocation() {
		return frequencyDomainAllocation;
	}

	public void setFirstOFDMSymbolInTimeDomain(BerInteger firstOFDMSymbolInTimeDomain) {
		this.firstOFDMSymbolInTimeDomain = firstOFDMSymbolInTimeDomain;
	}

	public BerInteger getFirstOFDMSymbolInTimeDomain() {
		return firstOFDMSymbolInTimeDomain;
	}

	public void setSequenceGenerationConfig(BerInteger sequenceGenerationConfig) {
		this.sequenceGenerationConfig = sequenceGenerationConfig;
	}

	public BerInteger getSequenceGenerationConfig() {
		return sequenceGenerationConfig;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		codeLength += sequenceGenerationConfig.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += firstOFDMSymbolInTimeDomain.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		sublength = frequencyDomainAllocation.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
		reverseOS.write(0xA3);
		codeLength += 1;
		
		if (associatedSSB != null) {
			codeLength += associatedSSB.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		sublength = slotConfig.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		codeLength += csiRSIndex.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			csiRSIndex = new CSIRSIndex();
			subCodeLength += csiRSIndex.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			slotConfig = new SlotConfig();
			subCodeLength += slotConfig.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			associatedSSB = new AssociatedSSB();
			subCodeLength += associatedSSB.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			subCodeLength += length.decode(is);
			frequencyDomainAllocation = new FrequencyDomainAllocation();
			subCodeLength += frequencyDomainAllocation.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			firstOFDMSymbolInTimeDomain = new BerInteger();
			subCodeLength += firstOFDMSymbolInTimeDomain.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			sequenceGenerationConfig = new BerInteger();
			subCodeLength += sequenceGenerationConfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (csiRSIndex != null) {
			sb.append("csiRSIndex: ").append(csiRSIndex);
		}
		else {
			sb.append("csiRSIndex: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (slotConfig != null) {
			sb.append("slotConfig: ");
			slotConfig.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("slotConfig: <empty-required-field>");
		}
		
		if (associatedSSB != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("associatedSSB: ");
			associatedSSB.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (frequencyDomainAllocation != null) {
			sb.append("frequencyDomainAllocation: ");
			frequencyDomainAllocation.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("frequencyDomainAllocation: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (firstOFDMSymbolInTimeDomain != null) {
			sb.append("firstOFDMSymbolInTimeDomain: ").append(firstOFDMSymbolInTimeDomain);
		}
		else {
			sb.append("firstOFDMSymbolInTimeDomain: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (sequenceGenerationConfig != null) {
			sb.append("sequenceGenerationConfig: ").append(sequenceGenerationConfig);
		}
		else {
			sb.append("sequenceGenerationConfig: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

