/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class TDDULDLPattern implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum dlULTransmissionPeriodicity = null;
	private BerInteger nrofDownlinkSlots = null;
	private BerInteger nrofDownlinkSymbols = null;
	private BerInteger nrofUplinkSlots = null;
	private BerInteger nrofUplinkSymbols = null;
	
	public TDDULDLPattern() {
	}

	public TDDULDLPattern(byte[] code) {
		this.code = code;
	}

	public void setDlULTransmissionPeriodicity(BerEnum dlULTransmissionPeriodicity) {
		this.dlULTransmissionPeriodicity = dlULTransmissionPeriodicity;
	}

	public BerEnum getDlULTransmissionPeriodicity() {
		return dlULTransmissionPeriodicity;
	}

	public void setNrofDownlinkSlots(BerInteger nrofDownlinkSlots) {
		this.nrofDownlinkSlots = nrofDownlinkSlots;
	}

	public BerInteger getNrofDownlinkSlots() {
		return nrofDownlinkSlots;
	}

	public void setNrofDownlinkSymbols(BerInteger nrofDownlinkSymbols) {
		this.nrofDownlinkSymbols = nrofDownlinkSymbols;
	}

	public BerInteger getNrofDownlinkSymbols() {
		return nrofDownlinkSymbols;
	}

	public void setNrofUplinkSlots(BerInteger nrofUplinkSlots) {
		this.nrofUplinkSlots = nrofUplinkSlots;
	}

	public BerInteger getNrofUplinkSlots() {
		return nrofUplinkSlots;
	}

	public void setNrofUplinkSymbols(BerInteger nrofUplinkSymbols) {
		this.nrofUplinkSymbols = nrofUplinkSymbols;
	}

	public BerInteger getNrofUplinkSymbols() {
		return nrofUplinkSymbols;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += nrofUplinkSymbols.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += nrofUplinkSlots.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += nrofDownlinkSymbols.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += nrofDownlinkSlots.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += dlULTransmissionPeriodicity.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			dlULTransmissionPeriodicity = new BerEnum();
			subCodeLength += dlULTransmissionPeriodicity.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			nrofDownlinkSlots = new BerInteger();
			subCodeLength += nrofDownlinkSlots.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			nrofDownlinkSymbols = new BerInteger();
			subCodeLength += nrofDownlinkSymbols.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			nrofUplinkSlots = new BerInteger();
			subCodeLength += nrofUplinkSlots.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			nrofUplinkSymbols = new BerInteger();
			subCodeLength += nrofUplinkSymbols.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dlULTransmissionPeriodicity != null) {
			sb.append("dlULTransmissionPeriodicity: ").append(dlULTransmissionPeriodicity);
		}
		else {
			sb.append("dlULTransmissionPeriodicity: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nrofDownlinkSlots != null) {
			sb.append("nrofDownlinkSlots: ").append(nrofDownlinkSlots);
		}
		else {
			sb.append("nrofDownlinkSlots: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nrofDownlinkSymbols != null) {
			sb.append("nrofDownlinkSymbols: ").append(nrofDownlinkSymbols);
		}
		else {
			sb.append("nrofDownlinkSymbols: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nrofUplinkSlots != null) {
			sb.append("nrofUplinkSlots: ").append(nrofUplinkSlots);
		}
		else {
			sb.append("nrofUplinkSlots: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nrofUplinkSymbols != null) {
			sb.append("nrofUplinkSymbols: ").append(nrofUplinkSymbols);
		}
		else {
			sb.append("nrofUplinkSymbols: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

