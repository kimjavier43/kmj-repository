/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class FeatureSetDownlink implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class FeatureSetListPerDownlinkCC implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<FeatureSetDownlinkPerCCId> seqOf = null;

		public FeatureSetListPerDownlinkCC() {
			seqOf = new ArrayList<FeatureSetDownlinkPerCCId>();
		}

		public FeatureSetListPerDownlinkCC(byte[] code) {
			this.code = code;
		}

		public List<FeatureSetDownlinkPerCCId> getFeatureSetDownlinkPerCCId() {
			if (seqOf == null) {
				seqOf = new ArrayList<FeatureSetDownlinkPerCCId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				FeatureSetDownlinkPerCCId element = new FeatureSetDownlinkPerCCId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<FeatureSetDownlinkPerCCId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TimeDurationForQCL implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum scs60kHz = null;
		private BerEnum sch120kHz = null;
		
		public TimeDurationForQCL() {
		}

		public TimeDurationForQCL(byte[] code) {
			this.code = code;
		}

		public void setScs60kHz(BerEnum scs60kHz) {
			this.scs60kHz = scs60kHz;
		}

		public BerEnum getScs60kHz() {
			return scs60kHz;
		}

		public void setSch120kHz(BerEnum sch120kHz) {
			this.sch120kHz = sch120kHz;
		}

		public BerEnum getSch120kHz() {
			return sch120kHz;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (sch120kHz != null) {
				codeLength += sch120kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (scs60kHz != null) {
				codeLength += scs60kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				scs60kHz = new BerEnum();
				subCodeLength += scs60kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				sch120kHz = new BerEnum();
				subCodeLength += sch120kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (scs60kHz != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs60kHz: ").append(scs60kHz);
				firstSelectedElement = false;
			}
			
			if (sch120kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("sch120kHz: ").append(sch120kHz);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PdschDifferentTBPerSlot implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum scs15kHz = null;
		private BerEnum scs30kHz = null;
		private BerEnum scs60kHz = null;
		private BerEnum scs120kHz = null;
		
		public PdschDifferentTBPerSlot() {
		}

		public PdschDifferentTBPerSlot(byte[] code) {
			this.code = code;
		}

		public void setScs15kHz(BerEnum scs15kHz) {
			this.scs15kHz = scs15kHz;
		}

		public BerEnum getScs15kHz() {
			return scs15kHz;
		}

		public void setScs30kHz(BerEnum scs30kHz) {
			this.scs30kHz = scs30kHz;
		}

		public BerEnum getScs30kHz() {
			return scs30kHz;
		}

		public void setScs60kHz(BerEnum scs60kHz) {
			this.scs60kHz = scs60kHz;
		}

		public BerEnum getScs60kHz() {
			return scs60kHz;
		}

		public void setScs120kHz(BerEnum scs120kHz) {
			this.scs120kHz = scs120kHz;
		}

		public BerEnum getScs120kHz() {
			return scs120kHz;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (scs120kHz != null) {
				codeLength += scs120kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
			}
			
			if (scs60kHz != null) {
				codeLength += scs60kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
			}
			
			if (scs30kHz != null) {
				codeLength += scs30kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (scs15kHz != null) {
				codeLength += scs15kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				scs15kHz = new BerEnum();
				subCodeLength += scs15kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				scs30kHz = new BerEnum();
				subCodeLength += scs30kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				scs60kHz = new BerEnum();
				subCodeLength += scs60kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				scs120kHz = new BerEnum();
				subCodeLength += scs120kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (scs15kHz != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs15kHz: ").append(scs15kHz);
				firstSelectedElement = false;
			}
			
			if (scs30kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs30kHz: ").append(scs30kHz);
				firstSelectedElement = false;
			}
			
			if (scs60kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs60kHz: ").append(scs60kHz);
				firstSelectedElement = false;
			}
			
			if (scs120kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs120kHz: ").append(scs120kHz);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TypeISinglePanelCodebookList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<TypeISinglePanelCodebook> seqOf = null;

		public TypeISinglePanelCodebookList() {
			seqOf = new ArrayList<TypeISinglePanelCodebook>();
		}

		public TypeISinglePanelCodebookList(byte[] code) {
			this.code = code;
		}

		public List<TypeISinglePanelCodebook> getTypeISinglePanelCodebook() {
			if (seqOf == null) {
				seqOf = new ArrayList<TypeISinglePanelCodebook>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				TypeISinglePanelCodebook element = new TypeISinglePanelCodebook();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<TypeISinglePanelCodebook> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TypeIMultiPanelCodebookList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<TypeIMultiPanelCodebook> seqOf = null;

		public TypeIMultiPanelCodebookList() {
			seqOf = new ArrayList<TypeIMultiPanelCodebook>();
		}

		public TypeIMultiPanelCodebookList(byte[] code) {
			this.code = code;
		}

		public List<TypeIMultiPanelCodebook> getTypeIMultiPanelCodebook() {
			if (seqOf == null) {
				seqOf = new ArrayList<TypeIMultiPanelCodebook>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				TypeIMultiPanelCodebook element = new TypeIMultiPanelCodebook();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<TypeIMultiPanelCodebook> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TypeIICodebookList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<TypeIICodebook> seqOf = null;

		public TypeIICodebookList() {
			seqOf = new ArrayList<TypeIICodebook>();
		}

		public TypeIICodebookList(byte[] code) {
			this.code = code;
		}

		public List<TypeIICodebook> getTypeIICodebook() {
			if (seqOf == null) {
				seqOf = new ArrayList<TypeIICodebook>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				TypeIICodebook element = new TypeIICodebook();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<TypeIICodebook> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TypeIICodebookPortSelectionList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<TypeIICodebookPortSelection> seqOf = null;

		public TypeIICodebookPortSelectionList() {
			seqOf = new ArrayList<TypeIICodebookPortSelection>();
		}

		public TypeIICodebookPortSelectionList(byte[] code) {
			this.code = code;
		}

		public List<TypeIICodebookPortSelection> getTypeIICodebookPortSelection() {
			if (seqOf == null) {
				seqOf = new ArrayList<TypeIICodebookPortSelection>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				TypeIICodebookPortSelection element = new TypeIICodebookPortSelection();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<TypeIICodebookPortSelection> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private FeatureSetListPerDownlinkCC featureSetListPerDownlinkCC = null;
	private FreqSeparationClass intraBandFreqSeparationDL = null;
	private BerEnum scalingFactor = null;
	private BerEnum crossCarrierSchedulingDLOtherSCS = null;
	private BerEnum scellWithoutSSB = null;
	private BerEnum csiRSMeasSCellWithoutSSB = null;
	private BerEnum srsAssocCSIRS = null;
	private BerEnum type13CSS = null;
	private BerEnum pdcchMonitoringAnyOccasions = null;
	private BerEnum pdcchMonitoringAnyOccasionsWithSpanGap = null;
	private BerEnum ueSpecificULDLAssignment = null;
	private BerEnum searchSpaceSharingCADL = null;
	private TimeDurationForQCL timeDurationForQCL = null;
	private PdschDifferentTBPerSlot pdschDifferentTBPerSlot = null;
	private CSIRSIMReceptionForFeedback csiRSIMReceptionForFeedback = null;
	private TypeISinglePanelCodebookList typeISinglePanelCodebookList = null;
	private TypeIMultiPanelCodebookList typeIMultiPanelCodebookList = null;
	private TypeIICodebookList typeIICodebookList = null;
	private TypeIICodebookPortSelectionList typeIICodebookPortSelectionList = null;
	
	public FeatureSetDownlink() {
	}

	public FeatureSetDownlink(byte[] code) {
		this.code = code;
	}

	public void setFeatureSetListPerDownlinkCC(FeatureSetListPerDownlinkCC featureSetListPerDownlinkCC) {
		this.featureSetListPerDownlinkCC = featureSetListPerDownlinkCC;
	}

	public FeatureSetListPerDownlinkCC getFeatureSetListPerDownlinkCC() {
		return featureSetListPerDownlinkCC;
	}

	public void setIntraBandFreqSeparationDL(FreqSeparationClass intraBandFreqSeparationDL) {
		this.intraBandFreqSeparationDL = intraBandFreqSeparationDL;
	}

	public FreqSeparationClass getIntraBandFreqSeparationDL() {
		return intraBandFreqSeparationDL;
	}

	public void setScalingFactor(BerEnum scalingFactor) {
		this.scalingFactor = scalingFactor;
	}

	public BerEnum getScalingFactor() {
		return scalingFactor;
	}

	public void setCrossCarrierSchedulingDLOtherSCS(BerEnum crossCarrierSchedulingDLOtherSCS) {
		this.crossCarrierSchedulingDLOtherSCS = crossCarrierSchedulingDLOtherSCS;
	}

	public BerEnum getCrossCarrierSchedulingDLOtherSCS() {
		return crossCarrierSchedulingDLOtherSCS;
	}

	public void setScellWithoutSSB(BerEnum scellWithoutSSB) {
		this.scellWithoutSSB = scellWithoutSSB;
	}

	public BerEnum getScellWithoutSSB() {
		return scellWithoutSSB;
	}

	public void setCsiRSMeasSCellWithoutSSB(BerEnum csiRSMeasSCellWithoutSSB) {
		this.csiRSMeasSCellWithoutSSB = csiRSMeasSCellWithoutSSB;
	}

	public BerEnum getCsiRSMeasSCellWithoutSSB() {
		return csiRSMeasSCellWithoutSSB;
	}

	public void setSrsAssocCSIRS(BerEnum srsAssocCSIRS) {
		this.srsAssocCSIRS = srsAssocCSIRS;
	}

	public BerEnum getSrsAssocCSIRS() {
		return srsAssocCSIRS;
	}

	public void setType13CSS(BerEnum type13CSS) {
		this.type13CSS = type13CSS;
	}

	public BerEnum getType13CSS() {
		return type13CSS;
	}

	public void setPdcchMonitoringAnyOccasions(BerEnum pdcchMonitoringAnyOccasions) {
		this.pdcchMonitoringAnyOccasions = pdcchMonitoringAnyOccasions;
	}

	public BerEnum getPdcchMonitoringAnyOccasions() {
		return pdcchMonitoringAnyOccasions;
	}

	public void setPdcchMonitoringAnyOccasionsWithSpanGap(BerEnum pdcchMonitoringAnyOccasionsWithSpanGap) {
		this.pdcchMonitoringAnyOccasionsWithSpanGap = pdcchMonitoringAnyOccasionsWithSpanGap;
	}

	public BerEnum getPdcchMonitoringAnyOccasionsWithSpanGap() {
		return pdcchMonitoringAnyOccasionsWithSpanGap;
	}

	public void setUeSpecificULDLAssignment(BerEnum ueSpecificULDLAssignment) {
		this.ueSpecificULDLAssignment = ueSpecificULDLAssignment;
	}

	public BerEnum getUeSpecificULDLAssignment() {
		return ueSpecificULDLAssignment;
	}

	public void setSearchSpaceSharingCADL(BerEnum searchSpaceSharingCADL) {
		this.searchSpaceSharingCADL = searchSpaceSharingCADL;
	}

	public BerEnum getSearchSpaceSharingCADL() {
		return searchSpaceSharingCADL;
	}

	public void setTimeDurationForQCL(TimeDurationForQCL timeDurationForQCL) {
		this.timeDurationForQCL = timeDurationForQCL;
	}

	public TimeDurationForQCL getTimeDurationForQCL() {
		return timeDurationForQCL;
	}

	public void setPdschDifferentTBPerSlot(PdschDifferentTBPerSlot pdschDifferentTBPerSlot) {
		this.pdschDifferentTBPerSlot = pdschDifferentTBPerSlot;
	}

	public PdschDifferentTBPerSlot getPdschDifferentTBPerSlot() {
		return pdschDifferentTBPerSlot;
	}

	public void setCsiRSIMReceptionForFeedback(CSIRSIMReceptionForFeedback csiRSIMReceptionForFeedback) {
		this.csiRSIMReceptionForFeedback = csiRSIMReceptionForFeedback;
	}

	public CSIRSIMReceptionForFeedback getCsiRSIMReceptionForFeedback() {
		return csiRSIMReceptionForFeedback;
	}

	public void setTypeISinglePanelCodebookList(TypeISinglePanelCodebookList typeISinglePanelCodebookList) {
		this.typeISinglePanelCodebookList = typeISinglePanelCodebookList;
	}

	public TypeISinglePanelCodebookList getTypeISinglePanelCodebookList() {
		return typeISinglePanelCodebookList;
	}

	public void setTypeIMultiPanelCodebookList(TypeIMultiPanelCodebookList typeIMultiPanelCodebookList) {
		this.typeIMultiPanelCodebookList = typeIMultiPanelCodebookList;
	}

	public TypeIMultiPanelCodebookList getTypeIMultiPanelCodebookList() {
		return typeIMultiPanelCodebookList;
	}

	public void setTypeIICodebookList(TypeIICodebookList typeIICodebookList) {
		this.typeIICodebookList = typeIICodebookList;
	}

	public TypeIICodebookList getTypeIICodebookList() {
		return typeIICodebookList;
	}

	public void setTypeIICodebookPortSelectionList(TypeIICodebookPortSelectionList typeIICodebookPortSelectionList) {
		this.typeIICodebookPortSelectionList = typeIICodebookPortSelectionList;
	}

	public TypeIICodebookPortSelectionList getTypeIICodebookPortSelectionList() {
		return typeIICodebookPortSelectionList;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (typeIICodebookPortSelectionList != null) {
			codeLength += typeIICodebookPortSelectionList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			reverseOS.write(0xB2);
			codeLength += 1;
		}
		
		if (typeIICodebookList != null) {
			codeLength += typeIICodebookList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			reverseOS.write(0xB1);
			codeLength += 1;
		}
		
		if (typeIMultiPanelCodebookList != null) {
			codeLength += typeIMultiPanelCodebookList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			reverseOS.write(0xB0);
			codeLength += 1;
		}
		
		if (typeISinglePanelCodebookList != null) {
			codeLength += typeISinglePanelCodebookList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			reverseOS.write(0xAF);
			codeLength += 1;
		}
		
		if (csiRSIMReceptionForFeedback != null) {
			codeLength += csiRSIMReceptionForFeedback.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
			reverseOS.write(0xAE);
			codeLength += 1;
		}
		
		if (pdschDifferentTBPerSlot != null) {
			codeLength += pdschDifferentTBPerSlot.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			reverseOS.write(0xAD);
			codeLength += 1;
		}
		
		if (timeDurationForQCL != null) {
			codeLength += timeDurationForQCL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (searchSpaceSharingCADL != null) {
			codeLength += searchSpaceSharingCADL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (ueSpecificULDLAssignment != null) {
			codeLength += ueSpecificULDLAssignment.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		if (pdcchMonitoringAnyOccasionsWithSpanGap != null) {
			codeLength += pdcchMonitoringAnyOccasionsWithSpanGap.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (pdcchMonitoringAnyOccasions != null) {
			codeLength += pdcchMonitoringAnyOccasions.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (type13CSS != null) {
			codeLength += type13CSS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (srsAssocCSIRS != null) {
			codeLength += srsAssocCSIRS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (csiRSMeasSCellWithoutSSB != null) {
			codeLength += csiRSMeasSCellWithoutSSB.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (scellWithoutSSB != null) {
			codeLength += scellWithoutSSB.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (crossCarrierSchedulingDLOtherSCS != null) {
			codeLength += crossCarrierSchedulingDLOtherSCS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (scalingFactor != null) {
			codeLength += scalingFactor.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (intraBandFreqSeparationDL != null) {
			codeLength += intraBandFreqSeparationDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += featureSetListPerDownlinkCC.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			featureSetListPerDownlinkCC = new FeatureSetListPerDownlinkCC();
			subCodeLength += featureSetListPerDownlinkCC.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			intraBandFreqSeparationDL = new FreqSeparationClass();
			subCodeLength += intraBandFreqSeparationDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			scalingFactor = new BerEnum();
			subCodeLength += scalingFactor.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			crossCarrierSchedulingDLOtherSCS = new BerEnum();
			subCodeLength += crossCarrierSchedulingDLOtherSCS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			scellWithoutSSB = new BerEnum();
			subCodeLength += scellWithoutSSB.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			csiRSMeasSCellWithoutSSB = new BerEnum();
			subCodeLength += csiRSMeasSCellWithoutSSB.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			srsAssocCSIRS = new BerEnum();
			subCodeLength += srsAssocCSIRS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			type13CSS = new BerEnum();
			subCodeLength += type13CSS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			pdcchMonitoringAnyOccasions = new BerEnum();
			subCodeLength += pdcchMonitoringAnyOccasions.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			pdcchMonitoringAnyOccasionsWithSpanGap = new BerEnum();
			subCodeLength += pdcchMonitoringAnyOccasionsWithSpanGap.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			ueSpecificULDLAssignment = new BerEnum();
			subCodeLength += ueSpecificULDLAssignment.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			searchSpaceSharingCADL = new BerEnum();
			subCodeLength += searchSpaceSharingCADL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			timeDurationForQCL = new TimeDurationForQCL();
			subCodeLength += timeDurationForQCL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			pdschDifferentTBPerSlot = new PdschDifferentTBPerSlot();
			subCodeLength += pdschDifferentTBPerSlot.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			csiRSIMReceptionForFeedback = new CSIRSIMReceptionForFeedback();
			subCodeLength += csiRSIMReceptionForFeedback.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			typeISinglePanelCodebookList = new TypeISinglePanelCodebookList();
			subCodeLength += typeISinglePanelCodebookList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			typeIMultiPanelCodebookList = new TypeIMultiPanelCodebookList();
			subCodeLength += typeIMultiPanelCodebookList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			typeIICodebookList = new TypeIICodebookList();
			subCodeLength += typeIICodebookList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			typeIICodebookPortSelectionList = new TypeIICodebookPortSelectionList();
			subCodeLength += typeIICodebookPortSelectionList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (featureSetListPerDownlinkCC != null) {
			sb.append("featureSetListPerDownlinkCC: ");
			featureSetListPerDownlinkCC.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("featureSetListPerDownlinkCC: <empty-required-field>");
		}
		
		if (intraBandFreqSeparationDL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("intraBandFreqSeparationDL: ").append(intraBandFreqSeparationDL);
		}
		
		if (scalingFactor != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scalingFactor: ").append(scalingFactor);
		}
		
		if (crossCarrierSchedulingDLOtherSCS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("crossCarrierSchedulingDLOtherSCS: ").append(crossCarrierSchedulingDLOtherSCS);
		}
		
		if (scellWithoutSSB != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scellWithoutSSB: ").append(scellWithoutSSB);
		}
		
		if (csiRSMeasSCellWithoutSSB != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("csiRSMeasSCellWithoutSSB: ").append(csiRSMeasSCellWithoutSSB);
		}
		
		if (srsAssocCSIRS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("srsAssocCSIRS: ").append(srsAssocCSIRS);
		}
		
		if (type13CSS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("type13CSS: ").append(type13CSS);
		}
		
		if (pdcchMonitoringAnyOccasions != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdcchMonitoringAnyOccasions: ").append(pdcchMonitoringAnyOccasions);
		}
		
		if (pdcchMonitoringAnyOccasionsWithSpanGap != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdcchMonitoringAnyOccasionsWithSpanGap: ").append(pdcchMonitoringAnyOccasionsWithSpanGap);
		}
		
		if (ueSpecificULDLAssignment != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ueSpecificULDLAssignment: ").append(ueSpecificULDLAssignment);
		}
		
		if (searchSpaceSharingCADL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("searchSpaceSharingCADL: ").append(searchSpaceSharingCADL);
		}
		
		if (timeDurationForQCL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("timeDurationForQCL: ");
			timeDurationForQCL.appendAsString(sb, indentLevel + 1);
		}
		
		if (pdschDifferentTBPerSlot != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdschDifferentTBPerSlot: ");
			pdschDifferentTBPerSlot.appendAsString(sb, indentLevel + 1);
		}
		
		if (csiRSIMReceptionForFeedback != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("csiRSIMReceptionForFeedback: ");
			csiRSIMReceptionForFeedback.appendAsString(sb, indentLevel + 1);
		}
		
		if (typeISinglePanelCodebookList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("typeISinglePanelCodebookList: ");
			typeISinglePanelCodebookList.appendAsString(sb, indentLevel + 1);
		}
		
		if (typeIMultiPanelCodebookList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("typeIMultiPanelCodebookList: ");
			typeIMultiPanelCodebookList.appendAsString(sb, indentLevel + 1);
		}
		
		if (typeIICodebookList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("typeIICodebookList: ");
			typeIICodebookList.appendAsString(sb, indentLevel + 1);
		}
		
		if (typeIICodebookPortSelectionList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("typeIICodebookPortSelectionList: ");
			typeIICodebookPortSelectionList.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

