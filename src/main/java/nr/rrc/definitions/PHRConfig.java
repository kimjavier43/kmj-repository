/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PHRConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum phrPeriodicTimer = null;
	private BerEnum phrProhibitTimer = null;
	private BerEnum phrTxPowerFactorChange = null;
	private BerBoolean multiplePHR = null;
	private BerBoolean phrType2SpCell = null;
	private BerBoolean phrType2OtherCell = null;
	private BerEnum phrModeOtherCG = null;
	
	public PHRConfig() {
	}

	public PHRConfig(byte[] code) {
		this.code = code;
	}

	public void setPhrPeriodicTimer(BerEnum phrPeriodicTimer) {
		this.phrPeriodicTimer = phrPeriodicTimer;
	}

	public BerEnum getPhrPeriodicTimer() {
		return phrPeriodicTimer;
	}

	public void setPhrProhibitTimer(BerEnum phrProhibitTimer) {
		this.phrProhibitTimer = phrProhibitTimer;
	}

	public BerEnum getPhrProhibitTimer() {
		return phrProhibitTimer;
	}

	public void setPhrTxPowerFactorChange(BerEnum phrTxPowerFactorChange) {
		this.phrTxPowerFactorChange = phrTxPowerFactorChange;
	}

	public BerEnum getPhrTxPowerFactorChange() {
		return phrTxPowerFactorChange;
	}

	public void setMultiplePHR(BerBoolean multiplePHR) {
		this.multiplePHR = multiplePHR;
	}

	public BerBoolean getMultiplePHR() {
		return multiplePHR;
	}

	public void setPhrType2SpCell(BerBoolean phrType2SpCell) {
		this.phrType2SpCell = phrType2SpCell;
	}

	public BerBoolean getPhrType2SpCell() {
		return phrType2SpCell;
	}

	public void setPhrType2OtherCell(BerBoolean phrType2OtherCell) {
		this.phrType2OtherCell = phrType2OtherCell;
	}

	public BerBoolean getPhrType2OtherCell() {
		return phrType2OtherCell;
	}

	public void setPhrModeOtherCG(BerEnum phrModeOtherCG) {
		this.phrModeOtherCG = phrModeOtherCG;
	}

	public BerEnum getPhrModeOtherCG() {
		return phrModeOtherCG;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += phrModeOtherCG.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		codeLength += phrType2OtherCell.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += phrType2SpCell.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += multiplePHR.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += phrTxPowerFactorChange.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += phrProhibitTimer.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += phrPeriodicTimer.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			phrPeriodicTimer = new BerEnum();
			subCodeLength += phrPeriodicTimer.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			phrProhibitTimer = new BerEnum();
			subCodeLength += phrProhibitTimer.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			phrTxPowerFactorChange = new BerEnum();
			subCodeLength += phrTxPowerFactorChange.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			multiplePHR = new BerBoolean();
			subCodeLength += multiplePHR.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			phrType2SpCell = new BerBoolean();
			subCodeLength += phrType2SpCell.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			phrType2OtherCell = new BerBoolean();
			subCodeLength += phrType2OtherCell.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			phrModeOtherCG = new BerEnum();
			subCodeLength += phrModeOtherCG.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (phrPeriodicTimer != null) {
			sb.append("phrPeriodicTimer: ").append(phrPeriodicTimer);
		}
		else {
			sb.append("phrPeriodicTimer: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (phrProhibitTimer != null) {
			sb.append("phrProhibitTimer: ").append(phrProhibitTimer);
		}
		else {
			sb.append("phrProhibitTimer: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (phrTxPowerFactorChange != null) {
			sb.append("phrTxPowerFactorChange: ").append(phrTxPowerFactorChange);
		}
		else {
			sb.append("phrTxPowerFactorChange: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (multiplePHR != null) {
			sb.append("multiplePHR: ").append(multiplePHR);
		}
		else {
			sb.append("multiplePHR: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (phrType2SpCell != null) {
			sb.append("phrType2SpCell: ").append(phrType2SpCell);
		}
		else {
			sb.append("phrType2SpCell: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (phrType2OtherCell != null) {
			sb.append("phrType2OtherCell: ").append(phrType2OtherCell);
		}
		else {
			sb.append("phrType2OtherCell: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (phrModeOtherCG != null) {
			sb.append("phrModeOtherCG: ").append(phrModeOtherCG);
		}
		else {
			sb.append("phrModeOtherCG: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

