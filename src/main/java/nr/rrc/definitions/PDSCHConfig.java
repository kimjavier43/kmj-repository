/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PDSCHConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class TciStatesToAddModList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<TCIState> seqOf = null;

		public TciStatesToAddModList() {
			seqOf = new ArrayList<TCIState>();
		}

		public TciStatesToAddModList(byte[] code) {
			this.code = code;
		}

		public List<TCIState> getTCIState() {
			if (seqOf == null) {
				seqOf = new ArrayList<TCIState>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				TCIState element = new TCIState();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<TCIState> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TciStatesToReleaseList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<TCIStateId> seqOf = null;

		public TciStatesToReleaseList() {
			seqOf = new ArrayList<TCIStateId>();
		}

		public TciStatesToReleaseList(byte[] code) {
			this.code = code;
		}

		public List<TCIStateId> getTCIStateId() {
			if (seqOf == null) {
				seqOf = new ArrayList<TCIStateId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				TCIStateId element = new TCIStateId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<TCIStateId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class RateMatchPatternToAddModList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<RateMatchPattern> seqOf = null;

		public RateMatchPatternToAddModList() {
			seqOf = new ArrayList<RateMatchPattern>();
		}

		public RateMatchPatternToAddModList(byte[] code) {
			this.code = code;
		}

		public List<RateMatchPattern> getRateMatchPattern() {
			if (seqOf == null) {
				seqOf = new ArrayList<RateMatchPattern>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				RateMatchPattern element = new RateMatchPattern();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<RateMatchPattern> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class RateMatchPatternToReleaseList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<RateMatchPatternId> seqOf = null;

		public RateMatchPatternToReleaseList() {
			seqOf = new ArrayList<RateMatchPatternId>();
		}

		public RateMatchPatternToReleaseList(byte[] code) {
			this.code = code;
		}

		public List<RateMatchPatternId> getRateMatchPatternId() {
			if (seqOf == null) {
				seqOf = new ArrayList<RateMatchPatternId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				RateMatchPatternId element = new RateMatchPatternId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<RateMatchPatternId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PrbBundlingType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class StaticBundling implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum bundleSize = null;
			
			public StaticBundling() {
			}

			public StaticBundling(byte[] code) {
				this.code = code;
			}

			public void setBundleSize(BerEnum bundleSize) {
				this.bundleSize = bundleSize;
			}

			public BerEnum getBundleSize() {
				return bundleSize;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (bundleSize != null) {
					codeLength += bundleSize.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == 0) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					bundleSize = new BerEnum();
					subCodeLength += bundleSize.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				if (bundleSize != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("bundleSize: ").append(bundleSize);
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class DynamicBundling implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum bundleSizeSet1 = null;
			private BerEnum bundleSizeSet2 = null;
			
			public DynamicBundling() {
			}

			public DynamicBundling(byte[] code) {
				this.code = code;
			}

			public void setBundleSizeSet1(BerEnum bundleSizeSet1) {
				this.bundleSizeSet1 = bundleSizeSet1;
			}

			public BerEnum getBundleSizeSet1() {
				return bundleSizeSet1;
			}

			public void setBundleSizeSet2(BerEnum bundleSizeSet2) {
				this.bundleSizeSet2 = bundleSizeSet2;
			}

			public BerEnum getBundleSizeSet2() {
				return bundleSizeSet2;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (bundleSizeSet2 != null) {
					codeLength += bundleSizeSet2.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 1
					reverseOS.write(0x81);
					codeLength += 1;
				}
				
				if (bundleSizeSet1 != null) {
					codeLength += bundleSizeSet1.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == 0) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					bundleSizeSet1 = new BerEnum();
					subCodeLength += bundleSizeSet1.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					bundleSizeSet2 = new BerEnum();
					subCodeLength += bundleSizeSet2.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				boolean firstSelectedElement = true;
				if (bundleSizeSet1 != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("bundleSizeSet1: ").append(bundleSizeSet1);
					firstSelectedElement = false;
				}
				
				if (bundleSizeSet2 != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("bundleSizeSet2: ").append(bundleSizeSet2);
					firstSelectedElement = false;
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private StaticBundling staticBundling = null;
		private DynamicBundling dynamicBundling = null;
		
		public PrbBundlingType() {
		}

		public PrbBundlingType(byte[] code) {
			this.code = code;
		}

		public void setStaticBundling(StaticBundling staticBundling) {
			this.staticBundling = staticBundling;
		}

		public StaticBundling getStaticBundling() {
			return staticBundling;
		}

		public void setDynamicBundling(DynamicBundling dynamicBundling) {
			this.dynamicBundling = dynamicBundling;
		}

		public DynamicBundling getDynamicBundling() {
			return dynamicBundling;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (dynamicBundling != null) {
				codeLength += dynamicBundling.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (staticBundling != null) {
				codeLength += staticBundling.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				staticBundling = new StaticBundling();
				codeLength += staticBundling.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				dynamicBundling = new DynamicBundling();
				codeLength += dynamicBundling.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (staticBundling != null) {
				sb.append("staticBundling: ");
				staticBundling.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (dynamicBundling != null) {
				sb.append("dynamicBundling: ");
				dynamicBundling.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class ZpCSIRSResourceToAddModList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ZPCSIRSResource> seqOf = null;

		public ZpCSIRSResourceToAddModList() {
			seqOf = new ArrayList<ZPCSIRSResource>();
		}

		public ZpCSIRSResourceToAddModList(byte[] code) {
			this.code = code;
		}

		public List<ZPCSIRSResource> getZPCSIRSResource() {
			if (seqOf == null) {
				seqOf = new ArrayList<ZPCSIRSResource>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ZPCSIRSResource element = new ZPCSIRSResource();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ZPCSIRSResource> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ZpCSIRSResourceToReleaseList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ZPCSIRSResourceId> seqOf = null;

		public ZpCSIRSResourceToReleaseList() {
			seqOf = new ArrayList<ZPCSIRSResourceId>();
		}

		public ZpCSIRSResourceToReleaseList(byte[] code) {
			this.code = code;
		}

		public List<ZPCSIRSResourceId> getZPCSIRSResourceId() {
			if (seqOf == null) {
				seqOf = new ArrayList<ZPCSIRSResourceId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ZPCSIRSResourceId element = new ZPCSIRSResourceId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ZPCSIRSResourceId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class AperiodicZPCSIRSResourceSetsToAddModList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ZPCSIRSResourceSet> seqOf = null;

		public AperiodicZPCSIRSResourceSetsToAddModList() {
			seqOf = new ArrayList<ZPCSIRSResourceSet>();
		}

		public AperiodicZPCSIRSResourceSetsToAddModList(byte[] code) {
			this.code = code;
		}

		public List<ZPCSIRSResourceSet> getZPCSIRSResourceSet() {
			if (seqOf == null) {
				seqOf = new ArrayList<ZPCSIRSResourceSet>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ZPCSIRSResourceSet element = new ZPCSIRSResourceSet();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ZPCSIRSResourceSet> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class AperiodicZPCSIRSResourceSetsToReleaseList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ZPCSIRSResourceSetId> seqOf = null;

		public AperiodicZPCSIRSResourceSetsToReleaseList() {
			seqOf = new ArrayList<ZPCSIRSResourceSetId>();
		}

		public AperiodicZPCSIRSResourceSetsToReleaseList(byte[] code) {
			this.code = code;
		}

		public List<ZPCSIRSResourceSetId> getZPCSIRSResourceSetId() {
			if (seqOf == null) {
				seqOf = new ArrayList<ZPCSIRSResourceSetId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ZPCSIRSResourceSetId element = new ZPCSIRSResourceSetId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ZPCSIRSResourceSetId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class SpZPCSIRSResourceSetsToAddModList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ZPCSIRSResourceSet> seqOf = null;

		public SpZPCSIRSResourceSetsToAddModList() {
			seqOf = new ArrayList<ZPCSIRSResourceSet>();
		}

		public SpZPCSIRSResourceSetsToAddModList(byte[] code) {
			this.code = code;
		}

		public List<ZPCSIRSResourceSet> getZPCSIRSResourceSet() {
			if (seqOf == null) {
				seqOf = new ArrayList<ZPCSIRSResourceSet>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ZPCSIRSResourceSet element = new ZPCSIRSResourceSet();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ZPCSIRSResourceSet> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class SpZPCSIRSResourceSetsToReleaseList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ZPCSIRSResourceSetId> seqOf = null;

		public SpZPCSIRSResourceSetsToReleaseList() {
			seqOf = new ArrayList<ZPCSIRSResourceSetId>();
		}

		public SpZPCSIRSResourceSetsToReleaseList(byte[] code) {
			this.code = code;
		}

		public List<ZPCSIRSResourceSetId> getZPCSIRSResourceSetId() {
			if (seqOf == null) {
				seqOf = new ArrayList<ZPCSIRSResourceSetId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ZPCSIRSResourceSetId element = new ZPCSIRSResourceSetId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ZPCSIRSResourceSetId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger dataScramblingIdentityPDSCH = null;
	private SetupRelease dmrsDownlinkForPDSCHMappingTypeA = null;
	private SetupRelease dmrsDownlinkForPDSCHMappingTypeB = null;
	private TciStatesToAddModList tciStatesToAddModList = null;
	private TciStatesToReleaseList tciStatesToReleaseList = null;
	private BerEnum vrbToPRBInterleaver = null;
	private BerEnum resourceAllocation = null;
	private SetupRelease pdschTimeDomainAllocationList = null;
	private BerEnum pdschAggregationFactor = null;
	private RateMatchPatternToAddModList rateMatchPatternToAddModList = null;
	private RateMatchPatternToReleaseList rateMatchPatternToReleaseList = null;
	private RateMatchPatternGroup rateMatchPatternGroup1 = null;
	private RateMatchPatternGroup rateMatchPatternGroup2 = null;
	private BerEnum rbgSize = null;
	private BerEnum mcsTable = null;
	private BerEnum maxNrofCodeWordsScheduledByDCI = null;
	private PrbBundlingType prbBundlingType = null;
	private ZpCSIRSResourceToAddModList zpCSIRSResourceToAddModList = null;
	private ZpCSIRSResourceToReleaseList zpCSIRSResourceToReleaseList = null;
	private AperiodicZPCSIRSResourceSetsToAddModList aperiodicZPCSIRSResourceSetsToAddModList = null;
	private AperiodicZPCSIRSResourceSetsToReleaseList aperiodicZPCSIRSResourceSetsToReleaseList = null;
	private SpZPCSIRSResourceSetsToAddModList spZPCSIRSResourceSetsToAddModList = null;
	private SpZPCSIRSResourceSetsToReleaseList spZPCSIRSResourceSetsToReleaseList = null;
	private SetupRelease pZPCSIRSResourceSet = null;
	
	public PDSCHConfig() {
	}

	public PDSCHConfig(byte[] code) {
		this.code = code;
	}

	public void setDataScramblingIdentityPDSCH(BerInteger dataScramblingIdentityPDSCH) {
		this.dataScramblingIdentityPDSCH = dataScramblingIdentityPDSCH;
	}

	public BerInteger getDataScramblingIdentityPDSCH() {
		return dataScramblingIdentityPDSCH;
	}

	public void setDmrsDownlinkForPDSCHMappingTypeA(SetupRelease dmrsDownlinkForPDSCHMappingTypeA) {
		this.dmrsDownlinkForPDSCHMappingTypeA = dmrsDownlinkForPDSCHMappingTypeA;
	}

	public SetupRelease getDmrsDownlinkForPDSCHMappingTypeA() {
		return dmrsDownlinkForPDSCHMappingTypeA;
	}

	public void setDmrsDownlinkForPDSCHMappingTypeB(SetupRelease dmrsDownlinkForPDSCHMappingTypeB) {
		this.dmrsDownlinkForPDSCHMappingTypeB = dmrsDownlinkForPDSCHMappingTypeB;
	}

	public SetupRelease getDmrsDownlinkForPDSCHMappingTypeB() {
		return dmrsDownlinkForPDSCHMappingTypeB;
	}

	public void setTciStatesToAddModList(TciStatesToAddModList tciStatesToAddModList) {
		this.tciStatesToAddModList = tciStatesToAddModList;
	}

	public TciStatesToAddModList getTciStatesToAddModList() {
		return tciStatesToAddModList;
	}

	public void setTciStatesToReleaseList(TciStatesToReleaseList tciStatesToReleaseList) {
		this.tciStatesToReleaseList = tciStatesToReleaseList;
	}

	public TciStatesToReleaseList getTciStatesToReleaseList() {
		return tciStatesToReleaseList;
	}

	public void setVrbToPRBInterleaver(BerEnum vrbToPRBInterleaver) {
		this.vrbToPRBInterleaver = vrbToPRBInterleaver;
	}

	public BerEnum getVrbToPRBInterleaver() {
		return vrbToPRBInterleaver;
	}

	public void setResourceAllocation(BerEnum resourceAllocation) {
		this.resourceAllocation = resourceAllocation;
	}

	public BerEnum getResourceAllocation() {
		return resourceAllocation;
	}

	public void setPdschTimeDomainAllocationList(SetupRelease pdschTimeDomainAllocationList) {
		this.pdschTimeDomainAllocationList = pdschTimeDomainAllocationList;
	}

	public SetupRelease getPdschTimeDomainAllocationList() {
		return pdschTimeDomainAllocationList;
	}

	public void setPdschAggregationFactor(BerEnum pdschAggregationFactor) {
		this.pdschAggregationFactor = pdschAggregationFactor;
	}

	public BerEnum getPdschAggregationFactor() {
		return pdschAggregationFactor;
	}

	public void setRateMatchPatternToAddModList(RateMatchPatternToAddModList rateMatchPatternToAddModList) {
		this.rateMatchPatternToAddModList = rateMatchPatternToAddModList;
	}

	public RateMatchPatternToAddModList getRateMatchPatternToAddModList() {
		return rateMatchPatternToAddModList;
	}

	public void setRateMatchPatternToReleaseList(RateMatchPatternToReleaseList rateMatchPatternToReleaseList) {
		this.rateMatchPatternToReleaseList = rateMatchPatternToReleaseList;
	}

	public RateMatchPatternToReleaseList getRateMatchPatternToReleaseList() {
		return rateMatchPatternToReleaseList;
	}

	public void setRateMatchPatternGroup1(RateMatchPatternGroup rateMatchPatternGroup1) {
		this.rateMatchPatternGroup1 = rateMatchPatternGroup1;
	}

	public RateMatchPatternGroup getRateMatchPatternGroup1() {
		return rateMatchPatternGroup1;
	}

	public void setRateMatchPatternGroup2(RateMatchPatternGroup rateMatchPatternGroup2) {
		this.rateMatchPatternGroup2 = rateMatchPatternGroup2;
	}

	public RateMatchPatternGroup getRateMatchPatternGroup2() {
		return rateMatchPatternGroup2;
	}

	public void setRbgSize(BerEnum rbgSize) {
		this.rbgSize = rbgSize;
	}

	public BerEnum getRbgSize() {
		return rbgSize;
	}

	public void setMcsTable(BerEnum mcsTable) {
		this.mcsTable = mcsTable;
	}

	public BerEnum getMcsTable() {
		return mcsTable;
	}

	public void setMaxNrofCodeWordsScheduledByDCI(BerEnum maxNrofCodeWordsScheduledByDCI) {
		this.maxNrofCodeWordsScheduledByDCI = maxNrofCodeWordsScheduledByDCI;
	}

	public BerEnum getMaxNrofCodeWordsScheduledByDCI() {
		return maxNrofCodeWordsScheduledByDCI;
	}

	public void setPrbBundlingType(PrbBundlingType prbBundlingType) {
		this.prbBundlingType = prbBundlingType;
	}

	public PrbBundlingType getPrbBundlingType() {
		return prbBundlingType;
	}

	public void setZpCSIRSResourceToAddModList(ZpCSIRSResourceToAddModList zpCSIRSResourceToAddModList) {
		this.zpCSIRSResourceToAddModList = zpCSIRSResourceToAddModList;
	}

	public ZpCSIRSResourceToAddModList getZpCSIRSResourceToAddModList() {
		return zpCSIRSResourceToAddModList;
	}

	public void setZpCSIRSResourceToReleaseList(ZpCSIRSResourceToReleaseList zpCSIRSResourceToReleaseList) {
		this.zpCSIRSResourceToReleaseList = zpCSIRSResourceToReleaseList;
	}

	public ZpCSIRSResourceToReleaseList getZpCSIRSResourceToReleaseList() {
		return zpCSIRSResourceToReleaseList;
	}

	public void setAperiodicZPCSIRSResourceSetsToAddModList(AperiodicZPCSIRSResourceSetsToAddModList aperiodicZPCSIRSResourceSetsToAddModList) {
		this.aperiodicZPCSIRSResourceSetsToAddModList = aperiodicZPCSIRSResourceSetsToAddModList;
	}

	public AperiodicZPCSIRSResourceSetsToAddModList getAperiodicZPCSIRSResourceSetsToAddModList() {
		return aperiodicZPCSIRSResourceSetsToAddModList;
	}

	public void setAperiodicZPCSIRSResourceSetsToReleaseList(AperiodicZPCSIRSResourceSetsToReleaseList aperiodicZPCSIRSResourceSetsToReleaseList) {
		this.aperiodicZPCSIRSResourceSetsToReleaseList = aperiodicZPCSIRSResourceSetsToReleaseList;
	}

	public AperiodicZPCSIRSResourceSetsToReleaseList getAperiodicZPCSIRSResourceSetsToReleaseList() {
		return aperiodicZPCSIRSResourceSetsToReleaseList;
	}

	public void setSpZPCSIRSResourceSetsToAddModList(SpZPCSIRSResourceSetsToAddModList spZPCSIRSResourceSetsToAddModList) {
		this.spZPCSIRSResourceSetsToAddModList = spZPCSIRSResourceSetsToAddModList;
	}

	public SpZPCSIRSResourceSetsToAddModList getSpZPCSIRSResourceSetsToAddModList() {
		return spZPCSIRSResourceSetsToAddModList;
	}

	public void setSpZPCSIRSResourceSetsToReleaseList(SpZPCSIRSResourceSetsToReleaseList spZPCSIRSResourceSetsToReleaseList) {
		this.spZPCSIRSResourceSetsToReleaseList = spZPCSIRSResourceSetsToReleaseList;
	}

	public SpZPCSIRSResourceSetsToReleaseList getSpZPCSIRSResourceSetsToReleaseList() {
		return spZPCSIRSResourceSetsToReleaseList;
	}

	public void setPZPCSIRSResourceSet(SetupRelease pZPCSIRSResourceSet) {
		this.pZPCSIRSResourceSet = pZPCSIRSResourceSet;
	}

	public SetupRelease getPZPCSIRSResourceSet() {
		return pZPCSIRSResourceSet;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (pZPCSIRSResourceSet != null) {
			sublength = pZPCSIRSResourceSet.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			reverseOS.write(0xB7);
			codeLength += 1;
		}
		
		if (spZPCSIRSResourceSetsToReleaseList != null) {
			codeLength += spZPCSIRSResourceSetsToReleaseList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
			reverseOS.write(0xB6);
			codeLength += 1;
		}
		
		if (spZPCSIRSResourceSetsToAddModList != null) {
			codeLength += spZPCSIRSResourceSetsToAddModList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			reverseOS.write(0xB5);
			codeLength += 1;
		}
		
		if (aperiodicZPCSIRSResourceSetsToReleaseList != null) {
			codeLength += aperiodicZPCSIRSResourceSetsToReleaseList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		if (aperiodicZPCSIRSResourceSetsToAddModList != null) {
			codeLength += aperiodicZPCSIRSResourceSetsToAddModList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (zpCSIRSResourceToReleaseList != null) {
			codeLength += zpCSIRSResourceToReleaseList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			reverseOS.write(0xB2);
			codeLength += 1;
		}
		
		if (zpCSIRSResourceToAddModList != null) {
			codeLength += zpCSIRSResourceToAddModList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			reverseOS.write(0xB1);
			codeLength += 1;
		}
		
		sublength = prbBundlingType.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
		reverseOS.write(0xB0);
		codeLength += 1;
		
		if (maxNrofCodeWordsScheduledByDCI != null) {
			codeLength += maxNrofCodeWordsScheduledByDCI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		if (mcsTable != null) {
			codeLength += mcsTable.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		codeLength += rbgSize.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 13
		reverseOS.write(0x8D);
		codeLength += 1;
		
		if (rateMatchPatternGroup2 != null) {
			codeLength += rateMatchPatternGroup2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			reverseOS.write(0xAC);
			codeLength += 1;
		}
		
		if (rateMatchPatternGroup1 != null) {
			codeLength += rateMatchPatternGroup1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (rateMatchPatternToReleaseList != null) {
			codeLength += rateMatchPatternToReleaseList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (rateMatchPatternToAddModList != null) {
			codeLength += rateMatchPatternToAddModList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (pdschAggregationFactor != null) {
			codeLength += pdschAggregationFactor.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (pdschTimeDomainAllocationList != null) {
			sublength = pdschTimeDomainAllocationList.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		codeLength += resourceAllocation.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		if (vrbToPRBInterleaver != null) {
			codeLength += vrbToPRBInterleaver.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (tciStatesToReleaseList != null) {
			codeLength += tciStatesToReleaseList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (tciStatesToAddModList != null) {
			codeLength += tciStatesToAddModList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (dmrsDownlinkForPDSCHMappingTypeB != null) {
			sublength = dmrsDownlinkForPDSCHMappingTypeB.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (dmrsDownlinkForPDSCHMappingTypeA != null) {
			sublength = dmrsDownlinkForPDSCHMappingTypeA.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		if (dataScramblingIdentityPDSCH != null) {
			codeLength += dataScramblingIdentityPDSCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			dataScramblingIdentityPDSCH = new BerInteger();
			subCodeLength += dataScramblingIdentityPDSCH.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			dmrsDownlinkForPDSCHMappingTypeA = new SetupRelease();
			subCodeLength += dmrsDownlinkForPDSCHMappingTypeA.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			subCodeLength += length.decode(is);
			dmrsDownlinkForPDSCHMappingTypeB = new SetupRelease();
			subCodeLength += dmrsDownlinkForPDSCHMappingTypeB.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			tciStatesToAddModList = new TciStatesToAddModList();
			subCodeLength += tciStatesToAddModList.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			tciStatesToReleaseList = new TciStatesToReleaseList();
			subCodeLength += tciStatesToReleaseList.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			vrbToPRBInterleaver = new BerEnum();
			subCodeLength += vrbToPRBInterleaver.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			resourceAllocation = new BerEnum();
			subCodeLength += resourceAllocation.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			subCodeLength += length.decode(is);
			pdschTimeDomainAllocationList = new SetupRelease();
			subCodeLength += pdschTimeDomainAllocationList.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			pdschAggregationFactor = new BerEnum();
			subCodeLength += pdschAggregationFactor.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			rateMatchPatternToAddModList = new RateMatchPatternToAddModList();
			subCodeLength += rateMatchPatternToAddModList.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			rateMatchPatternToReleaseList = new RateMatchPatternToReleaseList();
			subCodeLength += rateMatchPatternToReleaseList.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			rateMatchPatternGroup1 = new RateMatchPatternGroup();
			subCodeLength += rateMatchPatternGroup1.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			rateMatchPatternGroup2 = new RateMatchPatternGroup();
			subCodeLength += rateMatchPatternGroup2.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			rbgSize = new BerEnum();
			subCodeLength += rbgSize.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			mcsTable = new BerEnum();
			subCodeLength += mcsTable.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			maxNrofCodeWordsScheduledByDCI = new BerEnum();
			subCodeLength += maxNrofCodeWordsScheduledByDCI.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			subCodeLength += length.decode(is);
			prbBundlingType = new PrbBundlingType();
			subCodeLength += prbBundlingType.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			zpCSIRSResourceToAddModList = new ZpCSIRSResourceToAddModList();
			subCodeLength += zpCSIRSResourceToAddModList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			zpCSIRSResourceToReleaseList = new ZpCSIRSResourceToReleaseList();
			subCodeLength += zpCSIRSResourceToReleaseList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			aperiodicZPCSIRSResourceSetsToAddModList = new AperiodicZPCSIRSResourceSetsToAddModList();
			subCodeLength += aperiodicZPCSIRSResourceSetsToAddModList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			aperiodicZPCSIRSResourceSetsToReleaseList = new AperiodicZPCSIRSResourceSetsToReleaseList();
			subCodeLength += aperiodicZPCSIRSResourceSetsToReleaseList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			spZPCSIRSResourceSetsToAddModList = new SpZPCSIRSResourceSetsToAddModList();
			subCodeLength += spZPCSIRSResourceSetsToAddModList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			spZPCSIRSResourceSetsToReleaseList = new SpZPCSIRSResourceSetsToReleaseList();
			subCodeLength += spZPCSIRSResourceSetsToReleaseList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			subCodeLength += length.decode(is);
			pZPCSIRSResourceSet = new SetupRelease();
			subCodeLength += pZPCSIRSResourceSet.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (dataScramblingIdentityPDSCH != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataScramblingIdentityPDSCH: ").append(dataScramblingIdentityPDSCH);
			firstSelectedElement = false;
		}
		
		if (dmrsDownlinkForPDSCHMappingTypeA != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dmrsDownlinkForPDSCHMappingTypeA: ");
			dmrsDownlinkForPDSCHMappingTypeA.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (dmrsDownlinkForPDSCHMappingTypeB != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dmrsDownlinkForPDSCHMappingTypeB: ");
			dmrsDownlinkForPDSCHMappingTypeB.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (tciStatesToAddModList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tciStatesToAddModList: ");
			tciStatesToAddModList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (tciStatesToReleaseList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tciStatesToReleaseList: ");
			tciStatesToReleaseList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (vrbToPRBInterleaver != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("vrbToPRBInterleaver: ").append(vrbToPRBInterleaver);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (resourceAllocation != null) {
			sb.append("resourceAllocation: ").append(resourceAllocation);
		}
		else {
			sb.append("resourceAllocation: <empty-required-field>");
		}
		
		if (pdschTimeDomainAllocationList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdschTimeDomainAllocationList: ");
			pdschTimeDomainAllocationList.appendAsString(sb, indentLevel + 1);
		}
		
		if (pdschAggregationFactor != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdschAggregationFactor: ").append(pdschAggregationFactor);
		}
		
		if (rateMatchPatternToAddModList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rateMatchPatternToAddModList: ");
			rateMatchPatternToAddModList.appendAsString(sb, indentLevel + 1);
		}
		
		if (rateMatchPatternToReleaseList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rateMatchPatternToReleaseList: ");
			rateMatchPatternToReleaseList.appendAsString(sb, indentLevel + 1);
		}
		
		if (rateMatchPatternGroup1 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rateMatchPatternGroup1: ");
			rateMatchPatternGroup1.appendAsString(sb, indentLevel + 1);
		}
		
		if (rateMatchPatternGroup2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rateMatchPatternGroup2: ");
			rateMatchPatternGroup2.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rbgSize != null) {
			sb.append("rbgSize: ").append(rbgSize);
		}
		else {
			sb.append("rbgSize: <empty-required-field>");
		}
		
		if (mcsTable != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mcsTable: ").append(mcsTable);
		}
		
		if (maxNrofCodeWordsScheduledByDCI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNrofCodeWordsScheduledByDCI: ").append(maxNrofCodeWordsScheduledByDCI);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (prbBundlingType != null) {
			sb.append("prbBundlingType: ");
			prbBundlingType.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("prbBundlingType: <empty-required-field>");
		}
		
		if (zpCSIRSResourceToAddModList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("zpCSIRSResourceToAddModList: ");
			zpCSIRSResourceToAddModList.appendAsString(sb, indentLevel + 1);
		}
		
		if (zpCSIRSResourceToReleaseList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("zpCSIRSResourceToReleaseList: ");
			zpCSIRSResourceToReleaseList.appendAsString(sb, indentLevel + 1);
		}
		
		if (aperiodicZPCSIRSResourceSetsToAddModList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aperiodicZPCSIRSResourceSetsToAddModList: ");
			aperiodicZPCSIRSResourceSetsToAddModList.appendAsString(sb, indentLevel + 1);
		}
		
		if (aperiodicZPCSIRSResourceSetsToReleaseList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aperiodicZPCSIRSResourceSetsToReleaseList: ");
			aperiodicZPCSIRSResourceSetsToReleaseList.appendAsString(sb, indentLevel + 1);
		}
		
		if (spZPCSIRSResourceSetsToAddModList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("spZPCSIRSResourceSetsToAddModList: ");
			spZPCSIRSResourceSetsToAddModList.appendAsString(sb, indentLevel + 1);
		}
		
		if (spZPCSIRSResourceSetsToReleaseList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("spZPCSIRSResourceSetsToReleaseList: ");
			spZPCSIRSResourceSetsToReleaseList.appendAsString(sb, indentLevel + 1);
		}
		
		if (pZPCSIRSResourceSet != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pZPCSIRSResourceSet: ");
			pZPCSIRSResourceSet.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

