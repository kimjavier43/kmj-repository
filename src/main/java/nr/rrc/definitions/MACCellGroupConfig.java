/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class MACCellGroupConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private SetupRelease drxConfig = null;
	private SchedulingRequestConfig schedulingRequestConfig = null;
	private BSRConfig bsrConfig = null;
	private TAGConfig tagConfig = null;
	private SetupRelease phrConfig = null;
	private BerBoolean skipUplinkTxDynamic = null;
	
	public MACCellGroupConfig() {
	}

	public MACCellGroupConfig(byte[] code) {
		this.code = code;
	}

	public void setDrxConfig(SetupRelease drxConfig) {
		this.drxConfig = drxConfig;
	}

	public SetupRelease getDrxConfig() {
		return drxConfig;
	}

	public void setSchedulingRequestConfig(SchedulingRequestConfig schedulingRequestConfig) {
		this.schedulingRequestConfig = schedulingRequestConfig;
	}

	public SchedulingRequestConfig getSchedulingRequestConfig() {
		return schedulingRequestConfig;
	}

	public void setBsrConfig(BSRConfig bsrConfig) {
		this.bsrConfig = bsrConfig;
	}

	public BSRConfig getBsrConfig() {
		return bsrConfig;
	}

	public void setTagConfig(TAGConfig tagConfig) {
		this.tagConfig = tagConfig;
	}

	public TAGConfig getTagConfig() {
		return tagConfig;
	}

	public void setPhrConfig(SetupRelease phrConfig) {
		this.phrConfig = phrConfig;
	}

	public SetupRelease getPhrConfig() {
		return phrConfig;
	}

	public void setSkipUplinkTxDynamic(BerBoolean skipUplinkTxDynamic) {
		this.skipUplinkTxDynamic = skipUplinkTxDynamic;
	}

	public BerBoolean getSkipUplinkTxDynamic() {
		return skipUplinkTxDynamic;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		codeLength += skipUplinkTxDynamic.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		if (phrConfig != null) {
			sublength = phrConfig.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (tagConfig != null) {
			codeLength += tagConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (bsrConfig != null) {
			codeLength += bsrConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (schedulingRequestConfig != null) {
			codeLength += schedulingRequestConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		if (drxConfig != null) {
			sublength = drxConfig.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			subCodeLength += length.decode(is);
			drxConfig = new SetupRelease();
			subCodeLength += drxConfig.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			schedulingRequestConfig = new SchedulingRequestConfig();
			subCodeLength += schedulingRequestConfig.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			bsrConfig = new BSRConfig();
			subCodeLength += bsrConfig.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			tagConfig = new TAGConfig();
			subCodeLength += tagConfig.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			subCodeLength += length.decode(is);
			phrConfig = new SetupRelease();
			subCodeLength += phrConfig.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			skipUplinkTxDynamic = new BerBoolean();
			subCodeLength += skipUplinkTxDynamic.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (drxConfig != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("drxConfig: ");
			drxConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (schedulingRequestConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("schedulingRequestConfig: ");
			schedulingRequestConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (bsrConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("bsrConfig: ");
			bsrConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (tagConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tagConfig: ");
			tagConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (phrConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("phrConfig: ");
			phrConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (skipUplinkTxDynamic != null) {
			sb.append("skipUplinkTxDynamic: ").append(skipUplinkTxDynamic);
		}
		else {
			sb.append("skipUplinkTxDynamic: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

