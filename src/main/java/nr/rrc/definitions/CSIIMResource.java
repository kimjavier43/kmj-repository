/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CSIIMResource implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class CsiIMResourceElementPattern implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Pattern0 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum subcarrierLocationP0 = null;
			private BerInteger symbolLocationP0 = null;
			
			public Pattern0() {
			}

			public Pattern0(byte[] code) {
				this.code = code;
			}

			public void setSubcarrierLocationP0(BerEnum subcarrierLocationP0) {
				this.subcarrierLocationP0 = subcarrierLocationP0;
			}

			public BerEnum getSubcarrierLocationP0() {
				return subcarrierLocationP0;
			}

			public void setSymbolLocationP0(BerInteger symbolLocationP0) {
				this.symbolLocationP0 = symbolLocationP0;
			}

			public BerInteger getSymbolLocationP0() {
				return symbolLocationP0;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += symbolLocationP0.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				codeLength += subcarrierLocationP0.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					subcarrierLocationP0 = new BerEnum();
					subCodeLength += subcarrierLocationP0.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					symbolLocationP0 = new BerInteger();
					subCodeLength += symbolLocationP0.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subcarrierLocationP0 != null) {
					sb.append("subcarrierLocationP0: ").append(subcarrierLocationP0);
				}
				else {
					sb.append("subcarrierLocationP0: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (symbolLocationP0 != null) {
					sb.append("symbolLocationP0: ").append(symbolLocationP0);
				}
				else {
					sb.append("symbolLocationP0: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Pattern1 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum subcarrierLocationP1 = null;
			private BerInteger symbolLocationP1 = null;
			
			public Pattern1() {
			}

			public Pattern1(byte[] code) {
				this.code = code;
			}

			public void setSubcarrierLocationP1(BerEnum subcarrierLocationP1) {
				this.subcarrierLocationP1 = subcarrierLocationP1;
			}

			public BerEnum getSubcarrierLocationP1() {
				return subcarrierLocationP1;
			}

			public void setSymbolLocationP1(BerInteger symbolLocationP1) {
				this.symbolLocationP1 = symbolLocationP1;
			}

			public BerInteger getSymbolLocationP1() {
				return symbolLocationP1;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += symbolLocationP1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				codeLength += subcarrierLocationP1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					subcarrierLocationP1 = new BerEnum();
					subCodeLength += subcarrierLocationP1.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					symbolLocationP1 = new BerInteger();
					subCodeLength += symbolLocationP1.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subcarrierLocationP1 != null) {
					sb.append("subcarrierLocationP1: ").append(subcarrierLocationP1);
				}
				else {
					sb.append("subcarrierLocationP1: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (symbolLocationP1 != null) {
					sb.append("symbolLocationP1: ").append(symbolLocationP1);
				}
				else {
					sb.append("symbolLocationP1: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private Pattern0 pattern0 = null;
		private Pattern1 pattern1 = null;
		
		public CsiIMResourceElementPattern() {
		}

		public CsiIMResourceElementPattern(byte[] code) {
			this.code = code;
		}

		public void setPattern0(Pattern0 pattern0) {
			this.pattern0 = pattern0;
		}

		public Pattern0 getPattern0() {
			return pattern0;
		}

		public void setPattern1(Pattern1 pattern1) {
			this.pattern1 = pattern1;
		}

		public Pattern1 getPattern1() {
			return pattern1;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (pattern1 != null) {
				codeLength += pattern1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (pattern0 != null) {
				codeLength += pattern0.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				pattern0 = new Pattern0();
				codeLength += pattern0.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				pattern1 = new Pattern1();
				codeLength += pattern1.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (pattern0 != null) {
				sb.append("pattern0: ");
				pattern0.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (pattern1 != null) {
				sb.append("pattern1: ");
				pattern1.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private CSIIMResourceId csiIMResourceId = null;
	private CsiIMResourceElementPattern csiIMResourceElementPattern = null;
	private CSIFrequencyOccupation freqBand = null;
	private CSIResourcePeriodicityAndOffset periodicityAndOffset = null;
	
	public CSIIMResource() {
	}

	public CSIIMResource(byte[] code) {
		this.code = code;
	}

	public void setCsiIMResourceId(CSIIMResourceId csiIMResourceId) {
		this.csiIMResourceId = csiIMResourceId;
	}

	public CSIIMResourceId getCsiIMResourceId() {
		return csiIMResourceId;
	}

	public void setCsiIMResourceElementPattern(CsiIMResourceElementPattern csiIMResourceElementPattern) {
		this.csiIMResourceElementPattern = csiIMResourceElementPattern;
	}

	public CsiIMResourceElementPattern getCsiIMResourceElementPattern() {
		return csiIMResourceElementPattern;
	}

	public void setFreqBand(CSIFrequencyOccupation freqBand) {
		this.freqBand = freqBand;
	}

	public CSIFrequencyOccupation getFreqBand() {
		return freqBand;
	}

	public void setPeriodicityAndOffset(CSIResourcePeriodicityAndOffset periodicityAndOffset) {
		this.periodicityAndOffset = periodicityAndOffset;
	}

	public CSIResourcePeriodicityAndOffset getPeriodicityAndOffset() {
		return periodicityAndOffset;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (periodicityAndOffset != null) {
			sublength = periodicityAndOffset.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (freqBand != null) {
			codeLength += freqBand.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (csiIMResourceElementPattern != null) {
			sublength = csiIMResourceElementPattern.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		codeLength += csiIMResourceId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			csiIMResourceId = new CSIIMResourceId();
			subCodeLength += csiIMResourceId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			csiIMResourceElementPattern = new CsiIMResourceElementPattern();
			subCodeLength += csiIMResourceElementPattern.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			freqBand = new CSIFrequencyOccupation();
			subCodeLength += freqBand.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			subCodeLength += length.decode(is);
			periodicityAndOffset = new CSIResourcePeriodicityAndOffset();
			subCodeLength += periodicityAndOffset.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (csiIMResourceId != null) {
			sb.append("csiIMResourceId: ").append(csiIMResourceId);
		}
		else {
			sb.append("csiIMResourceId: <empty-required-field>");
		}
		
		if (csiIMResourceElementPattern != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("csiIMResourceElementPattern: ");
			csiIMResourceElementPattern.appendAsString(sb, indentLevel + 1);
		}
		
		if (freqBand != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("freqBand: ");
			freqBand.appendAsString(sb, indentLevel + 1);
		}
		
		if (periodicityAndOffset != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("periodicityAndOffset: ");
			periodicityAndOffset.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

