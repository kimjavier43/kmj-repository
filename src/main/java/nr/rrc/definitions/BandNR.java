/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class BandNR implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private FreqBandIndicatorNR bandNR = null;
	private BerBitString modifiedMPRBehaviour = null;
	private MIMOParametersPerBand mimoParametersPerBand = null;
	private BerEnum extendedCP = null;
	private BerEnum multipleTCI = null;
	private BerEnum bwpWithoutRestriction = null;
	private BerEnum bwpSameNumerology = null;
	private BerEnum bwpDiffNumerology = null;
	private BerEnum crossCarrierSchedulingDLSameSCS = null;
	private BerEnum crossCarrierSchedulingULSameSCS = null;
	private BerEnum pdsch256QAMFR2 = null;
	private BerEnum pusch256QAM = null;
	private BerEnum uePowerClass = null;
	private BerEnum rateMatchingLTECRS = null;
	
	public BandNR() {
	}

	public BandNR(byte[] code) {
		this.code = code;
	}

	public void setBandNR(FreqBandIndicatorNR bandNR) {
		this.bandNR = bandNR;
	}

	public FreqBandIndicatorNR getBandNR() {
		return bandNR;
	}

	public void setModifiedMPRBehaviour(BerBitString modifiedMPRBehaviour) {
		this.modifiedMPRBehaviour = modifiedMPRBehaviour;
	}

	public BerBitString getModifiedMPRBehaviour() {
		return modifiedMPRBehaviour;
	}

	public void setMimoParametersPerBand(MIMOParametersPerBand mimoParametersPerBand) {
		this.mimoParametersPerBand = mimoParametersPerBand;
	}

	public MIMOParametersPerBand getMimoParametersPerBand() {
		return mimoParametersPerBand;
	}

	public void setExtendedCP(BerEnum extendedCP) {
		this.extendedCP = extendedCP;
	}

	public BerEnum getExtendedCP() {
		return extendedCP;
	}

	public void setMultipleTCI(BerEnum multipleTCI) {
		this.multipleTCI = multipleTCI;
	}

	public BerEnum getMultipleTCI() {
		return multipleTCI;
	}

	public void setBwpWithoutRestriction(BerEnum bwpWithoutRestriction) {
		this.bwpWithoutRestriction = bwpWithoutRestriction;
	}

	public BerEnum getBwpWithoutRestriction() {
		return bwpWithoutRestriction;
	}

	public void setBwpSameNumerology(BerEnum bwpSameNumerology) {
		this.bwpSameNumerology = bwpSameNumerology;
	}

	public BerEnum getBwpSameNumerology() {
		return bwpSameNumerology;
	}

	public void setBwpDiffNumerology(BerEnum bwpDiffNumerology) {
		this.bwpDiffNumerology = bwpDiffNumerology;
	}

	public BerEnum getBwpDiffNumerology() {
		return bwpDiffNumerology;
	}

	public void setCrossCarrierSchedulingDLSameSCS(BerEnum crossCarrierSchedulingDLSameSCS) {
		this.crossCarrierSchedulingDLSameSCS = crossCarrierSchedulingDLSameSCS;
	}

	public BerEnum getCrossCarrierSchedulingDLSameSCS() {
		return crossCarrierSchedulingDLSameSCS;
	}

	public void setCrossCarrierSchedulingULSameSCS(BerEnum crossCarrierSchedulingULSameSCS) {
		this.crossCarrierSchedulingULSameSCS = crossCarrierSchedulingULSameSCS;
	}

	public BerEnum getCrossCarrierSchedulingULSameSCS() {
		return crossCarrierSchedulingULSameSCS;
	}

	public void setPdsch256QAMFR2(BerEnum pdsch256QAMFR2) {
		this.pdsch256QAMFR2 = pdsch256QAMFR2;
	}

	public BerEnum getPdsch256QAMFR2() {
		return pdsch256QAMFR2;
	}

	public void setPusch256QAM(BerEnum pusch256QAM) {
		this.pusch256QAM = pusch256QAM;
	}

	public BerEnum getPusch256QAM() {
		return pusch256QAM;
	}

	public void setUePowerClass(BerEnum uePowerClass) {
		this.uePowerClass = uePowerClass;
	}

	public BerEnum getUePowerClass() {
		return uePowerClass;
	}

	public void setRateMatchingLTECRS(BerEnum rateMatchingLTECRS) {
		this.rateMatchingLTECRS = rateMatchingLTECRS;
	}

	public BerEnum getRateMatchingLTECRS() {
		return rateMatchingLTECRS;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (rateMatchingLTECRS != null) {
			codeLength += rateMatchingLTECRS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
		}
		
		if (uePowerClass != null) {
			codeLength += uePowerClass.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (pusch256QAM != null) {
			codeLength += pusch256QAM.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (pdsch256QAMFR2 != null) {
			codeLength += pdsch256QAMFR2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		if (crossCarrierSchedulingULSameSCS != null) {
			codeLength += crossCarrierSchedulingULSameSCS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (crossCarrierSchedulingDLSameSCS != null) {
			codeLength += crossCarrierSchedulingDLSameSCS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (bwpDiffNumerology != null) {
			codeLength += bwpDiffNumerology.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (bwpSameNumerology != null) {
			codeLength += bwpSameNumerology.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (bwpWithoutRestriction != null) {
			codeLength += bwpWithoutRestriction.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (multipleTCI != null) {
			codeLength += multipleTCI.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (extendedCP != null) {
			codeLength += extendedCP.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (mimoParametersPerBand != null) {
			codeLength += mimoParametersPerBand.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (modifiedMPRBehaviour != null) {
			codeLength += modifiedMPRBehaviour.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += bandNR.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			bandNR = new FreqBandIndicatorNR();
			subCodeLength += bandNR.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			modifiedMPRBehaviour = new BerBitString();
			subCodeLength += modifiedMPRBehaviour.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			mimoParametersPerBand = new MIMOParametersPerBand();
			subCodeLength += mimoParametersPerBand.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			extendedCP = new BerEnum();
			subCodeLength += extendedCP.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			multipleTCI = new BerEnum();
			subCodeLength += multipleTCI.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			bwpWithoutRestriction = new BerEnum();
			subCodeLength += bwpWithoutRestriction.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			bwpSameNumerology = new BerEnum();
			subCodeLength += bwpSameNumerology.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			bwpDiffNumerology = new BerEnum();
			subCodeLength += bwpDiffNumerology.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			crossCarrierSchedulingDLSameSCS = new BerEnum();
			subCodeLength += crossCarrierSchedulingDLSameSCS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			crossCarrierSchedulingULSameSCS = new BerEnum();
			subCodeLength += crossCarrierSchedulingULSameSCS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			pdsch256QAMFR2 = new BerEnum();
			subCodeLength += pdsch256QAMFR2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			pusch256QAM = new BerEnum();
			subCodeLength += pusch256QAM.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			uePowerClass = new BerEnum();
			subCodeLength += uePowerClass.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			rateMatchingLTECRS = new BerEnum();
			subCodeLength += rateMatchingLTECRS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (bandNR != null) {
			sb.append("bandNR: ").append(bandNR);
		}
		else {
			sb.append("bandNR: <empty-required-field>");
		}
		
		if (modifiedMPRBehaviour != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("modifiedMPRBehaviour: ").append(modifiedMPRBehaviour);
		}
		
		if (mimoParametersPerBand != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mimoParametersPerBand: ");
			mimoParametersPerBand.appendAsString(sb, indentLevel + 1);
		}
		
		if (extendedCP != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("extendedCP: ").append(extendedCP);
		}
		
		if (multipleTCI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("multipleTCI: ").append(multipleTCI);
		}
		
		if (bwpWithoutRestriction != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("bwpWithoutRestriction: ").append(bwpWithoutRestriction);
		}
		
		if (bwpSameNumerology != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("bwpSameNumerology: ").append(bwpSameNumerology);
		}
		
		if (bwpDiffNumerology != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("bwpDiffNumerology: ").append(bwpDiffNumerology);
		}
		
		if (crossCarrierSchedulingDLSameSCS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("crossCarrierSchedulingDLSameSCS: ").append(crossCarrierSchedulingDLSameSCS);
		}
		
		if (crossCarrierSchedulingULSameSCS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("crossCarrierSchedulingULSameSCS: ").append(crossCarrierSchedulingULSameSCS);
		}
		
		if (pdsch256QAMFR2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdsch256QAMFR2: ").append(pdsch256QAMFR2);
		}
		
		if (pusch256QAM != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pusch256QAM: ").append(pusch256QAM);
		}
		
		if (uePowerClass != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uePowerClass: ").append(uePowerClass);
		}
		
		if (rateMatchingLTECRS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rateMatchingLTECRS: ").append(rateMatchingLTECRS);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

