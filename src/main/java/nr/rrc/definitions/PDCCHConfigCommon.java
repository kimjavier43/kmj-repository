/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PDCCHConfigCommon implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class CommonSearchSpace implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SearchSpace> seqOf = null;

		public CommonSearchSpace() {
			seqOf = new ArrayList<SearchSpace>();
		}

		public CommonSearchSpace(byte[] code) {
			this.code = code;
		}

		public List<SearchSpace> getSearchSpace() {
			if (seqOf == null) {
				seqOf = new ArrayList<SearchSpace>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SearchSpace element = new SearchSpace();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SearchSpace> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger controlResourceSetZero = null;
	private ControlResourceSet commonControlResourceSet = null;
	private BerInteger searchSpaceZero = null;
	private CommonSearchSpace commonSearchSpace = null;
	private SearchSpaceId searchSpaceSIB1 = null;
	private SearchSpaceId searchSpaceOtherSystemInformation = null;
	private SearchSpaceId pagingSearchSpace = null;
	private SearchSpaceId raSearchSpace = null;
	
	public PDCCHConfigCommon() {
	}

	public PDCCHConfigCommon(byte[] code) {
		this.code = code;
	}

	public void setControlResourceSetZero(BerInteger controlResourceSetZero) {
		this.controlResourceSetZero = controlResourceSetZero;
	}

	public BerInteger getControlResourceSetZero() {
		return controlResourceSetZero;
	}

	public void setCommonControlResourceSet(ControlResourceSet commonControlResourceSet) {
		this.commonControlResourceSet = commonControlResourceSet;
	}

	public ControlResourceSet getCommonControlResourceSet() {
		return commonControlResourceSet;
	}

	public void setSearchSpaceZero(BerInteger searchSpaceZero) {
		this.searchSpaceZero = searchSpaceZero;
	}

	public BerInteger getSearchSpaceZero() {
		return searchSpaceZero;
	}

	public void setCommonSearchSpace(CommonSearchSpace commonSearchSpace) {
		this.commonSearchSpace = commonSearchSpace;
	}

	public CommonSearchSpace getCommonSearchSpace() {
		return commonSearchSpace;
	}

	public void setSearchSpaceSIB1(SearchSpaceId searchSpaceSIB1) {
		this.searchSpaceSIB1 = searchSpaceSIB1;
	}

	public SearchSpaceId getSearchSpaceSIB1() {
		return searchSpaceSIB1;
	}

	public void setSearchSpaceOtherSystemInformation(SearchSpaceId searchSpaceOtherSystemInformation) {
		this.searchSpaceOtherSystemInformation = searchSpaceOtherSystemInformation;
	}

	public SearchSpaceId getSearchSpaceOtherSystemInformation() {
		return searchSpaceOtherSystemInformation;
	}

	public void setPagingSearchSpace(SearchSpaceId pagingSearchSpace) {
		this.pagingSearchSpace = pagingSearchSpace;
	}

	public SearchSpaceId getPagingSearchSpace() {
		return pagingSearchSpace;
	}

	public void setRaSearchSpace(SearchSpaceId raSearchSpace) {
		this.raSearchSpace = raSearchSpace;
	}

	public SearchSpaceId getRaSearchSpace() {
		return raSearchSpace;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (raSearchSpace != null) {
			codeLength += raSearchSpace.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (pagingSearchSpace != null) {
			codeLength += pagingSearchSpace.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (searchSpaceOtherSystemInformation != null) {
			codeLength += searchSpaceOtherSystemInformation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (searchSpaceSIB1 != null) {
			codeLength += searchSpaceSIB1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (commonSearchSpace != null) {
			codeLength += commonSearchSpace.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (searchSpaceZero != null) {
			codeLength += searchSpaceZero.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (commonControlResourceSet != null) {
			codeLength += commonControlResourceSet.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		if (controlResourceSetZero != null) {
			codeLength += controlResourceSetZero.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			controlResourceSetZero = new BerInteger();
			subCodeLength += controlResourceSetZero.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			commonControlResourceSet = new ControlResourceSet();
			subCodeLength += commonControlResourceSet.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			searchSpaceZero = new BerInteger();
			subCodeLength += searchSpaceZero.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			commonSearchSpace = new CommonSearchSpace();
			subCodeLength += commonSearchSpace.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			searchSpaceSIB1 = new SearchSpaceId();
			subCodeLength += searchSpaceSIB1.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			searchSpaceOtherSystemInformation = new SearchSpaceId();
			subCodeLength += searchSpaceOtherSystemInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			pagingSearchSpace = new SearchSpaceId();
			subCodeLength += pagingSearchSpace.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			raSearchSpace = new SearchSpaceId();
			subCodeLength += raSearchSpace.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (controlResourceSetZero != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("controlResourceSetZero: ").append(controlResourceSetZero);
			firstSelectedElement = false;
		}
		
		if (commonControlResourceSet != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("commonControlResourceSet: ");
			commonControlResourceSet.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (searchSpaceZero != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("searchSpaceZero: ").append(searchSpaceZero);
			firstSelectedElement = false;
		}
		
		if (commonSearchSpace != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("commonSearchSpace: ");
			commonSearchSpace.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (searchSpaceSIB1 != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("searchSpaceSIB1: ").append(searchSpaceSIB1);
			firstSelectedElement = false;
		}
		
		if (searchSpaceOtherSystemInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("searchSpaceOtherSystemInformation: ").append(searchSpaceOtherSystemInformation);
			firstSelectedElement = false;
		}
		
		if (pagingSearchSpace != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pagingSearchSpace: ").append(pagingSearchSpace);
			firstSelectedElement = false;
		}
		
		if (raSearchSpace != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("raSearchSpace: ").append(raSearchSpace);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

