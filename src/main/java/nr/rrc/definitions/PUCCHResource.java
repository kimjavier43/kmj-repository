/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PUCCHResource implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class Format implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private PUCCHFormat0 format0 = null;
		private PUCCHFormat1 format1 = null;
		private PUCCHFormat2 format2 = null;
		private PUCCHFormat3 format3 = null;
		private PUCCHFormat4 format4 = null;
		
		public Format() {
		}

		public Format(byte[] code) {
			this.code = code;
		}

		public void setFormat0(PUCCHFormat0 format0) {
			this.format0 = format0;
		}

		public PUCCHFormat0 getFormat0() {
			return format0;
		}

		public void setFormat1(PUCCHFormat1 format1) {
			this.format1 = format1;
		}

		public PUCCHFormat1 getFormat1() {
			return format1;
		}

		public void setFormat2(PUCCHFormat2 format2) {
			this.format2 = format2;
		}

		public PUCCHFormat2 getFormat2() {
			return format2;
		}

		public void setFormat3(PUCCHFormat3 format3) {
			this.format3 = format3;
		}

		public PUCCHFormat3 getFormat3() {
			return format3;
		}

		public void setFormat4(PUCCHFormat4 format4) {
			this.format4 = format4;
		}

		public PUCCHFormat4 getFormat4() {
			return format4;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (format4 != null) {
				codeLength += format4.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				reverseOS.write(0xA4);
				codeLength += 1;
				return codeLength;
			}
			
			if (format3 != null) {
				codeLength += format3.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
				return codeLength;
			}
			
			if (format2 != null) {
				codeLength += format2.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
				return codeLength;
			}
			
			if (format1 != null) {
				codeLength += format1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (format0 != null) {
				codeLength += format0.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				format0 = new PUCCHFormat0();
				codeLength += format0.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				format1 = new PUCCHFormat1();
				codeLength += format1.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				format2 = new PUCCHFormat2();
				codeLength += format2.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				format3 = new PUCCHFormat3();
				codeLength += format3.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				format4 = new PUCCHFormat4();
				codeLength += format4.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (format0 != null) {
				sb.append("format0: ");
				format0.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (format1 != null) {
				sb.append("format1: ");
				format1.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (format2 != null) {
				sb.append("format2: ");
				format2.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (format3 != null) {
				sb.append("format3: ");
				format3.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (format4 != null) {
				sb.append("format4: ");
				format4.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private PUCCHResourceId pucchResourceId = null;
	private PRBId startingPRB = null;
	private BerEnum intraSlotFrequencyHopping = null;
	private PRBId secondHopPRB = null;
	private Format format = null;
	
	public PUCCHResource() {
	}

	public PUCCHResource(byte[] code) {
		this.code = code;
	}

	public void setPucchResourceId(PUCCHResourceId pucchResourceId) {
		this.pucchResourceId = pucchResourceId;
	}

	public PUCCHResourceId getPucchResourceId() {
		return pucchResourceId;
	}

	public void setStartingPRB(PRBId startingPRB) {
		this.startingPRB = startingPRB;
	}

	public PRBId getStartingPRB() {
		return startingPRB;
	}

	public void setIntraSlotFrequencyHopping(BerEnum intraSlotFrequencyHopping) {
		this.intraSlotFrequencyHopping = intraSlotFrequencyHopping;
	}

	public BerEnum getIntraSlotFrequencyHopping() {
		return intraSlotFrequencyHopping;
	}

	public void setSecondHopPRB(PRBId secondHopPRB) {
		this.secondHopPRB = secondHopPRB;
	}

	public PRBId getSecondHopPRB() {
		return secondHopPRB;
	}

	public void setFormat(Format format) {
		this.format = format;
	}

	public Format getFormat() {
		return format;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		sublength = format.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
		reverseOS.write(0xA4);
		codeLength += 1;
		
		if (secondHopPRB != null) {
			codeLength += secondHopPRB.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (intraSlotFrequencyHopping != null) {
			codeLength += intraSlotFrequencyHopping.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		codeLength += startingPRB.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += pucchResourceId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			pucchResourceId = new PUCCHResourceId();
			subCodeLength += pucchResourceId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			startingPRB = new PRBId();
			subCodeLength += startingPRB.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			intraSlotFrequencyHopping = new BerEnum();
			subCodeLength += intraSlotFrequencyHopping.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			secondHopPRB = new PRBId();
			subCodeLength += secondHopPRB.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			subCodeLength += length.decode(is);
			format = new Format();
			subCodeLength += format.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (pucchResourceId != null) {
			sb.append("pucchResourceId: ").append(pucchResourceId);
		}
		else {
			sb.append("pucchResourceId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (startingPRB != null) {
			sb.append("startingPRB: ").append(startingPRB);
		}
		else {
			sb.append("startingPRB: <empty-required-field>");
		}
		
		if (intraSlotFrequencyHopping != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("intraSlotFrequencyHopping: ").append(intraSlotFrequencyHopping);
		}
		
		if (secondHopPRB != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("secondHopPRB: ").append(secondHopPRB);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (format != null) {
			sb.append("format: ");
			format.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("format: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

