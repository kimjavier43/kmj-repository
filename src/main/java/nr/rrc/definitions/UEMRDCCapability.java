/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class UEMRDCCapability implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class FeatureSetCombinations implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<FeatureSetCombination> seqOf = null;

		public FeatureSetCombinations() {
			seqOf = new ArrayList<FeatureSetCombination>();
		}

		public FeatureSetCombinations(byte[] code) {
			this.code = code;
		}

		public List<FeatureSetCombination> getFeatureSetCombination() {
			if (seqOf == null) {
				seqOf = new ArrayList<FeatureSetCombination>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				FeatureSetCombination element = new FeatureSetCombination();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<FeatureSetCombination> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class NonCriticalExtension implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		
		public NonCriticalExtension() {
		}

		public NonCriticalExtension(byte[] code) {
			this.code = code;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			return subCodeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private MeasParametersMRDC measParametersMRDC = null;
	private RFParametersMRDC rfParametersMRDC = null;
	private GeneralParametersMRDCXDDDiff generalParametersMRDC = null;
	private UEMRDCCapabilityAddXDDMode fddAddUEMRDCCapabilities = null;
	private UEMRDCCapabilityAddXDDMode tddAddUEMRDCCapabilities = null;
	private UEMRDCCapabilityAddFRXMode fr1AddUEMRDCCapabilities = null;
	private UEMRDCCapabilityAddFRXMode fr2AddUEMRDCCapabilities = null;
	private FeatureSetCombinations featureSetCombinations = null;
	private BerOctetString lateNonCriticalExtension = null;
	private NonCriticalExtension nonCriticalExtension = null;
	
	public UEMRDCCapability() {
	}

	public UEMRDCCapability(byte[] code) {
		this.code = code;
	}

	public void setMeasParametersMRDC(MeasParametersMRDC measParametersMRDC) {
		this.measParametersMRDC = measParametersMRDC;
	}

	public MeasParametersMRDC getMeasParametersMRDC() {
		return measParametersMRDC;
	}

	public void setRfParametersMRDC(RFParametersMRDC rfParametersMRDC) {
		this.rfParametersMRDC = rfParametersMRDC;
	}

	public RFParametersMRDC getRfParametersMRDC() {
		return rfParametersMRDC;
	}

	public void setGeneralParametersMRDC(GeneralParametersMRDCXDDDiff generalParametersMRDC) {
		this.generalParametersMRDC = generalParametersMRDC;
	}

	public GeneralParametersMRDCXDDDiff getGeneralParametersMRDC() {
		return generalParametersMRDC;
	}

	public void setFddAddUEMRDCCapabilities(UEMRDCCapabilityAddXDDMode fddAddUEMRDCCapabilities) {
		this.fddAddUEMRDCCapabilities = fddAddUEMRDCCapabilities;
	}

	public UEMRDCCapabilityAddXDDMode getFddAddUEMRDCCapabilities() {
		return fddAddUEMRDCCapabilities;
	}

	public void setTddAddUEMRDCCapabilities(UEMRDCCapabilityAddXDDMode tddAddUEMRDCCapabilities) {
		this.tddAddUEMRDCCapabilities = tddAddUEMRDCCapabilities;
	}

	public UEMRDCCapabilityAddXDDMode getTddAddUEMRDCCapabilities() {
		return tddAddUEMRDCCapabilities;
	}

	public void setFr1AddUEMRDCCapabilities(UEMRDCCapabilityAddFRXMode fr1AddUEMRDCCapabilities) {
		this.fr1AddUEMRDCCapabilities = fr1AddUEMRDCCapabilities;
	}

	public UEMRDCCapabilityAddFRXMode getFr1AddUEMRDCCapabilities() {
		return fr1AddUEMRDCCapabilities;
	}

	public void setFr2AddUEMRDCCapabilities(UEMRDCCapabilityAddFRXMode fr2AddUEMRDCCapabilities) {
		this.fr2AddUEMRDCCapabilities = fr2AddUEMRDCCapabilities;
	}

	public UEMRDCCapabilityAddFRXMode getFr2AddUEMRDCCapabilities() {
		return fr2AddUEMRDCCapabilities;
	}

	public void setFeatureSetCombinations(FeatureSetCombinations featureSetCombinations) {
		this.featureSetCombinations = featureSetCombinations;
	}

	public FeatureSetCombinations getFeatureSetCombinations() {
		return featureSetCombinations;
	}

	public void setLateNonCriticalExtension(BerOctetString lateNonCriticalExtension) {
		this.lateNonCriticalExtension = lateNonCriticalExtension;
	}

	public BerOctetString getLateNonCriticalExtension() {
		return lateNonCriticalExtension;
	}

	public void setNonCriticalExtension(NonCriticalExtension nonCriticalExtension) {
		this.nonCriticalExtension = nonCriticalExtension;
	}

	public NonCriticalExtension getNonCriticalExtension() {
		return nonCriticalExtension;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (nonCriticalExtension != null) {
			codeLength += nonCriticalExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (lateNonCriticalExtension != null) {
			codeLength += lateNonCriticalExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (featureSetCombinations != null) {
			codeLength += featureSetCombinations.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (fr2AddUEMRDCCapabilities != null) {
			codeLength += fr2AddUEMRDCCapabilities.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (fr1AddUEMRDCCapabilities != null) {
			codeLength += fr1AddUEMRDCCapabilities.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (tddAddUEMRDCCapabilities != null) {
			codeLength += tddAddUEMRDCCapabilities.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (fddAddUEMRDCCapabilities != null) {
			codeLength += fddAddUEMRDCCapabilities.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (generalParametersMRDC != null) {
			codeLength += generalParametersMRDC.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		codeLength += rfParametersMRDC.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		if (measParametersMRDC != null) {
			codeLength += measParametersMRDC.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			measParametersMRDC = new MeasParametersMRDC();
			subCodeLength += measParametersMRDC.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			rfParametersMRDC = new RFParametersMRDC();
			subCodeLength += rfParametersMRDC.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			generalParametersMRDC = new GeneralParametersMRDCXDDDiff();
			subCodeLength += generalParametersMRDC.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			fddAddUEMRDCCapabilities = new UEMRDCCapabilityAddXDDMode();
			subCodeLength += fddAddUEMRDCCapabilities.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			tddAddUEMRDCCapabilities = new UEMRDCCapabilityAddXDDMode();
			subCodeLength += tddAddUEMRDCCapabilities.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			fr1AddUEMRDCCapabilities = new UEMRDCCapabilityAddFRXMode();
			subCodeLength += fr1AddUEMRDCCapabilities.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			fr2AddUEMRDCCapabilities = new UEMRDCCapabilityAddFRXMode();
			subCodeLength += fr2AddUEMRDCCapabilities.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			featureSetCombinations = new FeatureSetCombinations();
			subCodeLength += featureSetCombinations.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			lateNonCriticalExtension = new BerOctetString();
			subCodeLength += lateNonCriticalExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			nonCriticalExtension = new NonCriticalExtension();
			subCodeLength += nonCriticalExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (measParametersMRDC != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("measParametersMRDC: ");
			measParametersMRDC.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rfParametersMRDC != null) {
			sb.append("rfParametersMRDC: ");
			rfParametersMRDC.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("rfParametersMRDC: <empty-required-field>");
		}
		
		if (generalParametersMRDC != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("generalParametersMRDC: ");
			generalParametersMRDC.appendAsString(sb, indentLevel + 1);
		}
		
		if (fddAddUEMRDCCapabilities != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fddAddUEMRDCCapabilities: ");
			fddAddUEMRDCCapabilities.appendAsString(sb, indentLevel + 1);
		}
		
		if (tddAddUEMRDCCapabilities != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tddAddUEMRDCCapabilities: ");
			tddAddUEMRDCCapabilities.appendAsString(sb, indentLevel + 1);
		}
		
		if (fr1AddUEMRDCCapabilities != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fr1AddUEMRDCCapabilities: ");
			fr1AddUEMRDCCapabilities.appendAsString(sb, indentLevel + 1);
		}
		
		if (fr2AddUEMRDCCapabilities != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fr2AddUEMRDCCapabilities: ");
			fr2AddUEMRDCCapabilities.appendAsString(sb, indentLevel + 1);
		}
		
		if (featureSetCombinations != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("featureSetCombinations: ");
			featureSetCombinations.appendAsString(sb, indentLevel + 1);
		}
		
		if (lateNonCriticalExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lateNonCriticalExtension: ").append(lateNonCriticalExtension);
		}
		
		if (nonCriticalExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonCriticalExtension: ");
			nonCriticalExtension.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

