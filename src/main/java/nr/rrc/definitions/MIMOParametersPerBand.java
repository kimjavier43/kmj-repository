/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class MIMOParametersPerBand implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class TciStatePDSCH implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum maxNumberConfiguredTCIstatesPerCC = null;
		private BerEnum maxNumberActiveTCIPerBWP = null;
		
		public TciStatePDSCH() {
		}

		public TciStatePDSCH(byte[] code) {
			this.code = code;
		}

		public void setMaxNumberConfiguredTCIstatesPerCC(BerEnum maxNumberConfiguredTCIstatesPerCC) {
			this.maxNumberConfiguredTCIstatesPerCC = maxNumberConfiguredTCIstatesPerCC;
		}

		public BerEnum getMaxNumberConfiguredTCIstatesPerCC() {
			return maxNumberConfiguredTCIstatesPerCC;
		}

		public void setMaxNumberActiveTCIPerBWP(BerEnum maxNumberActiveTCIPerBWP) {
			this.maxNumberActiveTCIPerBWP = maxNumberActiveTCIPerBWP;
		}

		public BerEnum getMaxNumberActiveTCIPerBWP() {
			return maxNumberActiveTCIPerBWP;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (maxNumberActiveTCIPerBWP != null) {
				codeLength += maxNumberActiveTCIPerBWP.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (maxNumberConfiguredTCIstatesPerCC != null) {
				codeLength += maxNumberConfiguredTCIstatesPerCC.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				maxNumberConfiguredTCIstatesPerCC = new BerEnum();
				subCodeLength += maxNumberConfiguredTCIstatesPerCC.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				maxNumberActiveTCIPerBWP = new BerEnum();
				subCodeLength += maxNumberActiveTCIPerBWP.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (maxNumberConfiguredTCIstatesPerCC != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("maxNumberConfiguredTCIstatesPerCC: ").append(maxNumberConfiguredTCIstatesPerCC);
				firstSelectedElement = false;
			}
			
			if (maxNumberActiveTCIPerBWP != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("maxNumberActiveTCIPerBWP: ").append(maxNumberActiveTCIPerBWP);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class MaxNumberRxTxBeamSwitchDL implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum scs15kHz = null;
		private BerEnum scs30kHz = null;
		private BerEnum scs60kHz = null;
		private BerEnum scs120kHz = null;
		private BerEnum scs240kHz = null;
		
		public MaxNumberRxTxBeamSwitchDL() {
		}

		public MaxNumberRxTxBeamSwitchDL(byte[] code) {
			this.code = code;
		}

		public void setScs15kHz(BerEnum scs15kHz) {
			this.scs15kHz = scs15kHz;
		}

		public BerEnum getScs15kHz() {
			return scs15kHz;
		}

		public void setScs30kHz(BerEnum scs30kHz) {
			this.scs30kHz = scs30kHz;
		}

		public BerEnum getScs30kHz() {
			return scs30kHz;
		}

		public void setScs60kHz(BerEnum scs60kHz) {
			this.scs60kHz = scs60kHz;
		}

		public BerEnum getScs60kHz() {
			return scs60kHz;
		}

		public void setScs120kHz(BerEnum scs120kHz) {
			this.scs120kHz = scs120kHz;
		}

		public BerEnum getScs120kHz() {
			return scs120kHz;
		}

		public void setScs240kHz(BerEnum scs240kHz) {
			this.scs240kHz = scs240kHz;
		}

		public BerEnum getScs240kHz() {
			return scs240kHz;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (scs240kHz != null) {
				codeLength += scs240kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
			}
			
			if (scs120kHz != null) {
				codeLength += scs120kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
			}
			
			if (scs60kHz != null) {
				codeLength += scs60kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
			}
			
			if (scs30kHz != null) {
				codeLength += scs30kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (scs15kHz != null) {
				codeLength += scs15kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				scs15kHz = new BerEnum();
				subCodeLength += scs15kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				scs30kHz = new BerEnum();
				subCodeLength += scs30kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				scs60kHz = new BerEnum();
				subCodeLength += scs60kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				scs120kHz = new BerEnum();
				subCodeLength += scs120kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				scs240kHz = new BerEnum();
				subCodeLength += scs240kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (scs15kHz != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs15kHz: ").append(scs15kHz);
				firstSelectedElement = false;
			}
			
			if (scs30kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs30kHz: ").append(scs30kHz);
				firstSelectedElement = false;
			}
			
			if (scs60kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs60kHz: ").append(scs60kHz);
				firstSelectedElement = false;
			}
			
			if (scs120kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs120kHz: ").append(scs120kHz);
				firstSelectedElement = false;
			}
			
			if (scs240kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs240kHz: ").append(scs240kHz);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class UplinkBeamManagement implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum maxNumberSRSResourcePerSet = null;
		private BerInteger maxNumberSRSResourceSet = null;
		
		public UplinkBeamManagement() {
		}

		public UplinkBeamManagement(byte[] code) {
			this.code = code;
		}

		public void setMaxNumberSRSResourcePerSet(BerEnum maxNumberSRSResourcePerSet) {
			this.maxNumberSRSResourcePerSet = maxNumberSRSResourcePerSet;
		}

		public BerEnum getMaxNumberSRSResourcePerSet() {
			return maxNumberSRSResourcePerSet;
		}

		public void setMaxNumberSRSResourceSet(BerInteger maxNumberSRSResourceSet) {
			this.maxNumberSRSResourceSet = maxNumberSRSResourceSet;
		}

		public BerInteger getMaxNumberSRSResourceSet() {
			return maxNumberSRSResourceSet;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += maxNumberSRSResourceSet.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += maxNumberSRSResourcePerSet.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				maxNumberSRSResourcePerSet = new BerEnum();
				subCodeLength += maxNumberSRSResourcePerSet.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				maxNumberSRSResourceSet = new BerInteger();
				subCodeLength += maxNumberSRSResourceSet.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (maxNumberSRSResourcePerSet != null) {
				sb.append("maxNumberSRSResourcePerSet: ").append(maxNumberSRSResourcePerSet);
			}
			else {
				sb.append("maxNumberSRSResourcePerSet: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (maxNumberSRSResourceSet != null) {
				sb.append("maxNumberSRSResourceSet: ").append(maxNumberSRSResourceSet);
			}
			else {
				sb.append("maxNumberSRSResourceSet: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class BeamReportTiming implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum scs15kHz = null;
		private BerEnum scs30kHz = null;
		private BerEnum scs60kHz = null;
		private BerEnum scs120kHz = null;
		
		public BeamReportTiming() {
		}

		public BeamReportTiming(byte[] code) {
			this.code = code;
		}

		public void setScs15kHz(BerEnum scs15kHz) {
			this.scs15kHz = scs15kHz;
		}

		public BerEnum getScs15kHz() {
			return scs15kHz;
		}

		public void setScs30kHz(BerEnum scs30kHz) {
			this.scs30kHz = scs30kHz;
		}

		public BerEnum getScs30kHz() {
			return scs30kHz;
		}

		public void setScs60kHz(BerEnum scs60kHz) {
			this.scs60kHz = scs60kHz;
		}

		public BerEnum getScs60kHz() {
			return scs60kHz;
		}

		public void setScs120kHz(BerEnum scs120kHz) {
			this.scs120kHz = scs120kHz;
		}

		public BerEnum getScs120kHz() {
			return scs120kHz;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (scs120kHz != null) {
				codeLength += scs120kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
			}
			
			if (scs60kHz != null) {
				codeLength += scs60kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
			}
			
			if (scs30kHz != null) {
				codeLength += scs30kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (scs15kHz != null) {
				codeLength += scs15kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				scs15kHz = new BerEnum();
				subCodeLength += scs15kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				scs30kHz = new BerEnum();
				subCodeLength += scs30kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				scs60kHz = new BerEnum();
				subCodeLength += scs60kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				scs120kHz = new BerEnum();
				subCodeLength += scs120kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (scs15kHz != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs15kHz: ").append(scs15kHz);
				firstSelectedElement = false;
			}
			
			if (scs30kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs30kHz: ").append(scs30kHz);
				firstSelectedElement = false;
			}
			
			if (scs60kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs60kHz: ").append(scs60kHz);
				firstSelectedElement = false;
			}
			
			if (scs120kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs120kHz: ").append(scs120kHz);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PtrsDensityRecommendationSetDL implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private PTRSDensityRecommendationDL scs15kHz = null;
		private PTRSDensityRecommendationDL scs30kHz = null;
		private PTRSDensityRecommendationDL scs60kHz = null;
		private PTRSDensityRecommendationDL scs120kHz = null;
		
		public PtrsDensityRecommendationSetDL() {
		}

		public PtrsDensityRecommendationSetDL(byte[] code) {
			this.code = code;
		}

		public void setScs15kHz(PTRSDensityRecommendationDL scs15kHz) {
			this.scs15kHz = scs15kHz;
		}

		public PTRSDensityRecommendationDL getScs15kHz() {
			return scs15kHz;
		}

		public void setScs30kHz(PTRSDensityRecommendationDL scs30kHz) {
			this.scs30kHz = scs30kHz;
		}

		public PTRSDensityRecommendationDL getScs30kHz() {
			return scs30kHz;
		}

		public void setScs60kHz(PTRSDensityRecommendationDL scs60kHz) {
			this.scs60kHz = scs60kHz;
		}

		public PTRSDensityRecommendationDL getScs60kHz() {
			return scs60kHz;
		}

		public void setScs120kHz(PTRSDensityRecommendationDL scs120kHz) {
			this.scs120kHz = scs120kHz;
		}

		public PTRSDensityRecommendationDL getScs120kHz() {
			return scs120kHz;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (scs120kHz != null) {
				codeLength += scs120kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
			}
			
			if (scs60kHz != null) {
				codeLength += scs60kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
			}
			
			if (scs30kHz != null) {
				codeLength += scs30kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
			}
			
			if (scs15kHz != null) {
				codeLength += scs15kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				scs15kHz = new PTRSDensityRecommendationDL();
				subCodeLength += scs15kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				scs30kHz = new PTRSDensityRecommendationDL();
				subCodeLength += scs30kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				scs60kHz = new PTRSDensityRecommendationDL();
				subCodeLength += scs60kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				scs120kHz = new PTRSDensityRecommendationDL();
				subCodeLength += scs120kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (scs15kHz != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs15kHz: ");
				scs15kHz.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			if (scs30kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs30kHz: ");
				scs30kHz.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			if (scs60kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs60kHz: ");
				scs60kHz.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			if (scs120kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs120kHz: ");
				scs120kHz.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PtrsDensityRecommendationSetUL implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private PTRSDensityRecommendationUL scs15kHz = null;
		private PTRSDensityRecommendationUL scs30kHz = null;
		private PTRSDensityRecommendationUL scs60kHz = null;
		private PTRSDensityRecommendationUL scs120kHz = null;
		
		public PtrsDensityRecommendationSetUL() {
		}

		public PtrsDensityRecommendationSetUL(byte[] code) {
			this.code = code;
		}

		public void setScs15kHz(PTRSDensityRecommendationUL scs15kHz) {
			this.scs15kHz = scs15kHz;
		}

		public PTRSDensityRecommendationUL getScs15kHz() {
			return scs15kHz;
		}

		public void setScs30kHz(PTRSDensityRecommendationUL scs30kHz) {
			this.scs30kHz = scs30kHz;
		}

		public PTRSDensityRecommendationUL getScs30kHz() {
			return scs30kHz;
		}

		public void setScs60kHz(PTRSDensityRecommendationUL scs60kHz) {
			this.scs60kHz = scs60kHz;
		}

		public PTRSDensityRecommendationUL getScs60kHz() {
			return scs60kHz;
		}

		public void setScs120kHz(PTRSDensityRecommendationUL scs120kHz) {
			this.scs120kHz = scs120kHz;
		}

		public PTRSDensityRecommendationUL getScs120kHz() {
			return scs120kHz;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (scs120kHz != null) {
				codeLength += scs120kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
			}
			
			if (scs60kHz != null) {
				codeLength += scs60kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
			}
			
			if (scs30kHz != null) {
				codeLength += scs30kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
			}
			
			if (scs15kHz != null) {
				codeLength += scs15kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				scs15kHz = new PTRSDensityRecommendationUL();
				subCodeLength += scs15kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				scs30kHz = new PTRSDensityRecommendationUL();
				subCodeLength += scs30kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				scs60kHz = new PTRSDensityRecommendationUL();
				subCodeLength += scs60kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				scs120kHz = new PTRSDensityRecommendationUL();
				subCodeLength += scs120kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (scs15kHz != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs15kHz: ");
				scs15kHz.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			if (scs30kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs30kHz: ");
				scs30kHz.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			if (scs60kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs60kHz: ");
				scs60kHz.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			if (scs120kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs120kHz: ");
				scs120kHz.appendAsString(sb, indentLevel + 1);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private TciStatePDSCH tciStatePDSCH = null;
	private BerEnum additionalActiveTCIStatePDCCH = null;
	private BerEnum puschTransCoherence = null;
	private BerEnum beamCorrespondence = null;
	private BerEnum periodicBeamReport = null;
	private BerEnum aperiodicBeamReport = null;
	private BerEnum spBeamReportPUCCH = null;
	private BerEnum spBeamReportPUSCH = null;
	private BeamManagementSSBCSIRS beamManagementSSBCSIRS = null;
	private BerInteger maxNumberRxBeam = null;
	private MaxNumberRxTxBeamSwitchDL maxNumberRxTxBeamSwitchDL = null;
	private BerEnum maxNumberNonGroupBeamReporting = null;
	private BerEnum groupBeamReporting = null;
	private UplinkBeamManagement uplinkBeamManagement = null;
	private BerInteger maxNumberCSIRSBFR = null;
	private BerInteger maxNumberSSBBFR = null;
	private BerInteger maxNumberCSIRSSSBBFR = null;
	private BerEnum twoPortsPTRSDL = null;
	private BerEnum twoPortsPTRSUL = null;
	private SRSResources supportedSRSResources = null;
	private SRSTxSwitch srsTxSwitch = null;
	private BerInteger maxNumberSimultaneousSRSPerCC = null;
	private BeamReportTiming beamReportTiming = null;
	private PtrsDensityRecommendationSetDL ptrsDensityRecommendationSetDL = null;
	private PtrsDensityRecommendationSetUL ptrsDensityRecommendationSetUL = null;
	private CSIRSForTracking csiRSForTracking = null;
	private BerEnum aperiodicTRS = null;
	
	public MIMOParametersPerBand() {
	}

	public MIMOParametersPerBand(byte[] code) {
		this.code = code;
	}

	public void setTciStatePDSCH(TciStatePDSCH tciStatePDSCH) {
		this.tciStatePDSCH = tciStatePDSCH;
	}

	public TciStatePDSCH getTciStatePDSCH() {
		return tciStatePDSCH;
	}

	public void setAdditionalActiveTCIStatePDCCH(BerEnum additionalActiveTCIStatePDCCH) {
		this.additionalActiveTCIStatePDCCH = additionalActiveTCIStatePDCCH;
	}

	public BerEnum getAdditionalActiveTCIStatePDCCH() {
		return additionalActiveTCIStatePDCCH;
	}

	public void setPuschTransCoherence(BerEnum puschTransCoherence) {
		this.puschTransCoherence = puschTransCoherence;
	}

	public BerEnum getPuschTransCoherence() {
		return puschTransCoherence;
	}

	public void setBeamCorrespondence(BerEnum beamCorrespondence) {
		this.beamCorrespondence = beamCorrespondence;
	}

	public BerEnum getBeamCorrespondence() {
		return beamCorrespondence;
	}

	public void setPeriodicBeamReport(BerEnum periodicBeamReport) {
		this.periodicBeamReport = periodicBeamReport;
	}

	public BerEnum getPeriodicBeamReport() {
		return periodicBeamReport;
	}

	public void setAperiodicBeamReport(BerEnum aperiodicBeamReport) {
		this.aperiodicBeamReport = aperiodicBeamReport;
	}

	public BerEnum getAperiodicBeamReport() {
		return aperiodicBeamReport;
	}

	public void setSpBeamReportPUCCH(BerEnum spBeamReportPUCCH) {
		this.spBeamReportPUCCH = spBeamReportPUCCH;
	}

	public BerEnum getSpBeamReportPUCCH() {
		return spBeamReportPUCCH;
	}

	public void setSpBeamReportPUSCH(BerEnum spBeamReportPUSCH) {
		this.spBeamReportPUSCH = spBeamReportPUSCH;
	}

	public BerEnum getSpBeamReportPUSCH() {
		return spBeamReportPUSCH;
	}

	public void setBeamManagementSSBCSIRS(BeamManagementSSBCSIRS beamManagementSSBCSIRS) {
		this.beamManagementSSBCSIRS = beamManagementSSBCSIRS;
	}

	public BeamManagementSSBCSIRS getBeamManagementSSBCSIRS() {
		return beamManagementSSBCSIRS;
	}

	public void setMaxNumberRxBeam(BerInteger maxNumberRxBeam) {
		this.maxNumberRxBeam = maxNumberRxBeam;
	}

	public BerInteger getMaxNumberRxBeam() {
		return maxNumberRxBeam;
	}

	public void setMaxNumberRxTxBeamSwitchDL(MaxNumberRxTxBeamSwitchDL maxNumberRxTxBeamSwitchDL) {
		this.maxNumberRxTxBeamSwitchDL = maxNumberRxTxBeamSwitchDL;
	}

	public MaxNumberRxTxBeamSwitchDL getMaxNumberRxTxBeamSwitchDL() {
		return maxNumberRxTxBeamSwitchDL;
	}

	public void setMaxNumberNonGroupBeamReporting(BerEnum maxNumberNonGroupBeamReporting) {
		this.maxNumberNonGroupBeamReporting = maxNumberNonGroupBeamReporting;
	}

	public BerEnum getMaxNumberNonGroupBeamReporting() {
		return maxNumberNonGroupBeamReporting;
	}

	public void setGroupBeamReporting(BerEnum groupBeamReporting) {
		this.groupBeamReporting = groupBeamReporting;
	}

	public BerEnum getGroupBeamReporting() {
		return groupBeamReporting;
	}

	public void setUplinkBeamManagement(UplinkBeamManagement uplinkBeamManagement) {
		this.uplinkBeamManagement = uplinkBeamManagement;
	}

	public UplinkBeamManagement getUplinkBeamManagement() {
		return uplinkBeamManagement;
	}

	public void setMaxNumberCSIRSBFR(BerInteger maxNumberCSIRSBFR) {
		this.maxNumberCSIRSBFR = maxNumberCSIRSBFR;
	}

	public BerInteger getMaxNumberCSIRSBFR() {
		return maxNumberCSIRSBFR;
	}

	public void setMaxNumberSSBBFR(BerInteger maxNumberSSBBFR) {
		this.maxNumberSSBBFR = maxNumberSSBBFR;
	}

	public BerInteger getMaxNumberSSBBFR() {
		return maxNumberSSBBFR;
	}

	public void setMaxNumberCSIRSSSBBFR(BerInteger maxNumberCSIRSSSBBFR) {
		this.maxNumberCSIRSSSBBFR = maxNumberCSIRSSSBBFR;
	}

	public BerInteger getMaxNumberCSIRSSSBBFR() {
		return maxNumberCSIRSSSBBFR;
	}

	public void setTwoPortsPTRSDL(BerEnum twoPortsPTRSDL) {
		this.twoPortsPTRSDL = twoPortsPTRSDL;
	}

	public BerEnum getTwoPortsPTRSDL() {
		return twoPortsPTRSDL;
	}

	public void setTwoPortsPTRSUL(BerEnum twoPortsPTRSUL) {
		this.twoPortsPTRSUL = twoPortsPTRSUL;
	}

	public BerEnum getTwoPortsPTRSUL() {
		return twoPortsPTRSUL;
	}

	public void setSupportedSRSResources(SRSResources supportedSRSResources) {
		this.supportedSRSResources = supportedSRSResources;
	}

	public SRSResources getSupportedSRSResources() {
		return supportedSRSResources;
	}

	public void setSrsTxSwitch(SRSTxSwitch srsTxSwitch) {
		this.srsTxSwitch = srsTxSwitch;
	}

	public SRSTxSwitch getSrsTxSwitch() {
		return srsTxSwitch;
	}

	public void setMaxNumberSimultaneousSRSPerCC(BerInteger maxNumberSimultaneousSRSPerCC) {
		this.maxNumberSimultaneousSRSPerCC = maxNumberSimultaneousSRSPerCC;
	}

	public BerInteger getMaxNumberSimultaneousSRSPerCC() {
		return maxNumberSimultaneousSRSPerCC;
	}

	public void setBeamReportTiming(BeamReportTiming beamReportTiming) {
		this.beamReportTiming = beamReportTiming;
	}

	public BeamReportTiming getBeamReportTiming() {
		return beamReportTiming;
	}

	public void setPtrsDensityRecommendationSetDL(PtrsDensityRecommendationSetDL ptrsDensityRecommendationSetDL) {
		this.ptrsDensityRecommendationSetDL = ptrsDensityRecommendationSetDL;
	}

	public PtrsDensityRecommendationSetDL getPtrsDensityRecommendationSetDL() {
		return ptrsDensityRecommendationSetDL;
	}

	public void setPtrsDensityRecommendationSetUL(PtrsDensityRecommendationSetUL ptrsDensityRecommendationSetUL) {
		this.ptrsDensityRecommendationSetUL = ptrsDensityRecommendationSetUL;
	}

	public PtrsDensityRecommendationSetUL getPtrsDensityRecommendationSetUL() {
		return ptrsDensityRecommendationSetUL;
	}

	public void setCsiRSForTracking(CSIRSForTracking csiRSForTracking) {
		this.csiRSForTracking = csiRSForTracking;
	}

	public CSIRSForTracking getCsiRSForTracking() {
		return csiRSForTracking;
	}

	public void setAperiodicTRS(BerEnum aperiodicTRS) {
		this.aperiodicTRS = aperiodicTRS;
	}

	public BerEnum getAperiodicTRS() {
		return aperiodicTRS;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (aperiodicTRS != null) {
			codeLength += aperiodicTRS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 26
			reverseOS.write(0x9A);
			codeLength += 1;
		}
		
		if (csiRSForTracking != null) {
			codeLength += csiRSForTracking.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 25
			reverseOS.write(0xB9);
			codeLength += 1;
		}
		
		if (ptrsDensityRecommendationSetUL != null) {
			codeLength += ptrsDensityRecommendationSetUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
			reverseOS.write(0xB8);
			codeLength += 1;
		}
		
		if (ptrsDensityRecommendationSetDL != null) {
			codeLength += ptrsDensityRecommendationSetDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			reverseOS.write(0xB7);
			codeLength += 1;
		}
		
		if (beamReportTiming != null) {
			codeLength += beamReportTiming.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
			reverseOS.write(0xB6);
			codeLength += 1;
		}
		
		if (maxNumberSimultaneousSRSPerCC != null) {
			codeLength += maxNumberSimultaneousSRSPerCC.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			reverseOS.write(0x95);
			codeLength += 1;
		}
		
		if (srsTxSwitch != null) {
			codeLength += srsTxSwitch.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
		}
		
		if (supportedSRSResources != null) {
			codeLength += supportedSRSResources.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			reverseOS.write(0xB3);
			codeLength += 1;
		}
		
		if (twoPortsPTRSUL != null) {
			codeLength += twoPortsPTRSUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			reverseOS.write(0x92);
			codeLength += 1;
		}
		
		if (twoPortsPTRSDL != null) {
			codeLength += twoPortsPTRSDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			reverseOS.write(0x91);
			codeLength += 1;
		}
		
		if (maxNumberCSIRSSSBBFR != null) {
			codeLength += maxNumberCSIRSSSBBFR.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			reverseOS.write(0x90);
			codeLength += 1;
		}
		
		if (maxNumberSSBBFR != null) {
			codeLength += maxNumberSSBBFR.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		if (maxNumberCSIRSBFR != null) {
			codeLength += maxNumberCSIRSBFR.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		if (uplinkBeamManagement != null) {
			codeLength += uplinkBeamManagement.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			reverseOS.write(0xAD);
			codeLength += 1;
		}
		
		if (groupBeamReporting != null) {
			codeLength += groupBeamReporting.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (maxNumberNonGroupBeamReporting != null) {
			codeLength += maxNumberNonGroupBeamReporting.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
		}
		
		if (maxNumberRxTxBeamSwitchDL != null) {
			codeLength += maxNumberRxTxBeamSwitchDL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (maxNumberRxBeam != null) {
			codeLength += maxNumberRxBeam.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (beamManagementSSBCSIRS != null) {
			codeLength += beamManagementSSBCSIRS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (spBeamReportPUSCH != null) {
			codeLength += spBeamReportPUSCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (spBeamReportPUCCH != null) {
			codeLength += spBeamReportPUCCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (aperiodicBeamReport != null) {
			codeLength += aperiodicBeamReport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (periodicBeamReport != null) {
			codeLength += periodicBeamReport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (beamCorrespondence != null) {
			codeLength += beamCorrespondence.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (puschTransCoherence != null) {
			codeLength += puschTransCoherence.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (additionalActiveTCIStatePDCCH != null) {
			codeLength += additionalActiveTCIStatePDCCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		if (tciStatePDSCH != null) {
			codeLength += tciStatePDSCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			tciStatePDSCH = new TciStatePDSCH();
			subCodeLength += tciStatePDSCH.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			additionalActiveTCIStatePDCCH = new BerEnum();
			subCodeLength += additionalActiveTCIStatePDCCH.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			puschTransCoherence = new BerEnum();
			subCodeLength += puschTransCoherence.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			beamCorrespondence = new BerEnum();
			subCodeLength += beamCorrespondence.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			periodicBeamReport = new BerEnum();
			subCodeLength += periodicBeamReport.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			aperiodicBeamReport = new BerEnum();
			subCodeLength += aperiodicBeamReport.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			spBeamReportPUCCH = new BerEnum();
			subCodeLength += spBeamReportPUCCH.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			spBeamReportPUSCH = new BerEnum();
			subCodeLength += spBeamReportPUSCH.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			beamManagementSSBCSIRS = new BeamManagementSSBCSIRS();
			subCodeLength += beamManagementSSBCSIRS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			maxNumberRxBeam = new BerInteger();
			subCodeLength += maxNumberRxBeam.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			maxNumberRxTxBeamSwitchDL = new MaxNumberRxTxBeamSwitchDL();
			subCodeLength += maxNumberRxTxBeamSwitchDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			maxNumberNonGroupBeamReporting = new BerEnum();
			subCodeLength += maxNumberNonGroupBeamReporting.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			groupBeamReporting = new BerEnum();
			subCodeLength += groupBeamReporting.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			uplinkBeamManagement = new UplinkBeamManagement();
			subCodeLength += uplinkBeamManagement.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			maxNumberCSIRSBFR = new BerInteger();
			subCodeLength += maxNumberCSIRSBFR.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			maxNumberSSBBFR = new BerInteger();
			subCodeLength += maxNumberSSBBFR.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			maxNumberCSIRSSSBBFR = new BerInteger();
			subCodeLength += maxNumberCSIRSSSBBFR.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			twoPortsPTRSDL = new BerEnum();
			subCodeLength += twoPortsPTRSDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			twoPortsPTRSUL = new BerEnum();
			subCodeLength += twoPortsPTRSUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			supportedSRSResources = new SRSResources();
			subCodeLength += supportedSRSResources.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			srsTxSwitch = new SRSTxSwitch();
			subCodeLength += srsTxSwitch.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
			maxNumberSimultaneousSRSPerCC = new BerInteger();
			subCodeLength += maxNumberSimultaneousSRSPerCC.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			beamReportTiming = new BeamReportTiming();
			subCodeLength += beamReportTiming.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			ptrsDensityRecommendationSetDL = new PtrsDensityRecommendationSetDL();
			subCodeLength += ptrsDensityRecommendationSetDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
			ptrsDensityRecommendationSetUL = new PtrsDensityRecommendationSetUL();
			subCodeLength += ptrsDensityRecommendationSetUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 25)) {
			csiRSForTracking = new CSIRSForTracking();
			subCodeLength += csiRSForTracking.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 26)) {
			aperiodicTRS = new BerEnum();
			subCodeLength += aperiodicTRS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (tciStatePDSCH != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tciStatePDSCH: ");
			tciStatePDSCH.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (additionalActiveTCIStatePDCCH != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("additionalActiveTCIStatePDCCH: ").append(additionalActiveTCIStatePDCCH);
			firstSelectedElement = false;
		}
		
		if (puschTransCoherence != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("puschTransCoherence: ").append(puschTransCoherence);
			firstSelectedElement = false;
		}
		
		if (beamCorrespondence != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("beamCorrespondence: ").append(beamCorrespondence);
			firstSelectedElement = false;
		}
		
		if (periodicBeamReport != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("periodicBeamReport: ").append(periodicBeamReport);
			firstSelectedElement = false;
		}
		
		if (aperiodicBeamReport != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aperiodicBeamReport: ").append(aperiodicBeamReport);
			firstSelectedElement = false;
		}
		
		if (spBeamReportPUCCH != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("spBeamReportPUCCH: ").append(spBeamReportPUCCH);
			firstSelectedElement = false;
		}
		
		if (spBeamReportPUSCH != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("spBeamReportPUSCH: ").append(spBeamReportPUSCH);
			firstSelectedElement = false;
		}
		
		if (beamManagementSSBCSIRS != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("beamManagementSSBCSIRS: ");
			beamManagementSSBCSIRS.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (maxNumberRxBeam != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNumberRxBeam: ").append(maxNumberRxBeam);
			firstSelectedElement = false;
		}
		
		if (maxNumberRxTxBeamSwitchDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNumberRxTxBeamSwitchDL: ");
			maxNumberRxTxBeamSwitchDL.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (maxNumberNonGroupBeamReporting != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNumberNonGroupBeamReporting: ").append(maxNumberNonGroupBeamReporting);
			firstSelectedElement = false;
		}
		
		if (groupBeamReporting != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("groupBeamReporting: ").append(groupBeamReporting);
			firstSelectedElement = false;
		}
		
		if (uplinkBeamManagement != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uplinkBeamManagement: ");
			uplinkBeamManagement.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (maxNumberCSIRSBFR != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNumberCSIRSBFR: ").append(maxNumberCSIRSBFR);
			firstSelectedElement = false;
		}
		
		if (maxNumberSSBBFR != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNumberSSBBFR: ").append(maxNumberSSBBFR);
			firstSelectedElement = false;
		}
		
		if (maxNumberCSIRSSSBBFR != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNumberCSIRSSSBBFR: ").append(maxNumberCSIRSSSBBFR);
			firstSelectedElement = false;
		}
		
		if (twoPortsPTRSDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("twoPortsPTRSDL: ").append(twoPortsPTRSDL);
			firstSelectedElement = false;
		}
		
		if (twoPortsPTRSUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("twoPortsPTRSUL: ").append(twoPortsPTRSUL);
			firstSelectedElement = false;
		}
		
		if (supportedSRSResources != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supportedSRSResources: ");
			supportedSRSResources.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (srsTxSwitch != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("srsTxSwitch: ");
			srsTxSwitch.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (maxNumberSimultaneousSRSPerCC != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNumberSimultaneousSRSPerCC: ").append(maxNumberSimultaneousSRSPerCC);
			firstSelectedElement = false;
		}
		
		if (beamReportTiming != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("beamReportTiming: ");
			beamReportTiming.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (ptrsDensityRecommendationSetDL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ptrsDensityRecommendationSetDL: ");
			ptrsDensityRecommendationSetDL.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (ptrsDensityRecommendationSetUL != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ptrsDensityRecommendationSetUL: ");
			ptrsDensityRecommendationSetUL.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (csiRSForTracking != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("csiRSForTracking: ");
			csiRSForTracking.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (aperiodicTRS != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aperiodicTRS: ").append(aperiodicTRS);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

