/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SIB1 implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SsbPositionsInBurst implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerBitString inOneGroup = null;
		private BerBitString groupPresence = null;
		
		public SsbPositionsInBurst() {
		}

		public SsbPositionsInBurst(byte[] code) {
			this.code = code;
		}

		public void setInOneGroup(BerBitString inOneGroup) {
			this.inOneGroup = inOneGroup;
		}

		public BerBitString getInOneGroup() {
			return inOneGroup;
		}

		public void setGroupPresence(BerBitString groupPresence) {
			this.groupPresence = groupPresence;
		}

		public BerBitString getGroupPresence() {
			return groupPresence;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (groupPresence != null) {
				codeLength += groupPresence.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			codeLength += inOneGroup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				inOneGroup = new BerBitString();
				subCodeLength += inOneGroup.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				groupPresence = new BerBitString();
				subCodeLength += groupPresence.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (inOneGroup != null) {
				sb.append("inOneGroup: ").append(inOneGroup);
			}
			else {
				sb.append("inOneGroup: <empty-required-field>");
			}
			
			if (groupPresence != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("groupPresence: ").append(groupPresence);
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class SupplementaryUplink implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private UplinkConfigCommon uplinkConfigCommon = null;
		
		public SupplementaryUplink() {
		}

		public SupplementaryUplink(byte[] code) {
			this.code = code;
		}

		public void setUplinkConfigCommon(UplinkConfigCommon uplinkConfigCommon) {
			this.uplinkConfigCommon = uplinkConfigCommon;
		}

		public UplinkConfigCommon getUplinkConfigCommon() {
			return uplinkConfigCommon;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (uplinkConfigCommon != null) {
				codeLength += uplinkConfigCommon.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				uplinkConfigCommon = new UplinkConfigCommon();
				subCodeLength += uplinkConfigCommon.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			if (uplinkConfigCommon != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("uplinkConfigCommon: ");
				uplinkConfigCommon.appendAsString(sb, indentLevel + 1);
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class NonCriticalExtension implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		
		public NonCriticalExtension() {
		}

		public NonCriticalExtension(byte[] code) {
			this.code = code;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			return subCodeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum frequencyOffsetSSB = null;
	private SsbPositionsInBurst ssbPositionsInBurst = null;
	private BerEnum ssbPeriodicityServingCell = null;
	private BerInteger ssPBCHBlockPower = null;
	private UplinkConfigCommon uplinkConfigCommon = null;
	private SupplementaryUplink supplementaryUplink = null;
	private TDDULDLConfigCommon tddULDLConfiguration = null;
	private TDDULDLConfigCommon tddULDLConfigurationCommon2 = null;
	private PDCCHConfigCommon pdcchConfigCommon = null;
	private PUCCHConfigCommon pucchConfigCommon = null;
	private BerOctetString lateNonCriticalExtension = null;
	private NonCriticalExtension nonCriticalExtension = null;
	
	public SIB1() {
	}

	public SIB1(byte[] code) {
		this.code = code;
	}

	public void setFrequencyOffsetSSB(BerEnum frequencyOffsetSSB) {
		this.frequencyOffsetSSB = frequencyOffsetSSB;
	}

	public BerEnum getFrequencyOffsetSSB() {
		return frequencyOffsetSSB;
	}

	public void setSsbPositionsInBurst(SsbPositionsInBurst ssbPositionsInBurst) {
		this.ssbPositionsInBurst = ssbPositionsInBurst;
	}

	public SsbPositionsInBurst getSsbPositionsInBurst() {
		return ssbPositionsInBurst;
	}

	public void setSsbPeriodicityServingCell(BerEnum ssbPeriodicityServingCell) {
		this.ssbPeriodicityServingCell = ssbPeriodicityServingCell;
	}

	public BerEnum getSsbPeriodicityServingCell() {
		return ssbPeriodicityServingCell;
	}

	public void setSsPBCHBlockPower(BerInteger ssPBCHBlockPower) {
		this.ssPBCHBlockPower = ssPBCHBlockPower;
	}

	public BerInteger getSsPBCHBlockPower() {
		return ssPBCHBlockPower;
	}

	public void setUplinkConfigCommon(UplinkConfigCommon uplinkConfigCommon) {
		this.uplinkConfigCommon = uplinkConfigCommon;
	}

	public UplinkConfigCommon getUplinkConfigCommon() {
		return uplinkConfigCommon;
	}

	public void setSupplementaryUplink(SupplementaryUplink supplementaryUplink) {
		this.supplementaryUplink = supplementaryUplink;
	}

	public SupplementaryUplink getSupplementaryUplink() {
		return supplementaryUplink;
	}

	public void setTddULDLConfiguration(TDDULDLConfigCommon tddULDLConfiguration) {
		this.tddULDLConfiguration = tddULDLConfiguration;
	}

	public TDDULDLConfigCommon getTddULDLConfiguration() {
		return tddULDLConfiguration;
	}

	public void setTddULDLConfigurationCommon2(TDDULDLConfigCommon tddULDLConfigurationCommon2) {
		this.tddULDLConfigurationCommon2 = tddULDLConfigurationCommon2;
	}

	public TDDULDLConfigCommon getTddULDLConfigurationCommon2() {
		return tddULDLConfigurationCommon2;
	}

	public void setPdcchConfigCommon(PDCCHConfigCommon pdcchConfigCommon) {
		this.pdcchConfigCommon = pdcchConfigCommon;
	}

	public PDCCHConfigCommon getPdcchConfigCommon() {
		return pdcchConfigCommon;
	}

	public void setPucchConfigCommon(PUCCHConfigCommon pucchConfigCommon) {
		this.pucchConfigCommon = pucchConfigCommon;
	}

	public PUCCHConfigCommon getPucchConfigCommon() {
		return pucchConfigCommon;
	}

	public void setLateNonCriticalExtension(BerOctetString lateNonCriticalExtension) {
		this.lateNonCriticalExtension = lateNonCriticalExtension;
	}

	public BerOctetString getLateNonCriticalExtension() {
		return lateNonCriticalExtension;
	}

	public void setNonCriticalExtension(NonCriticalExtension nonCriticalExtension) {
		this.nonCriticalExtension = nonCriticalExtension;
	}

	public NonCriticalExtension getNonCriticalExtension() {
		return nonCriticalExtension;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (nonCriticalExtension != null) {
			codeLength += nonCriticalExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (lateNonCriticalExtension != null) {
			codeLength += lateNonCriticalExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		if (pucchConfigCommon != null) {
			codeLength += pucchConfigCommon.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (pdcchConfigCommon != null) {
			codeLength += pdcchConfigCommon.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (tddULDLConfigurationCommon2 != null) {
			codeLength += tddULDLConfigurationCommon2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (tddULDLConfiguration != null) {
			codeLength += tddULDLConfiguration.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (supplementaryUplink != null) {
			codeLength += supplementaryUplink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (uplinkConfigCommon != null) {
			codeLength += uplinkConfigCommon.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		codeLength += ssPBCHBlockPower.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += ssbPeriodicityServingCell.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += ssbPositionsInBurst.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		if (frequencyOffsetSSB != null) {
			codeLength += frequencyOffsetSSB.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			frequencyOffsetSSB = new BerEnum();
			subCodeLength += frequencyOffsetSSB.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			ssbPositionsInBurst = new SsbPositionsInBurst();
			subCodeLength += ssbPositionsInBurst.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			ssbPeriodicityServingCell = new BerEnum();
			subCodeLength += ssbPeriodicityServingCell.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			ssPBCHBlockPower = new BerInteger();
			subCodeLength += ssPBCHBlockPower.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			uplinkConfigCommon = new UplinkConfigCommon();
			subCodeLength += uplinkConfigCommon.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			supplementaryUplink = new SupplementaryUplink();
			subCodeLength += supplementaryUplink.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			tddULDLConfiguration = new TDDULDLConfigCommon();
			subCodeLength += tddULDLConfiguration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			tddULDLConfigurationCommon2 = new TDDULDLConfigCommon();
			subCodeLength += tddULDLConfigurationCommon2.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			pdcchConfigCommon = new PDCCHConfigCommon();
			subCodeLength += pdcchConfigCommon.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			pucchConfigCommon = new PUCCHConfigCommon();
			subCodeLength += pucchConfigCommon.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			lateNonCriticalExtension = new BerOctetString();
			subCodeLength += lateNonCriticalExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			nonCriticalExtension = new NonCriticalExtension();
			subCodeLength += nonCriticalExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (frequencyOffsetSSB != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("frequencyOffsetSSB: ").append(frequencyOffsetSSB);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (ssbPositionsInBurst != null) {
			sb.append("ssbPositionsInBurst: ");
			ssbPositionsInBurst.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("ssbPositionsInBurst: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (ssbPeriodicityServingCell != null) {
			sb.append("ssbPeriodicityServingCell: ").append(ssbPeriodicityServingCell);
		}
		else {
			sb.append("ssbPeriodicityServingCell: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (ssPBCHBlockPower != null) {
			sb.append("ssPBCHBlockPower: ").append(ssPBCHBlockPower);
		}
		else {
			sb.append("ssPBCHBlockPower: <empty-required-field>");
		}
		
		if (uplinkConfigCommon != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uplinkConfigCommon: ");
			uplinkConfigCommon.appendAsString(sb, indentLevel + 1);
		}
		
		if (supplementaryUplink != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supplementaryUplink: ");
			supplementaryUplink.appendAsString(sb, indentLevel + 1);
		}
		
		if (tddULDLConfiguration != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tddULDLConfiguration: ");
			tddULDLConfiguration.appendAsString(sb, indentLevel + 1);
		}
		
		if (tddULDLConfigurationCommon2 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tddULDLConfigurationCommon2: ");
			tddULDLConfigurationCommon2.appendAsString(sb, indentLevel + 1);
		}
		
		if (pdcchConfigCommon != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdcchConfigCommon: ");
			pdcchConfigCommon.appendAsString(sb, indentLevel + 1);
		}
		
		if (pucchConfigCommon != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pucchConfigCommon: ");
			pucchConfigCommon.appendAsString(sb, indentLevel + 1);
		}
		
		if (lateNonCriticalExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lateNonCriticalExtension: ").append(lateNonCriticalExtension);
		}
		
		if (nonCriticalExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonCriticalExtension: ");
			nonCriticalExtension.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

