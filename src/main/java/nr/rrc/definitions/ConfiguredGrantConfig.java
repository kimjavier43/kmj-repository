/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class ConfiguredGrantConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class RrcConfiguredUplinkGrant implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger timeDomainOffset = null;
		private BerInteger timeDomainAllocation = null;
		private BerBitString frequencyDomainAllocation = null;
		private BerInteger antennaPort = null;
		private BerInteger dmrsSeqInitialization = null;
		private BerInteger precodingAndNumberOfLayers = null;
		private BerInteger srsResourceIndicator = null;
		private BerInteger mcsAndTBS = null;
		private BerInteger frequencyHoppingOffset = null;
		private BerInteger pathlossReferenceIndex = null;
		
		public RrcConfiguredUplinkGrant() {
		}

		public RrcConfiguredUplinkGrant(byte[] code) {
			this.code = code;
		}

		public void setTimeDomainOffset(BerInteger timeDomainOffset) {
			this.timeDomainOffset = timeDomainOffset;
		}

		public BerInteger getTimeDomainOffset() {
			return timeDomainOffset;
		}

		public void setTimeDomainAllocation(BerInteger timeDomainAllocation) {
			this.timeDomainAllocation = timeDomainAllocation;
		}

		public BerInteger getTimeDomainAllocation() {
			return timeDomainAllocation;
		}

		public void setFrequencyDomainAllocation(BerBitString frequencyDomainAllocation) {
			this.frequencyDomainAllocation = frequencyDomainAllocation;
		}

		public BerBitString getFrequencyDomainAllocation() {
			return frequencyDomainAllocation;
		}

		public void setAntennaPort(BerInteger antennaPort) {
			this.antennaPort = antennaPort;
		}

		public BerInteger getAntennaPort() {
			return antennaPort;
		}

		public void setDmrsSeqInitialization(BerInteger dmrsSeqInitialization) {
			this.dmrsSeqInitialization = dmrsSeqInitialization;
		}

		public BerInteger getDmrsSeqInitialization() {
			return dmrsSeqInitialization;
		}

		public void setPrecodingAndNumberOfLayers(BerInteger precodingAndNumberOfLayers) {
			this.precodingAndNumberOfLayers = precodingAndNumberOfLayers;
		}

		public BerInteger getPrecodingAndNumberOfLayers() {
			return precodingAndNumberOfLayers;
		}

		public void setSrsResourceIndicator(BerInteger srsResourceIndicator) {
			this.srsResourceIndicator = srsResourceIndicator;
		}

		public BerInteger getSrsResourceIndicator() {
			return srsResourceIndicator;
		}

		public void setMcsAndTBS(BerInteger mcsAndTBS) {
			this.mcsAndTBS = mcsAndTBS;
		}

		public BerInteger getMcsAndTBS() {
			return mcsAndTBS;
		}

		public void setFrequencyHoppingOffset(BerInteger frequencyHoppingOffset) {
			this.frequencyHoppingOffset = frequencyHoppingOffset;
		}

		public BerInteger getFrequencyHoppingOffset() {
			return frequencyHoppingOffset;
		}

		public void setPathlossReferenceIndex(BerInteger pathlossReferenceIndex) {
			this.pathlossReferenceIndex = pathlossReferenceIndex;
		}

		public BerInteger getPathlossReferenceIndex() {
			return pathlossReferenceIndex;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += pathlossReferenceIndex.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
			
			if (frequencyHoppingOffset != null) {
				codeLength += frequencyHoppingOffset.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 8
				reverseOS.write(0x88);
				codeLength += 1;
			}
			
			codeLength += mcsAndTBS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
			
			codeLength += srsResourceIndicator.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
			
			codeLength += precodingAndNumberOfLayers.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
			
			if (dmrsSeqInitialization != null) {
				codeLength += dmrsSeqInitialization.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
			}
			
			codeLength += antennaPort.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
			
			codeLength += frequencyDomainAllocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			
			codeLength += timeDomainAllocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += timeDomainOffset.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				timeDomainOffset = new BerInteger();
				subCodeLength += timeDomainOffset.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				timeDomainAllocation = new BerInteger();
				subCodeLength += timeDomainAllocation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				frequencyDomainAllocation = new BerBitString();
				subCodeLength += frequencyDomainAllocation.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				antennaPort = new BerInteger();
				subCodeLength += antennaPort.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				dmrsSeqInitialization = new BerInteger();
				subCodeLength += dmrsSeqInitialization.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				precodingAndNumberOfLayers = new BerInteger();
				subCodeLength += precodingAndNumberOfLayers.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				srsResourceIndicator = new BerInteger();
				subCodeLength += srsResourceIndicator.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				mcsAndTBS = new BerInteger();
				subCodeLength += mcsAndTBS.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				frequencyHoppingOffset = new BerInteger();
				subCodeLength += frequencyHoppingOffset.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				pathlossReferenceIndex = new BerInteger();
				subCodeLength += pathlossReferenceIndex.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (timeDomainOffset != null) {
				sb.append("timeDomainOffset: ").append(timeDomainOffset);
			}
			else {
				sb.append("timeDomainOffset: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (timeDomainAllocation != null) {
				sb.append("timeDomainAllocation: ").append(timeDomainAllocation);
			}
			else {
				sb.append("timeDomainAllocation: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (frequencyDomainAllocation != null) {
				sb.append("frequencyDomainAllocation: ").append(frequencyDomainAllocation);
			}
			else {
				sb.append("frequencyDomainAllocation: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (antennaPort != null) {
				sb.append("antennaPort: ").append(antennaPort);
			}
			else {
				sb.append("antennaPort: <empty-required-field>");
			}
			
			if (dmrsSeqInitialization != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("dmrsSeqInitialization: ").append(dmrsSeqInitialization);
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (precodingAndNumberOfLayers != null) {
				sb.append("precodingAndNumberOfLayers: ").append(precodingAndNumberOfLayers);
			}
			else {
				sb.append("precodingAndNumberOfLayers: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (srsResourceIndicator != null) {
				sb.append("srsResourceIndicator: ").append(srsResourceIndicator);
			}
			else {
				sb.append("srsResourceIndicator: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (mcsAndTBS != null) {
				sb.append("mcsAndTBS: ").append(mcsAndTBS);
			}
			else {
				sb.append("mcsAndTBS: <empty-required-field>");
			}
			
			if (frequencyHoppingOffset != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("frequencyHoppingOffset: ").append(frequencyHoppingOffset);
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (pathlossReferenceIndex != null) {
				sb.append("pathlossReferenceIndex: ").append(pathlossReferenceIndex);
			}
			else {
				sb.append("pathlossReferenceIndex: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum frequencyHopping = null;
	private DMRSUplinkConfig cgDMRSConfiguration = null;
	private BerEnum mcsTable = null;
	private BerEnum mcsTableTransformPrecoder = null;
	private SetupRelease uciOnPUSCH = null;
	private BerEnum resourceAllocation = null;
	private BerEnum rbgSize = null;
	private BerEnum powerControlLoopToUse = null;
	private P0PUSCHAlphaSetId p0PUSCHAlpha = null;
	private BerEnum transformPrecoder = null;
	private BerInteger nrofHARQProcesses = null;
	private BerEnum repK = null;
	private BerEnum repKRV = null;
	private BerEnum periodicity = null;
	private BerInteger configuredGrantTimer = null;
	private RrcConfiguredUplinkGrant rrcConfiguredUplinkGrant = null;
	
	public ConfiguredGrantConfig() {
	}

	public ConfiguredGrantConfig(byte[] code) {
		this.code = code;
	}

	public void setFrequencyHopping(BerEnum frequencyHopping) {
		this.frequencyHopping = frequencyHopping;
	}

	public BerEnum getFrequencyHopping() {
		return frequencyHopping;
	}

	public void setCgDMRSConfiguration(DMRSUplinkConfig cgDMRSConfiguration) {
		this.cgDMRSConfiguration = cgDMRSConfiguration;
	}

	public DMRSUplinkConfig getCgDMRSConfiguration() {
		return cgDMRSConfiguration;
	}

	public void setMcsTable(BerEnum mcsTable) {
		this.mcsTable = mcsTable;
	}

	public BerEnum getMcsTable() {
		return mcsTable;
	}

	public void setMcsTableTransformPrecoder(BerEnum mcsTableTransformPrecoder) {
		this.mcsTableTransformPrecoder = mcsTableTransformPrecoder;
	}

	public BerEnum getMcsTableTransformPrecoder() {
		return mcsTableTransformPrecoder;
	}

	public void setUciOnPUSCH(SetupRelease uciOnPUSCH) {
		this.uciOnPUSCH = uciOnPUSCH;
	}

	public SetupRelease getUciOnPUSCH() {
		return uciOnPUSCH;
	}

	public void setResourceAllocation(BerEnum resourceAllocation) {
		this.resourceAllocation = resourceAllocation;
	}

	public BerEnum getResourceAllocation() {
		return resourceAllocation;
	}

	public void setRbgSize(BerEnum rbgSize) {
		this.rbgSize = rbgSize;
	}

	public BerEnum getRbgSize() {
		return rbgSize;
	}

	public void setPowerControlLoopToUse(BerEnum powerControlLoopToUse) {
		this.powerControlLoopToUse = powerControlLoopToUse;
	}

	public BerEnum getPowerControlLoopToUse() {
		return powerControlLoopToUse;
	}

	public void setP0PUSCHAlpha(P0PUSCHAlphaSetId p0PUSCHAlpha) {
		this.p0PUSCHAlpha = p0PUSCHAlpha;
	}

	public P0PUSCHAlphaSetId getP0PUSCHAlpha() {
		return p0PUSCHAlpha;
	}

	public void setTransformPrecoder(BerEnum transformPrecoder) {
		this.transformPrecoder = transformPrecoder;
	}

	public BerEnum getTransformPrecoder() {
		return transformPrecoder;
	}

	public void setNrofHARQProcesses(BerInteger nrofHARQProcesses) {
		this.nrofHARQProcesses = nrofHARQProcesses;
	}

	public BerInteger getNrofHARQProcesses() {
		return nrofHARQProcesses;
	}

	public void setRepK(BerEnum repK) {
		this.repK = repK;
	}

	public BerEnum getRepK() {
		return repK;
	}

	public void setRepKRV(BerEnum repKRV) {
		this.repKRV = repKRV;
	}

	public BerEnum getRepKRV() {
		return repKRV;
	}

	public void setPeriodicity(BerEnum periodicity) {
		this.periodicity = periodicity;
	}

	public BerEnum getPeriodicity() {
		return periodicity;
	}

	public void setConfiguredGrantTimer(BerInteger configuredGrantTimer) {
		this.configuredGrantTimer = configuredGrantTimer;
	}

	public BerInteger getConfiguredGrantTimer() {
		return configuredGrantTimer;
	}

	public void setRrcConfiguredUplinkGrant(RrcConfiguredUplinkGrant rrcConfiguredUplinkGrant) {
		this.rrcConfiguredUplinkGrant = rrcConfiguredUplinkGrant;
	}

	public RrcConfiguredUplinkGrant getRrcConfiguredUplinkGrant() {
		return rrcConfiguredUplinkGrant;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (rrcConfiguredUplinkGrant != null) {
			codeLength += rrcConfiguredUplinkGrant.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			reverseOS.write(0xAF);
			codeLength += 1;
		}
		
		if (configuredGrantTimer != null) {
			codeLength += configuredGrantTimer.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
		}
		
		codeLength += periodicity.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 13
		reverseOS.write(0x8D);
		codeLength += 1;
		
		if (repKRV != null) {
			codeLength += repKRV.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		codeLength += repK.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 11
		reverseOS.write(0x8B);
		codeLength += 1;
		
		codeLength += nrofHARQProcesses.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 10
		reverseOS.write(0x8A);
		codeLength += 1;
		
		if (transformPrecoder != null) {
			codeLength += transformPrecoder.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		codeLength += p0PUSCHAlpha.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		reverseOS.write(0x88);
		codeLength += 1;
		
		codeLength += powerControlLoopToUse.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 7
		reverseOS.write(0x87);
		codeLength += 1;
		
		if (rbgSize != null) {
			codeLength += rbgSize.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		codeLength += resourceAllocation.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		sublength = uciOnPUSCH.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
		reverseOS.write(0xA4);
		codeLength += 1;
		
		if (mcsTableTransformPrecoder != null) {
			codeLength += mcsTableTransformPrecoder.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (mcsTable != null) {
			codeLength += mcsTable.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		codeLength += cgDMRSConfiguration.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		if (frequencyHopping != null) {
			codeLength += frequencyHopping.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			frequencyHopping = new BerEnum();
			subCodeLength += frequencyHopping.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			cgDMRSConfiguration = new DMRSUplinkConfig();
			subCodeLength += cgDMRSConfiguration.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			mcsTable = new BerEnum();
			subCodeLength += mcsTable.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			mcsTableTransformPrecoder = new BerEnum();
			subCodeLength += mcsTableTransformPrecoder.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			subCodeLength += length.decode(is);
			uciOnPUSCH = new SetupRelease();
			subCodeLength += uciOnPUSCH.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			resourceAllocation = new BerEnum();
			subCodeLength += resourceAllocation.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			rbgSize = new BerEnum();
			subCodeLength += rbgSize.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			powerControlLoopToUse = new BerEnum();
			subCodeLength += powerControlLoopToUse.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			p0PUSCHAlpha = new P0PUSCHAlphaSetId();
			subCodeLength += p0PUSCHAlpha.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			transformPrecoder = new BerEnum();
			subCodeLength += transformPrecoder.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			nrofHARQProcesses = new BerInteger();
			subCodeLength += nrofHARQProcesses.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			repK = new BerEnum();
			subCodeLength += repK.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			repKRV = new BerEnum();
			subCodeLength += repKRV.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			periodicity = new BerEnum();
			subCodeLength += periodicity.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			configuredGrantTimer = new BerInteger();
			subCodeLength += configuredGrantTimer.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			rrcConfiguredUplinkGrant = new RrcConfiguredUplinkGrant();
			subCodeLength += rrcConfiguredUplinkGrant.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (frequencyHopping != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("frequencyHopping: ").append(frequencyHopping);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cgDMRSConfiguration != null) {
			sb.append("cgDMRSConfiguration: ");
			cgDMRSConfiguration.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("cgDMRSConfiguration: <empty-required-field>");
		}
		
		if (mcsTable != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mcsTable: ").append(mcsTable);
		}
		
		if (mcsTableTransformPrecoder != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mcsTableTransformPrecoder: ").append(mcsTableTransformPrecoder);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (uciOnPUSCH != null) {
			sb.append("uciOnPUSCH: ");
			uciOnPUSCH.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("uciOnPUSCH: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (resourceAllocation != null) {
			sb.append("resourceAllocation: ").append(resourceAllocation);
		}
		else {
			sb.append("resourceAllocation: <empty-required-field>");
		}
		
		if (rbgSize != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rbgSize: ").append(rbgSize);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (powerControlLoopToUse != null) {
			sb.append("powerControlLoopToUse: ").append(powerControlLoopToUse);
		}
		else {
			sb.append("powerControlLoopToUse: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (p0PUSCHAlpha != null) {
			sb.append("p0PUSCHAlpha: ").append(p0PUSCHAlpha);
		}
		else {
			sb.append("p0PUSCHAlpha: <empty-required-field>");
		}
		
		if (transformPrecoder != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("transformPrecoder: ").append(transformPrecoder);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nrofHARQProcesses != null) {
			sb.append("nrofHARQProcesses: ").append(nrofHARQProcesses);
		}
		else {
			sb.append("nrofHARQProcesses: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (repK != null) {
			sb.append("repK: ").append(repK);
		}
		else {
			sb.append("repK: <empty-required-field>");
		}
		
		if (repKRV != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("repKRV: ").append(repKRV);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (periodicity != null) {
			sb.append("periodicity: ").append(periodicity);
		}
		else {
			sb.append("periodicity: <empty-required-field>");
		}
		
		if (configuredGrantTimer != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("configuredGrantTimer: ").append(configuredGrantTimer);
		}
		
		if (rrcConfiguredUplinkGrant != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rrcConfiguredUplinkGrant: ");
			rrcConfiguredUplinkGrant.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

