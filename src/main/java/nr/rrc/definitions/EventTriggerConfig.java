/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class EventTriggerConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class EventId implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class EventA1 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private MeasTriggerQuantity a1Threshold = null;
			private BerBoolean reportOnLeave = null;
			private Hysteresis hysteresis = null;
			private TimeToTrigger timeToTrigger = null;
			
			public EventA1() {
			}

			public EventA1(byte[] code) {
				this.code = code;
			}

			public void setA1Threshold(MeasTriggerQuantity a1Threshold) {
				this.a1Threshold = a1Threshold;
			}

			public MeasTriggerQuantity getA1Threshold() {
				return a1Threshold;
			}

			public void setReportOnLeave(BerBoolean reportOnLeave) {
				this.reportOnLeave = reportOnLeave;
			}

			public BerBoolean getReportOnLeave() {
				return reportOnLeave;
			}

			public void setHysteresis(Hysteresis hysteresis) {
				this.hysteresis = hysteresis;
			}

			public Hysteresis getHysteresis() {
				return hysteresis;
			}

			public void setTimeToTrigger(TimeToTrigger timeToTrigger) {
				this.timeToTrigger = timeToTrigger;
			}

			public TimeToTrigger getTimeToTrigger() {
				return timeToTrigger;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += timeToTrigger.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				
				codeLength += hysteresis.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				codeLength += reportOnLeave.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				sublength = a1Threshold.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					a1Threshold = new MeasTriggerQuantity();
					subCodeLength += a1Threshold.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					reportOnLeave = new BerBoolean();
					subCodeLength += reportOnLeave.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					hysteresis = new Hysteresis();
					subCodeLength += hysteresis.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					timeToTrigger = new TimeToTrigger();
					subCodeLength += timeToTrigger.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (a1Threshold != null) {
					sb.append("a1Threshold: ");
					a1Threshold.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("a1Threshold: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportOnLeave != null) {
					sb.append("reportOnLeave: ").append(reportOnLeave);
				}
				else {
					sb.append("reportOnLeave: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (hysteresis != null) {
					sb.append("hysteresis: ").append(hysteresis);
				}
				else {
					sb.append("hysteresis: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (timeToTrigger != null) {
					sb.append("timeToTrigger: ").append(timeToTrigger);
				}
				else {
					sb.append("timeToTrigger: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class EventA2 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private MeasTriggerQuantity a2Threshold = null;
			private BerBoolean reportOnLeave = null;
			private Hysteresis hysteresis = null;
			private TimeToTrigger timeToTrigger = null;
			
			public EventA2() {
			}

			public EventA2(byte[] code) {
				this.code = code;
			}

			public void setA2Threshold(MeasTriggerQuantity a2Threshold) {
				this.a2Threshold = a2Threshold;
			}

			public MeasTriggerQuantity getA2Threshold() {
				return a2Threshold;
			}

			public void setReportOnLeave(BerBoolean reportOnLeave) {
				this.reportOnLeave = reportOnLeave;
			}

			public BerBoolean getReportOnLeave() {
				return reportOnLeave;
			}

			public void setHysteresis(Hysteresis hysteresis) {
				this.hysteresis = hysteresis;
			}

			public Hysteresis getHysteresis() {
				return hysteresis;
			}

			public void setTimeToTrigger(TimeToTrigger timeToTrigger) {
				this.timeToTrigger = timeToTrigger;
			}

			public TimeToTrigger getTimeToTrigger() {
				return timeToTrigger;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += timeToTrigger.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				
				codeLength += hysteresis.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				codeLength += reportOnLeave.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				sublength = a2Threshold.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					a2Threshold = new MeasTriggerQuantity();
					subCodeLength += a2Threshold.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					reportOnLeave = new BerBoolean();
					subCodeLength += reportOnLeave.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					hysteresis = new Hysteresis();
					subCodeLength += hysteresis.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					timeToTrigger = new TimeToTrigger();
					subCodeLength += timeToTrigger.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (a2Threshold != null) {
					sb.append("a2Threshold: ");
					a2Threshold.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("a2Threshold: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportOnLeave != null) {
					sb.append("reportOnLeave: ").append(reportOnLeave);
				}
				else {
					sb.append("reportOnLeave: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (hysteresis != null) {
					sb.append("hysteresis: ").append(hysteresis);
				}
				else {
					sb.append("hysteresis: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (timeToTrigger != null) {
					sb.append("timeToTrigger: ").append(timeToTrigger);
				}
				else {
					sb.append("timeToTrigger: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class EventA3 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private MeasTriggerQuantityOffset a3Offset = null;
			private BerBoolean reportOnLeave = null;
			private Hysteresis hysteresis = null;
			private TimeToTrigger timeToTrigger = null;
			private BerBoolean useWhiteCellList = null;
			
			public EventA3() {
			}

			public EventA3(byte[] code) {
				this.code = code;
			}

			public void setA3Offset(MeasTriggerQuantityOffset a3Offset) {
				this.a3Offset = a3Offset;
			}

			public MeasTriggerQuantityOffset getA3Offset() {
				return a3Offset;
			}

			public void setReportOnLeave(BerBoolean reportOnLeave) {
				this.reportOnLeave = reportOnLeave;
			}

			public BerBoolean getReportOnLeave() {
				return reportOnLeave;
			}

			public void setHysteresis(Hysteresis hysteresis) {
				this.hysteresis = hysteresis;
			}

			public Hysteresis getHysteresis() {
				return hysteresis;
			}

			public void setTimeToTrigger(TimeToTrigger timeToTrigger) {
				this.timeToTrigger = timeToTrigger;
			}

			public TimeToTrigger getTimeToTrigger() {
				return timeToTrigger;
			}

			public void setUseWhiteCellList(BerBoolean useWhiteCellList) {
				this.useWhiteCellList = useWhiteCellList;
			}

			public BerBoolean getUseWhiteCellList() {
				return useWhiteCellList;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += useWhiteCellList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				
				codeLength += timeToTrigger.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				
				codeLength += hysteresis.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				codeLength += reportOnLeave.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				sublength = a3Offset.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					a3Offset = new MeasTriggerQuantityOffset();
					subCodeLength += a3Offset.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					reportOnLeave = new BerBoolean();
					subCodeLength += reportOnLeave.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					hysteresis = new Hysteresis();
					subCodeLength += hysteresis.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					timeToTrigger = new TimeToTrigger();
					subCodeLength += timeToTrigger.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
					useWhiteCellList = new BerBoolean();
					subCodeLength += useWhiteCellList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (a3Offset != null) {
					sb.append("a3Offset: ");
					a3Offset.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("a3Offset: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportOnLeave != null) {
					sb.append("reportOnLeave: ").append(reportOnLeave);
				}
				else {
					sb.append("reportOnLeave: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (hysteresis != null) {
					sb.append("hysteresis: ").append(hysteresis);
				}
				else {
					sb.append("hysteresis: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (timeToTrigger != null) {
					sb.append("timeToTrigger: ").append(timeToTrigger);
				}
				else {
					sb.append("timeToTrigger: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (useWhiteCellList != null) {
					sb.append("useWhiteCellList: ").append(useWhiteCellList);
				}
				else {
					sb.append("useWhiteCellList: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class EventA4 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private MeasTriggerQuantity a4Threshold = null;
			private BerBoolean reportOnLeave = null;
			private Hysteresis hysteresis = null;
			private TimeToTrigger timeToTrigger = null;
			private BerBoolean useWhiteCellList = null;
			
			public EventA4() {
			}

			public EventA4(byte[] code) {
				this.code = code;
			}

			public void setA4Threshold(MeasTriggerQuantity a4Threshold) {
				this.a4Threshold = a4Threshold;
			}

			public MeasTriggerQuantity getA4Threshold() {
				return a4Threshold;
			}

			public void setReportOnLeave(BerBoolean reportOnLeave) {
				this.reportOnLeave = reportOnLeave;
			}

			public BerBoolean getReportOnLeave() {
				return reportOnLeave;
			}

			public void setHysteresis(Hysteresis hysteresis) {
				this.hysteresis = hysteresis;
			}

			public Hysteresis getHysteresis() {
				return hysteresis;
			}

			public void setTimeToTrigger(TimeToTrigger timeToTrigger) {
				this.timeToTrigger = timeToTrigger;
			}

			public TimeToTrigger getTimeToTrigger() {
				return timeToTrigger;
			}

			public void setUseWhiteCellList(BerBoolean useWhiteCellList) {
				this.useWhiteCellList = useWhiteCellList;
			}

			public BerBoolean getUseWhiteCellList() {
				return useWhiteCellList;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += useWhiteCellList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				
				codeLength += timeToTrigger.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				
				codeLength += hysteresis.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				codeLength += reportOnLeave.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				sublength = a4Threshold.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					a4Threshold = new MeasTriggerQuantity();
					subCodeLength += a4Threshold.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					reportOnLeave = new BerBoolean();
					subCodeLength += reportOnLeave.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					hysteresis = new Hysteresis();
					subCodeLength += hysteresis.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					timeToTrigger = new TimeToTrigger();
					subCodeLength += timeToTrigger.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
					useWhiteCellList = new BerBoolean();
					subCodeLength += useWhiteCellList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (a4Threshold != null) {
					sb.append("a4Threshold: ");
					a4Threshold.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("a4Threshold: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportOnLeave != null) {
					sb.append("reportOnLeave: ").append(reportOnLeave);
				}
				else {
					sb.append("reportOnLeave: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (hysteresis != null) {
					sb.append("hysteresis: ").append(hysteresis);
				}
				else {
					sb.append("hysteresis: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (timeToTrigger != null) {
					sb.append("timeToTrigger: ").append(timeToTrigger);
				}
				else {
					sb.append("timeToTrigger: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (useWhiteCellList != null) {
					sb.append("useWhiteCellList: ").append(useWhiteCellList);
				}
				else {
					sb.append("useWhiteCellList: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class EventA5 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private MeasTriggerQuantity a5Threshold1 = null;
			private MeasTriggerQuantity a5Threshold2 = null;
			private BerBoolean reportOnLeave = null;
			private Hysteresis hysteresis = null;
			private TimeToTrigger timeToTrigger = null;
			private BerBoolean useWhiteCellList = null;
			
			public EventA5() {
			}

			public EventA5(byte[] code) {
				this.code = code;
			}

			public void setA5Threshold1(MeasTriggerQuantity a5Threshold1) {
				this.a5Threshold1 = a5Threshold1;
			}

			public MeasTriggerQuantity getA5Threshold1() {
				return a5Threshold1;
			}

			public void setA5Threshold2(MeasTriggerQuantity a5Threshold2) {
				this.a5Threshold2 = a5Threshold2;
			}

			public MeasTriggerQuantity getA5Threshold2() {
				return a5Threshold2;
			}

			public void setReportOnLeave(BerBoolean reportOnLeave) {
				this.reportOnLeave = reportOnLeave;
			}

			public BerBoolean getReportOnLeave() {
				return reportOnLeave;
			}

			public void setHysteresis(Hysteresis hysteresis) {
				this.hysteresis = hysteresis;
			}

			public Hysteresis getHysteresis() {
				return hysteresis;
			}

			public void setTimeToTrigger(TimeToTrigger timeToTrigger) {
				this.timeToTrigger = timeToTrigger;
			}

			public TimeToTrigger getTimeToTrigger() {
				return timeToTrigger;
			}

			public void setUseWhiteCellList(BerBoolean useWhiteCellList) {
				this.useWhiteCellList = useWhiteCellList;
			}

			public BerBoolean getUseWhiteCellList() {
				return useWhiteCellList;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += useWhiteCellList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 5
				reverseOS.write(0x85);
				codeLength += 1;
				
				codeLength += timeToTrigger.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				
				codeLength += hysteresis.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				
				codeLength += reportOnLeave.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				sublength = a5Threshold2.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				
				sublength = a5Threshold1.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					a5Threshold1 = new MeasTriggerQuantity();
					subCodeLength += a5Threshold1.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					subCodeLength += length.decode(is);
					a5Threshold2 = new MeasTriggerQuantity();
					subCodeLength += a5Threshold2.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					reportOnLeave = new BerBoolean();
					subCodeLength += reportOnLeave.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					hysteresis = new Hysteresis();
					subCodeLength += hysteresis.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
					timeToTrigger = new TimeToTrigger();
					subCodeLength += timeToTrigger.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
					useWhiteCellList = new BerBoolean();
					subCodeLength += useWhiteCellList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (a5Threshold1 != null) {
					sb.append("a5Threshold1: ");
					a5Threshold1.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("a5Threshold1: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (a5Threshold2 != null) {
					sb.append("a5Threshold2: ");
					a5Threshold2.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("a5Threshold2: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportOnLeave != null) {
					sb.append("reportOnLeave: ").append(reportOnLeave);
				}
				else {
					sb.append("reportOnLeave: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (hysteresis != null) {
					sb.append("hysteresis: ").append(hysteresis);
				}
				else {
					sb.append("hysteresis: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (timeToTrigger != null) {
					sb.append("timeToTrigger: ").append(timeToTrigger);
				}
				else {
					sb.append("timeToTrigger: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (useWhiteCellList != null) {
					sb.append("useWhiteCellList: ").append(useWhiteCellList);
				}
				else {
					sb.append("useWhiteCellList: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class EventA6 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private MeasTriggerQuantityOffset a6Offset = null;
			private BerBoolean reportOnLeave = null;
			private Hysteresis hysteresis = null;
			private TimeToTrigger timeToTrigger = null;
			private BerBoolean useWhiteCellList = null;
			
			public EventA6() {
			}

			public EventA6(byte[] code) {
				this.code = code;
			}

			public void setA6Offset(MeasTriggerQuantityOffset a6Offset) {
				this.a6Offset = a6Offset;
			}

			public MeasTriggerQuantityOffset getA6Offset() {
				return a6Offset;
			}

			public void setReportOnLeave(BerBoolean reportOnLeave) {
				this.reportOnLeave = reportOnLeave;
			}

			public BerBoolean getReportOnLeave() {
				return reportOnLeave;
			}

			public void setHysteresis(Hysteresis hysteresis) {
				this.hysteresis = hysteresis;
			}

			public Hysteresis getHysteresis() {
				return hysteresis;
			}

			public void setTimeToTrigger(TimeToTrigger timeToTrigger) {
				this.timeToTrigger = timeToTrigger;
			}

			public TimeToTrigger getTimeToTrigger() {
				return timeToTrigger;
			}

			public void setUseWhiteCellList(BerBoolean useWhiteCellList) {
				this.useWhiteCellList = useWhiteCellList;
			}

			public BerBoolean getUseWhiteCellList() {
				return useWhiteCellList;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += useWhiteCellList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				
				codeLength += timeToTrigger.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				
				codeLength += hysteresis.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				codeLength += reportOnLeave.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				sublength = a6Offset.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					a6Offset = new MeasTriggerQuantityOffset();
					subCodeLength += a6Offset.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					reportOnLeave = new BerBoolean();
					subCodeLength += reportOnLeave.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					hysteresis = new Hysteresis();
					subCodeLength += hysteresis.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					timeToTrigger = new TimeToTrigger();
					subCodeLength += timeToTrigger.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
					useWhiteCellList = new BerBoolean();
					subCodeLength += useWhiteCellList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (a6Offset != null) {
					sb.append("a6Offset: ");
					a6Offset.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("a6Offset: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (reportOnLeave != null) {
					sb.append("reportOnLeave: ").append(reportOnLeave);
				}
				else {
					sb.append("reportOnLeave: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (hysteresis != null) {
					sb.append("hysteresis: ").append(hysteresis);
				}
				else {
					sb.append("hysteresis: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (timeToTrigger != null) {
					sb.append("timeToTrigger: ").append(timeToTrigger);
				}
				else {
					sb.append("timeToTrigger: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (useWhiteCellList != null) {
					sb.append("useWhiteCellList: ").append(useWhiteCellList);
				}
				else {
					sb.append("useWhiteCellList: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private EventA1 eventA1 = null;
		private EventA2 eventA2 = null;
		private EventA3 eventA3 = null;
		private EventA4 eventA4 = null;
		private EventA5 eventA5 = null;
		private EventA6 eventA6 = null;
		
		public EventId() {
		}

		public EventId(byte[] code) {
			this.code = code;
		}

		public void setEventA1(EventA1 eventA1) {
			this.eventA1 = eventA1;
		}

		public EventA1 getEventA1() {
			return eventA1;
		}

		public void setEventA2(EventA2 eventA2) {
			this.eventA2 = eventA2;
		}

		public EventA2 getEventA2() {
			return eventA2;
		}

		public void setEventA3(EventA3 eventA3) {
			this.eventA3 = eventA3;
		}

		public EventA3 getEventA3() {
			return eventA3;
		}

		public void setEventA4(EventA4 eventA4) {
			this.eventA4 = eventA4;
		}

		public EventA4 getEventA4() {
			return eventA4;
		}

		public void setEventA5(EventA5 eventA5) {
			this.eventA5 = eventA5;
		}

		public EventA5 getEventA5() {
			return eventA5;
		}

		public void setEventA6(EventA6 eventA6) {
			this.eventA6 = eventA6;
		}

		public EventA6 getEventA6() {
			return eventA6;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (eventA6 != null) {
				codeLength += eventA6.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
				reverseOS.write(0xA5);
				codeLength += 1;
				return codeLength;
			}
			
			if (eventA5 != null) {
				codeLength += eventA5.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				reverseOS.write(0xA4);
				codeLength += 1;
				return codeLength;
			}
			
			if (eventA4 != null) {
				codeLength += eventA4.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
				return codeLength;
			}
			
			if (eventA3 != null) {
				codeLength += eventA3.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
				return codeLength;
			}
			
			if (eventA2 != null) {
				codeLength += eventA2.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (eventA1 != null) {
				codeLength += eventA1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				eventA1 = new EventA1();
				codeLength += eventA1.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				eventA2 = new EventA2();
				codeLength += eventA2.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				eventA3 = new EventA3();
				codeLength += eventA3.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				eventA4 = new EventA4();
				codeLength += eventA4.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				eventA5 = new EventA5();
				codeLength += eventA5.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
				eventA6 = new EventA6();
				codeLength += eventA6.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (eventA1 != null) {
				sb.append("eventA1: ");
				eventA1.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (eventA2 != null) {
				sb.append("eventA2: ");
				eventA2.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (eventA3 != null) {
				sb.append("eventA3: ");
				eventA3.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (eventA4 != null) {
				sb.append("eventA4: ");
				eventA4.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (eventA5 != null) {
				sb.append("eventA5: ");
				eventA5.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (eventA6 != null) {
				sb.append("eventA6: ");
				eventA6.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private EventId eventId = null;
	private NRRSType rsType = null;
	private ReportInterval reportInterval = null;
	private BerEnum reportAmount = null;
	private MeasReportQuantity reportQuantityCell = null;
	private BerInteger maxReportCells = null;
	private MeasReportQuantity reportQuantityRsIndexes = null;
	private BerInteger maxNrofRSIndexesToReport = null;
	private BerBoolean includeBeamMeasurements = null;
	private BerEnum reportAddNeighMeas = null;
	
	public EventTriggerConfig() {
	}

	public EventTriggerConfig(byte[] code) {
		this.code = code;
	}

	public void setEventId(EventId eventId) {
		this.eventId = eventId;
	}

	public EventId getEventId() {
		return eventId;
	}

	public void setRsType(NRRSType rsType) {
		this.rsType = rsType;
	}

	public NRRSType getRsType() {
		return rsType;
	}

	public void setReportInterval(ReportInterval reportInterval) {
		this.reportInterval = reportInterval;
	}

	public ReportInterval getReportInterval() {
		return reportInterval;
	}

	public void setReportAmount(BerEnum reportAmount) {
		this.reportAmount = reportAmount;
	}

	public BerEnum getReportAmount() {
		return reportAmount;
	}

	public void setReportQuantityCell(MeasReportQuantity reportQuantityCell) {
		this.reportQuantityCell = reportQuantityCell;
	}

	public MeasReportQuantity getReportQuantityCell() {
		return reportQuantityCell;
	}

	public void setMaxReportCells(BerInteger maxReportCells) {
		this.maxReportCells = maxReportCells;
	}

	public BerInteger getMaxReportCells() {
		return maxReportCells;
	}

	public void setReportQuantityRsIndexes(MeasReportQuantity reportQuantityRsIndexes) {
		this.reportQuantityRsIndexes = reportQuantityRsIndexes;
	}

	public MeasReportQuantity getReportQuantityRsIndexes() {
		return reportQuantityRsIndexes;
	}

	public void setMaxNrofRSIndexesToReport(BerInteger maxNrofRSIndexesToReport) {
		this.maxNrofRSIndexesToReport = maxNrofRSIndexesToReport;
	}

	public BerInteger getMaxNrofRSIndexesToReport() {
		return maxNrofRSIndexesToReport;
	}

	public void setIncludeBeamMeasurements(BerBoolean includeBeamMeasurements) {
		this.includeBeamMeasurements = includeBeamMeasurements;
	}

	public BerBoolean getIncludeBeamMeasurements() {
		return includeBeamMeasurements;
	}

	public void setReportAddNeighMeas(BerEnum reportAddNeighMeas) {
		this.reportAddNeighMeas = reportAddNeighMeas;
	}

	public BerEnum getReportAddNeighMeas() {
		return reportAddNeighMeas;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (reportAddNeighMeas != null) {
			codeLength += reportAddNeighMeas.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		codeLength += includeBeamMeasurements.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 8
		reverseOS.write(0x88);
		codeLength += 1;
		
		if (maxNrofRSIndexesToReport != null) {
			codeLength += maxNrofRSIndexesToReport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (reportQuantityRsIndexes != null) {
			codeLength += reportQuantityRsIndexes.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		codeLength += maxReportCells.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += reportQuantityCell.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
		reverseOS.write(0xA4);
		codeLength += 1;
		
		codeLength += reportAmount.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += reportInterval.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += rsType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		sublength = eventId.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			subCodeLength += length.decode(is);
			eventId = new EventId();
			subCodeLength += eventId.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			rsType = new NRRSType();
			subCodeLength += rsType.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			reportInterval = new ReportInterval();
			subCodeLength += reportInterval.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			reportAmount = new BerEnum();
			subCodeLength += reportAmount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			reportQuantityCell = new MeasReportQuantity();
			subCodeLength += reportQuantityCell.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			maxReportCells = new BerInteger();
			subCodeLength += maxReportCells.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			reportQuantityRsIndexes = new MeasReportQuantity();
			subCodeLength += reportQuantityRsIndexes.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			maxNrofRSIndexesToReport = new BerInteger();
			subCodeLength += maxNrofRSIndexesToReport.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			includeBeamMeasurements = new BerBoolean();
			subCodeLength += includeBeamMeasurements.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			reportAddNeighMeas = new BerEnum();
			subCodeLength += reportAddNeighMeas.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (eventId != null) {
			sb.append("eventId: ");
			eventId.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("eventId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rsType != null) {
			sb.append("rsType: ").append(rsType);
		}
		else {
			sb.append("rsType: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportInterval != null) {
			sb.append("reportInterval: ").append(reportInterval);
		}
		else {
			sb.append("reportInterval: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportAmount != null) {
			sb.append("reportAmount: ").append(reportAmount);
		}
		else {
			sb.append("reportAmount: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (reportQuantityCell != null) {
			sb.append("reportQuantityCell: ");
			reportQuantityCell.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("reportQuantityCell: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxReportCells != null) {
			sb.append("maxReportCells: ").append(maxReportCells);
		}
		else {
			sb.append("maxReportCells: <empty-required-field>");
		}
		
		if (reportQuantityRsIndexes != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("reportQuantityRsIndexes: ");
			reportQuantityRsIndexes.appendAsString(sb, indentLevel + 1);
		}
		
		if (maxNrofRSIndexesToReport != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNrofRSIndexesToReport: ").append(maxNrofRSIndexesToReport);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (includeBeamMeasurements != null) {
			sb.append("includeBeamMeasurements: ").append(includeBeamMeasurements);
		}
		else {
			sb.append("includeBeamMeasurements: <empty-required-field>");
		}
		
		if (reportAddNeighMeas != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("reportAddNeighMeas: ").append(reportAddNeighMeas);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

