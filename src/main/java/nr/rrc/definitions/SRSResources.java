/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SRSResources implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum maxNumberAperiodicSRSPerBWP = null;
	private BerInteger maxNumberAperiodicSRSPerBWPPerSlot = null;
	private BerEnum maxNumberPeriodicSRSPerBWP = null;
	private BerInteger maxNumberPeriodicSRSPerBWPPerSlot = null;
	private BerEnum maxNumberSemiPersitentSRSPerBWP = null;
	private BerInteger maxNumberSPSRSPerBWPPerSlot = null;
	private BerEnum maxNumberSRSPortsPerResource = null;
	
	public SRSResources() {
	}

	public SRSResources(byte[] code) {
		this.code = code;
	}

	public void setMaxNumberAperiodicSRSPerBWP(BerEnum maxNumberAperiodicSRSPerBWP) {
		this.maxNumberAperiodicSRSPerBWP = maxNumberAperiodicSRSPerBWP;
	}

	public BerEnum getMaxNumberAperiodicSRSPerBWP() {
		return maxNumberAperiodicSRSPerBWP;
	}

	public void setMaxNumberAperiodicSRSPerBWPPerSlot(BerInteger maxNumberAperiodicSRSPerBWPPerSlot) {
		this.maxNumberAperiodicSRSPerBWPPerSlot = maxNumberAperiodicSRSPerBWPPerSlot;
	}

	public BerInteger getMaxNumberAperiodicSRSPerBWPPerSlot() {
		return maxNumberAperiodicSRSPerBWPPerSlot;
	}

	public void setMaxNumberPeriodicSRSPerBWP(BerEnum maxNumberPeriodicSRSPerBWP) {
		this.maxNumberPeriodicSRSPerBWP = maxNumberPeriodicSRSPerBWP;
	}

	public BerEnum getMaxNumberPeriodicSRSPerBWP() {
		return maxNumberPeriodicSRSPerBWP;
	}

	public void setMaxNumberPeriodicSRSPerBWPPerSlot(BerInteger maxNumberPeriodicSRSPerBWPPerSlot) {
		this.maxNumberPeriodicSRSPerBWPPerSlot = maxNumberPeriodicSRSPerBWPPerSlot;
	}

	public BerInteger getMaxNumberPeriodicSRSPerBWPPerSlot() {
		return maxNumberPeriodicSRSPerBWPPerSlot;
	}

	public void setMaxNumberSemiPersitentSRSPerBWP(BerEnum maxNumberSemiPersitentSRSPerBWP) {
		this.maxNumberSemiPersitentSRSPerBWP = maxNumberSemiPersitentSRSPerBWP;
	}

	public BerEnum getMaxNumberSemiPersitentSRSPerBWP() {
		return maxNumberSemiPersitentSRSPerBWP;
	}

	public void setMaxNumberSPSRSPerBWPPerSlot(BerInteger maxNumberSPSRSPerBWPPerSlot) {
		this.maxNumberSPSRSPerBWPPerSlot = maxNumberSPSRSPerBWPPerSlot;
	}

	public BerInteger getMaxNumberSPSRSPerBWPPerSlot() {
		return maxNumberSPSRSPerBWPPerSlot;
	}

	public void setMaxNumberSRSPortsPerResource(BerEnum maxNumberSRSPortsPerResource) {
		this.maxNumberSRSPortsPerResource = maxNumberSRSPortsPerResource;
	}

	public BerEnum getMaxNumberSRSPortsPerResource() {
		return maxNumberSRSPortsPerResource;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += maxNumberSRSPortsPerResource.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		codeLength += maxNumberSPSRSPerBWPPerSlot.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += maxNumberSemiPersitentSRSPerBWP.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += maxNumberPeriodicSRSPerBWPPerSlot.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += maxNumberPeriodicSRSPerBWP.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += maxNumberAperiodicSRSPerBWPPerSlot.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += maxNumberAperiodicSRSPerBWP.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			maxNumberAperiodicSRSPerBWP = new BerEnum();
			subCodeLength += maxNumberAperiodicSRSPerBWP.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			maxNumberAperiodicSRSPerBWPPerSlot = new BerInteger();
			subCodeLength += maxNumberAperiodicSRSPerBWPPerSlot.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			maxNumberPeriodicSRSPerBWP = new BerEnum();
			subCodeLength += maxNumberPeriodicSRSPerBWP.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			maxNumberPeriodicSRSPerBWPPerSlot = new BerInteger();
			subCodeLength += maxNumberPeriodicSRSPerBWPPerSlot.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			maxNumberSemiPersitentSRSPerBWP = new BerEnum();
			subCodeLength += maxNumberSemiPersitentSRSPerBWP.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			maxNumberSPSRSPerBWPPerSlot = new BerInteger();
			subCodeLength += maxNumberSPSRSPerBWPPerSlot.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			maxNumberSRSPortsPerResource = new BerEnum();
			subCodeLength += maxNumberSRSPortsPerResource.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberAperiodicSRSPerBWP != null) {
			sb.append("maxNumberAperiodicSRSPerBWP: ").append(maxNumberAperiodicSRSPerBWP);
		}
		else {
			sb.append("maxNumberAperiodicSRSPerBWP: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberAperiodicSRSPerBWPPerSlot != null) {
			sb.append("maxNumberAperiodicSRSPerBWPPerSlot: ").append(maxNumberAperiodicSRSPerBWPPerSlot);
		}
		else {
			sb.append("maxNumberAperiodicSRSPerBWPPerSlot: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberPeriodicSRSPerBWP != null) {
			sb.append("maxNumberPeriodicSRSPerBWP: ").append(maxNumberPeriodicSRSPerBWP);
		}
		else {
			sb.append("maxNumberPeriodicSRSPerBWP: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberPeriodicSRSPerBWPPerSlot != null) {
			sb.append("maxNumberPeriodicSRSPerBWPPerSlot: ").append(maxNumberPeriodicSRSPerBWPPerSlot);
		}
		else {
			sb.append("maxNumberPeriodicSRSPerBWPPerSlot: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberSemiPersitentSRSPerBWP != null) {
			sb.append("maxNumberSemiPersitentSRSPerBWP: ").append(maxNumberSemiPersitentSRSPerBWP);
		}
		else {
			sb.append("maxNumberSemiPersitentSRSPerBWP: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberSPSRSPerBWPPerSlot != null) {
			sb.append("maxNumberSPSRSPerBWPPerSlot: ").append(maxNumberSPSRSPerBWPPerSlot);
		}
		else {
			sb.append("maxNumberSPSRSPerBWPPerSlot: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberSRSPortsPerResource != null) {
			sb.append("maxNumberSRSPortsPerResource: ").append(maxNumberSRSPortsPerResource);
		}
		else {
			sb.append("maxNumberSRSPortsPerResource: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

