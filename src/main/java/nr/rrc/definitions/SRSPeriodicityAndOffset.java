/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SRSPeriodicityAndOffset implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private BerNull sl1 = null;
	private BerInteger sl2 = null;
	private BerInteger sl4 = null;
	private BerInteger sl5 = null;
	private BerInteger sl8 = null;
	private BerInteger sl10 = null;
	private BerInteger sl16 = null;
	private BerInteger sl20 = null;
	private BerInteger sl32 = null;
	private BerInteger sl40 = null;
	private BerInteger sl64 = null;
	private BerInteger sl80 = null;
	private BerInteger sl160 = null;
	private BerInteger sl320 = null;
	private BerInteger sl640 = null;
	private BerInteger sl1280 = null;
	private BerInteger sl2560 = null;
	
	public SRSPeriodicityAndOffset() {
	}

	public SRSPeriodicityAndOffset(byte[] code) {
		this.code = code;
	}

	public void setSl1(BerNull sl1) {
		this.sl1 = sl1;
	}

	public BerNull getSl1() {
		return sl1;
	}

	public void setSl2(BerInteger sl2) {
		this.sl2 = sl2;
	}

	public BerInteger getSl2() {
		return sl2;
	}

	public void setSl4(BerInteger sl4) {
		this.sl4 = sl4;
	}

	public BerInteger getSl4() {
		return sl4;
	}

	public void setSl5(BerInteger sl5) {
		this.sl5 = sl5;
	}

	public BerInteger getSl5() {
		return sl5;
	}

	public void setSl8(BerInteger sl8) {
		this.sl8 = sl8;
	}

	public BerInteger getSl8() {
		return sl8;
	}

	public void setSl10(BerInteger sl10) {
		this.sl10 = sl10;
	}

	public BerInteger getSl10() {
		return sl10;
	}

	public void setSl16(BerInteger sl16) {
		this.sl16 = sl16;
	}

	public BerInteger getSl16() {
		return sl16;
	}

	public void setSl20(BerInteger sl20) {
		this.sl20 = sl20;
	}

	public BerInteger getSl20() {
		return sl20;
	}

	public void setSl32(BerInteger sl32) {
		this.sl32 = sl32;
	}

	public BerInteger getSl32() {
		return sl32;
	}

	public void setSl40(BerInteger sl40) {
		this.sl40 = sl40;
	}

	public BerInteger getSl40() {
		return sl40;
	}

	public void setSl64(BerInteger sl64) {
		this.sl64 = sl64;
	}

	public BerInteger getSl64() {
		return sl64;
	}

	public void setSl80(BerInteger sl80) {
		this.sl80 = sl80;
	}

	public BerInteger getSl80() {
		return sl80;
	}

	public void setSl160(BerInteger sl160) {
		this.sl160 = sl160;
	}

	public BerInteger getSl160() {
		return sl160;
	}

	public void setSl320(BerInteger sl320) {
		this.sl320 = sl320;
	}

	public BerInteger getSl320() {
		return sl320;
	}

	public void setSl640(BerInteger sl640) {
		this.sl640 = sl640;
	}

	public BerInteger getSl640() {
		return sl640;
	}

	public void setSl1280(BerInteger sl1280) {
		this.sl1280 = sl1280;
	}

	public BerInteger getSl1280() {
		return sl1280;
	}

	public void setSl2560(BerInteger sl2560) {
		this.sl2560 = sl2560;
	}

	public BerInteger getSl2560() {
		return sl2560;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (sl2560 != null) {
			codeLength += sl2560.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			reverseOS.write(0x90);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl1280 != null) {
			codeLength += sl1280.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl640 != null) {
			codeLength += sl640.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			reverseOS.write(0x8E);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl320 != null) {
			codeLength += sl320.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			reverseOS.write(0x8D);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl160 != null) {
			codeLength += sl160.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl80 != null) {
			codeLength += sl80.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			reverseOS.write(0x8B);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl64 != null) {
			codeLength += sl64.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl40 != null) {
			codeLength += sl40.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl32 != null) {
			codeLength += sl32.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl20 != null) {
			codeLength += sl20.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl16 != null) {
			codeLength += sl16.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl10 != null) {
			codeLength += sl10.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl8 != null) {
			codeLength += sl8.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl5 != null) {
			codeLength += sl5.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl4 != null) {
			codeLength += sl4.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl2 != null) {
			codeLength += sl2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		if (sl1 != null) {
			codeLength += sl1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			sl1 = new BerNull();
			codeLength += sl1.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			sl2 = new BerInteger();
			codeLength += sl2.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			sl4 = new BerInteger();
			codeLength += sl4.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			sl5 = new BerInteger();
			codeLength += sl5.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			sl8 = new BerInteger();
			codeLength += sl8.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			sl10 = new BerInteger();
			codeLength += sl10.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			sl16 = new BerInteger();
			codeLength += sl16.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			sl20 = new BerInteger();
			codeLength += sl20.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			sl32 = new BerInteger();
			codeLength += sl32.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			sl40 = new BerInteger();
			codeLength += sl40.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			sl64 = new BerInteger();
			codeLength += sl64.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			sl80 = new BerInteger();
			codeLength += sl80.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			sl160 = new BerInteger();
			codeLength += sl160.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			sl320 = new BerInteger();
			codeLength += sl320.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			sl640 = new BerInteger();
			codeLength += sl640.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			sl1280 = new BerInteger();
			codeLength += sl1280.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			sl2560 = new BerInteger();
			codeLength += sl2560.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (sl1 != null) {
			sb.append("sl1: ").append(sl1);
			return;
		}

		if (sl2 != null) {
			sb.append("sl2: ").append(sl2);
			return;
		}

		if (sl4 != null) {
			sb.append("sl4: ").append(sl4);
			return;
		}

		if (sl5 != null) {
			sb.append("sl5: ").append(sl5);
			return;
		}

		if (sl8 != null) {
			sb.append("sl8: ").append(sl8);
			return;
		}

		if (sl10 != null) {
			sb.append("sl10: ").append(sl10);
			return;
		}

		if (sl16 != null) {
			sb.append("sl16: ").append(sl16);
			return;
		}

		if (sl20 != null) {
			sb.append("sl20: ").append(sl20);
			return;
		}

		if (sl32 != null) {
			sb.append("sl32: ").append(sl32);
			return;
		}

		if (sl40 != null) {
			sb.append("sl40: ").append(sl40);
			return;
		}

		if (sl64 != null) {
			sb.append("sl64: ").append(sl64);
			return;
		}

		if (sl80 != null) {
			sb.append("sl80: ").append(sl80);
			return;
		}

		if (sl160 != null) {
			sb.append("sl160: ").append(sl160);
			return;
		}

		if (sl320 != null) {
			sb.append("sl320: ").append(sl320);
			return;
		}

		if (sl640 != null) {
			sb.append("sl640: ").append(sl640);
			return;
		}

		if (sl1280 != null) {
			sb.append("sl1280: ").append(sl1280);
			return;
		}

		if (sl2560 != null) {
			sb.append("sl2560: ").append(sl2560);
			return;
		}

		sb.append("<none>");
	}

}

