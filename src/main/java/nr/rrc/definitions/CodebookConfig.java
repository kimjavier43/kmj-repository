/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CodebookConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class CodebookType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Type1 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class SubType implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class TypeISinglePanel implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class NrOfAntennaPorts implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						public static class Two implements BerType, Serializable {

							private static final long serialVersionUID = 1L;

							public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

							public byte[] code = null;
							private BerBitString twoTXCodebookSubsetRestriction = null;
							
							public Two() {
							}

							public Two(byte[] code) {
								this.code = code;
							}

							public void setTwoTXCodebookSubsetRestriction(BerBitString twoTXCodebookSubsetRestriction) {
								this.twoTXCodebookSubsetRestriction = twoTXCodebookSubsetRestriction;
							}

							public BerBitString getTwoTXCodebookSubsetRestriction() {
								return twoTXCodebookSubsetRestriction;
							}

							public int encode(OutputStream reverseOS) throws IOException {
								return encode(reverseOS, true);
							}

							public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

								if (code != null) {
									for (int i = code.length - 1; i >= 0; i--) {
										reverseOS.write(code[i]);
									}
									if (withTag) {
										return tag.encode(reverseOS) + code.length;
									}
									return code.length;
								}

								int codeLength = 0;
								codeLength += twoTXCodebookSubsetRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								
								codeLength += BerLength.encodeLength(reverseOS, codeLength);

								if (withTag) {
									codeLength += tag.encode(reverseOS);
								}

								return codeLength;

							}

							public int decode(InputStream is) throws IOException {
								return decode(is, true);
							}

							public int decode(InputStream is, boolean withTag) throws IOException {
								int codeLength = 0;
								int subCodeLength = 0;
								BerTag berTag = new BerTag();

								if (withTag) {
									codeLength += tag.decodeAndCheck(is);
								}

								BerLength length = new BerLength();
								codeLength += length.decode(is);

								int totalLength = length.val;
								codeLength += totalLength;

								subCodeLength += berTag.decode(is);
								if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
									twoTXCodebookSubsetRestriction = new BerBitString();
									subCodeLength += twoTXCodebookSubsetRestriction.decode(is, false);
									if (subCodeLength == totalLength) {
										return codeLength;
									}
								}
								throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

								
							}

							public void encodeAndSave(int encodingSizeGuess) throws IOException {
								ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
								encode(reverseOS, false);
								code = reverseOS.getArray();
							}

							public String toString() {
								StringBuilder sb = new StringBuilder();
								appendAsString(sb, 0);
								return sb.toString();
							}

							public void appendAsString(StringBuilder sb, int indentLevel) {

								sb.append("{");
								sb.append("\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								if (twoTXCodebookSubsetRestriction != null) {
									sb.append("twoTXCodebookSubsetRestriction: ").append(twoTXCodebookSubsetRestriction);
								}
								else {
									sb.append("twoTXCodebookSubsetRestriction: <empty-required-field>");
								}
								
								sb.append("\n");
								for (int i = 0; i < indentLevel; i++) {
									sb.append("\t");
								}
								sb.append("}");
							}

						}

						public static class MoreThanTwo implements BerType, Serializable {

							private static final long serialVersionUID = 1L;

							public static class N1N2 implements BerType, Serializable {

								private static final long serialVersionUID = 1L;

								public byte[] code = null;
								private BerBitString twoOneTypeISinglePanelRestriction = null;
								private BerBitString twoTwoTypeISinglePanelRestriction = null;
								private BerBitString fourOneTypeISinglePanelRestriction = null;
								private BerBitString threeTwoTypeISinglePanelRestriction = null;
								private BerBitString sixOneTypeISinglePanelRestriction = null;
								private BerBitString fourTwoTypeISinglePanelRestriction = null;
								private BerBitString eightOneTypeISinglePanelRestriction = null;
								private BerBitString fourThreeTypeISinglePanelRestriction = null;
								private BerBitString sixTwoTypeISinglePanelRestriction = null;
								private BerBitString twelveOneTypeISinglePanelRestriction = null;
								private BerBitString fourFourTypeISinglePanelRestriction = null;
								private BerBitString eightTwoTypeISinglePanelRestriction = null;
								private BerBitString sixteenOneTypeISinglePanelRestriction = null;
								
								public N1N2() {
								}

								public N1N2(byte[] code) {
									this.code = code;
								}

								public void setTwoOneTypeISinglePanelRestriction(BerBitString twoOneTypeISinglePanelRestriction) {
									this.twoOneTypeISinglePanelRestriction = twoOneTypeISinglePanelRestriction;
								}

								public BerBitString getTwoOneTypeISinglePanelRestriction() {
									return twoOneTypeISinglePanelRestriction;
								}

								public void setTwoTwoTypeISinglePanelRestriction(BerBitString twoTwoTypeISinglePanelRestriction) {
									this.twoTwoTypeISinglePanelRestriction = twoTwoTypeISinglePanelRestriction;
								}

								public BerBitString getTwoTwoTypeISinglePanelRestriction() {
									return twoTwoTypeISinglePanelRestriction;
								}

								public void setFourOneTypeISinglePanelRestriction(BerBitString fourOneTypeISinglePanelRestriction) {
									this.fourOneTypeISinglePanelRestriction = fourOneTypeISinglePanelRestriction;
								}

								public BerBitString getFourOneTypeISinglePanelRestriction() {
									return fourOneTypeISinglePanelRestriction;
								}

								public void setThreeTwoTypeISinglePanelRestriction(BerBitString threeTwoTypeISinglePanelRestriction) {
									this.threeTwoTypeISinglePanelRestriction = threeTwoTypeISinglePanelRestriction;
								}

								public BerBitString getThreeTwoTypeISinglePanelRestriction() {
									return threeTwoTypeISinglePanelRestriction;
								}

								public void setSixOneTypeISinglePanelRestriction(BerBitString sixOneTypeISinglePanelRestriction) {
									this.sixOneTypeISinglePanelRestriction = sixOneTypeISinglePanelRestriction;
								}

								public BerBitString getSixOneTypeISinglePanelRestriction() {
									return sixOneTypeISinglePanelRestriction;
								}

								public void setFourTwoTypeISinglePanelRestriction(BerBitString fourTwoTypeISinglePanelRestriction) {
									this.fourTwoTypeISinglePanelRestriction = fourTwoTypeISinglePanelRestriction;
								}

								public BerBitString getFourTwoTypeISinglePanelRestriction() {
									return fourTwoTypeISinglePanelRestriction;
								}

								public void setEightOneTypeISinglePanelRestriction(BerBitString eightOneTypeISinglePanelRestriction) {
									this.eightOneTypeISinglePanelRestriction = eightOneTypeISinglePanelRestriction;
								}

								public BerBitString getEightOneTypeISinglePanelRestriction() {
									return eightOneTypeISinglePanelRestriction;
								}

								public void setFourThreeTypeISinglePanelRestriction(BerBitString fourThreeTypeISinglePanelRestriction) {
									this.fourThreeTypeISinglePanelRestriction = fourThreeTypeISinglePanelRestriction;
								}

								public BerBitString getFourThreeTypeISinglePanelRestriction() {
									return fourThreeTypeISinglePanelRestriction;
								}

								public void setSixTwoTypeISinglePanelRestriction(BerBitString sixTwoTypeISinglePanelRestriction) {
									this.sixTwoTypeISinglePanelRestriction = sixTwoTypeISinglePanelRestriction;
								}

								public BerBitString getSixTwoTypeISinglePanelRestriction() {
									return sixTwoTypeISinglePanelRestriction;
								}

								public void setTwelveOneTypeISinglePanelRestriction(BerBitString twelveOneTypeISinglePanelRestriction) {
									this.twelveOneTypeISinglePanelRestriction = twelveOneTypeISinglePanelRestriction;
								}

								public BerBitString getTwelveOneTypeISinglePanelRestriction() {
									return twelveOneTypeISinglePanelRestriction;
								}

								public void setFourFourTypeISinglePanelRestriction(BerBitString fourFourTypeISinglePanelRestriction) {
									this.fourFourTypeISinglePanelRestriction = fourFourTypeISinglePanelRestriction;
								}

								public BerBitString getFourFourTypeISinglePanelRestriction() {
									return fourFourTypeISinglePanelRestriction;
								}

								public void setEightTwoTypeISinglePanelRestriction(BerBitString eightTwoTypeISinglePanelRestriction) {
									this.eightTwoTypeISinglePanelRestriction = eightTwoTypeISinglePanelRestriction;
								}

								public BerBitString getEightTwoTypeISinglePanelRestriction() {
									return eightTwoTypeISinglePanelRestriction;
								}

								public void setSixteenOneTypeISinglePanelRestriction(BerBitString sixteenOneTypeISinglePanelRestriction) {
									this.sixteenOneTypeISinglePanelRestriction = sixteenOneTypeISinglePanelRestriction;
								}

								public BerBitString getSixteenOneTypeISinglePanelRestriction() {
									return sixteenOneTypeISinglePanelRestriction;
								}

								public int encode(OutputStream reverseOS) throws IOException {

									if (code != null) {
										for (int i = code.length - 1; i >= 0; i--) {
											reverseOS.write(code[i]);
										}
										return code.length;
									}

									int codeLength = 0;
									if (sixteenOneTypeISinglePanelRestriction != null) {
										codeLength += sixteenOneTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 12
										reverseOS.write(0x8C);
										codeLength += 1;
										return codeLength;
									}
									
									if (eightTwoTypeISinglePanelRestriction != null) {
										codeLength += eightTwoTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 11
										reverseOS.write(0x8B);
										codeLength += 1;
										return codeLength;
									}
									
									if (fourFourTypeISinglePanelRestriction != null) {
										codeLength += fourFourTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 10
										reverseOS.write(0x8A);
										codeLength += 1;
										return codeLength;
									}
									
									if (twelveOneTypeISinglePanelRestriction != null) {
										codeLength += twelveOneTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 9
										reverseOS.write(0x89);
										codeLength += 1;
										return codeLength;
									}
									
									if (sixTwoTypeISinglePanelRestriction != null) {
										codeLength += sixTwoTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 8
										reverseOS.write(0x88);
										codeLength += 1;
										return codeLength;
									}
									
									if (fourThreeTypeISinglePanelRestriction != null) {
										codeLength += fourThreeTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 7
										reverseOS.write(0x87);
										codeLength += 1;
										return codeLength;
									}
									
									if (eightOneTypeISinglePanelRestriction != null) {
										codeLength += eightOneTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 6
										reverseOS.write(0x86);
										codeLength += 1;
										return codeLength;
									}
									
									if (fourTwoTypeISinglePanelRestriction != null) {
										codeLength += fourTwoTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 5
										reverseOS.write(0x85);
										codeLength += 1;
										return codeLength;
									}
									
									if (sixOneTypeISinglePanelRestriction != null) {
										codeLength += sixOneTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 4
										reverseOS.write(0x84);
										codeLength += 1;
										return codeLength;
									}
									
									if (threeTwoTypeISinglePanelRestriction != null) {
										codeLength += threeTwoTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 3
										reverseOS.write(0x83);
										codeLength += 1;
										return codeLength;
									}
									
									if (fourOneTypeISinglePanelRestriction != null) {
										codeLength += fourOneTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 2
										reverseOS.write(0x82);
										codeLength += 1;
										return codeLength;
									}
									
									if (twoTwoTypeISinglePanelRestriction != null) {
										codeLength += twoTwoTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 1
										reverseOS.write(0x81);
										codeLength += 1;
										return codeLength;
									}
									
									if (twoOneTypeISinglePanelRestriction != null) {
										codeLength += twoOneTypeISinglePanelRestriction.encode(reverseOS, false);
										// write tag: CONTEXT_CLASS, PRIMITIVE, 0
										reverseOS.write(0x80);
										codeLength += 1;
										return codeLength;
									}
									
									throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
								}

								public int decode(InputStream is) throws IOException {
									return decode(is, null);
								}

								public int decode(InputStream is, BerTag berTag) throws IOException {

									int codeLength = 0;
									BerTag passedTag = berTag;

									if (berTag == null) {
										berTag = new BerTag();
										codeLength += berTag.decode(is);
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
										twoOneTypeISinglePanelRestriction = new BerBitString();
										codeLength += twoOneTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
										twoTwoTypeISinglePanelRestriction = new BerBitString();
										codeLength += twoTwoTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
										fourOneTypeISinglePanelRestriction = new BerBitString();
										codeLength += fourOneTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
										threeTwoTypeISinglePanelRestriction = new BerBitString();
										codeLength += threeTwoTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
										sixOneTypeISinglePanelRestriction = new BerBitString();
										codeLength += sixOneTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
										fourTwoTypeISinglePanelRestriction = new BerBitString();
										codeLength += fourTwoTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
										eightOneTypeISinglePanelRestriction = new BerBitString();
										codeLength += eightOneTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
										fourThreeTypeISinglePanelRestriction = new BerBitString();
										codeLength += fourThreeTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
										sixTwoTypeISinglePanelRestriction = new BerBitString();
										codeLength += sixTwoTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
										twelveOneTypeISinglePanelRestriction = new BerBitString();
										codeLength += twelveOneTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
										fourFourTypeISinglePanelRestriction = new BerBitString();
										codeLength += fourFourTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
										eightTwoTypeISinglePanelRestriction = new BerBitString();
										codeLength += eightTwoTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
										sixteenOneTypeISinglePanelRestriction = new BerBitString();
										codeLength += sixteenOneTypeISinglePanelRestriction.decode(is, false);
										return codeLength;
									}

									if (passedTag != null) {
										return 0;
									}

									throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
								}

								public void encodeAndSave(int encodingSizeGuess) throws IOException {
									ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
									encode(reverseOS);
									code = reverseOS.getArray();
								}

								public String toString() {
									StringBuilder sb = new StringBuilder();
									appendAsString(sb, 0);
									return sb.toString();
								}

								public void appendAsString(StringBuilder sb, int indentLevel) {

									if (twoOneTypeISinglePanelRestriction != null) {
										sb.append("twoOneTypeISinglePanelRestriction: ").append(twoOneTypeISinglePanelRestriction);
										return;
									}

									if (twoTwoTypeISinglePanelRestriction != null) {
										sb.append("twoTwoTypeISinglePanelRestriction: ").append(twoTwoTypeISinglePanelRestriction);
										return;
									}

									if (fourOneTypeISinglePanelRestriction != null) {
										sb.append("fourOneTypeISinglePanelRestriction: ").append(fourOneTypeISinglePanelRestriction);
										return;
									}

									if (threeTwoTypeISinglePanelRestriction != null) {
										sb.append("threeTwoTypeISinglePanelRestriction: ").append(threeTwoTypeISinglePanelRestriction);
										return;
									}

									if (sixOneTypeISinglePanelRestriction != null) {
										sb.append("sixOneTypeISinglePanelRestriction: ").append(sixOneTypeISinglePanelRestriction);
										return;
									}

									if (fourTwoTypeISinglePanelRestriction != null) {
										sb.append("fourTwoTypeISinglePanelRestriction: ").append(fourTwoTypeISinglePanelRestriction);
										return;
									}

									if (eightOneTypeISinglePanelRestriction != null) {
										sb.append("eightOneTypeISinglePanelRestriction: ").append(eightOneTypeISinglePanelRestriction);
										return;
									}

									if (fourThreeTypeISinglePanelRestriction != null) {
										sb.append("fourThreeTypeISinglePanelRestriction: ").append(fourThreeTypeISinglePanelRestriction);
										return;
									}

									if (sixTwoTypeISinglePanelRestriction != null) {
										sb.append("sixTwoTypeISinglePanelRestriction: ").append(sixTwoTypeISinglePanelRestriction);
										return;
									}

									if (twelveOneTypeISinglePanelRestriction != null) {
										sb.append("twelveOneTypeISinglePanelRestriction: ").append(twelveOneTypeISinglePanelRestriction);
										return;
									}

									if (fourFourTypeISinglePanelRestriction != null) {
										sb.append("fourFourTypeISinglePanelRestriction: ").append(fourFourTypeISinglePanelRestriction);
										return;
									}

									if (eightTwoTypeISinglePanelRestriction != null) {
										sb.append("eightTwoTypeISinglePanelRestriction: ").append(eightTwoTypeISinglePanelRestriction);
										return;
									}

									if (sixteenOneTypeISinglePanelRestriction != null) {
										sb.append("sixteenOneTypeISinglePanelRestriction: ").append(sixteenOneTypeISinglePanelRestriction);
										return;
									}

									sb.append("<none>");
								}

							}

							public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

							public byte[] code = null;
							private N1N2 n1N2 = null;
							private BerBitString typeISinglePanelCodebookSubsetRestrictionI2 = null;
							
							public MoreThanTwo() {
							}

							public MoreThanTwo(byte[] code) {
								this.code = code;
							}

							public void setN1N2(N1N2 n1N2) {
								this.n1N2 = n1N2;
							}

							public N1N2 getN1N2() {
								return n1N2;
							}

							public void setTypeISinglePanelCodebookSubsetRestrictionI2(BerBitString typeISinglePanelCodebookSubsetRestrictionI2) {
								this.typeISinglePanelCodebookSubsetRestrictionI2 = typeISinglePanelCodebookSubsetRestrictionI2;
							}

							public BerBitString getTypeISinglePanelCodebookSubsetRestrictionI2() {
								return typeISinglePanelCodebookSubsetRestrictionI2;
							}

							public int encode(OutputStream reverseOS) throws IOException {
								return encode(reverseOS, true);
							}

							public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

								if (code != null) {
									for (int i = code.length - 1; i >= 0; i--) {
										reverseOS.write(code[i]);
									}
									if (withTag) {
										return tag.encode(reverseOS) + code.length;
									}
									return code.length;
								}

								int codeLength = 0;
								int sublength;

								if (typeISinglePanelCodebookSubsetRestrictionI2 != null) {
									codeLength += typeISinglePanelCodebookSubsetRestrictionI2.encode(reverseOS, false);
									// write tag: CONTEXT_CLASS, PRIMITIVE, 1
									reverseOS.write(0x81);
									codeLength += 1;
								}
								
								sublength = n1N2.encode(reverseOS);
								codeLength += sublength;
								codeLength += BerLength.encodeLength(reverseOS, sublength);
								// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
								reverseOS.write(0xA0);
								codeLength += 1;
								
								codeLength += BerLength.encodeLength(reverseOS, codeLength);

								if (withTag) {
									codeLength += tag.encode(reverseOS);
								}

								return codeLength;

							}

							public int decode(InputStream is) throws IOException {
								return decode(is, true);
							}

							public int decode(InputStream is, boolean withTag) throws IOException {
								int codeLength = 0;
								int subCodeLength = 0;
								BerTag berTag = new BerTag();

								if (withTag) {
									codeLength += tag.decodeAndCheck(is);
								}

								BerLength length = new BerLength();
								codeLength += length.decode(is);

								int totalLength = length.val;
								codeLength += totalLength;

								subCodeLength += berTag.decode(is);
								if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
									subCodeLength += length.decode(is);
									n1N2 = new N1N2();
									subCodeLength += n1N2.decode(is, null);
									if (subCodeLength == totalLength) {
										return codeLength;
									}
									subCodeLength += berTag.decode(is);
								}
								else {
									throw new IOException("Tag does not match the mandatory sequence element tag.");
								}
								
								if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
									typeISinglePanelCodebookSubsetRestrictionI2 = new BerBitString();
									subCodeLength += typeISinglePanelCodebookSubsetRestrictionI2.decode(is, false);
									if (subCodeLength == totalLength) {
										return codeLength;
									}
								}
								throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

								
							}

							public void encodeAndSave(int encodingSizeGuess) throws IOException {
								ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
								encode(reverseOS, false);
								code = reverseOS.getArray();
							}

							public String toString() {
								StringBuilder sb = new StringBuilder();
								appendAsString(sb, 0);
								return sb.toString();
							}

							public void appendAsString(StringBuilder sb, int indentLevel) {

								sb.append("{");
								sb.append("\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								if (n1N2 != null) {
									sb.append("n1N2: ");
									n1N2.appendAsString(sb, indentLevel + 1);
								}
								else {
									sb.append("n1N2: <empty-required-field>");
								}
								
								if (typeISinglePanelCodebookSubsetRestrictionI2 != null) {
									sb.append(",\n");
									for (int i = 0; i < indentLevel + 1; i++) {
										sb.append("\t");
									}
									sb.append("typeISinglePanelCodebookSubsetRestrictionI2: ").append(typeISinglePanelCodebookSubsetRestrictionI2);
								}
								
								sb.append("\n");
								for (int i = 0; i < indentLevel; i++) {
									sb.append("\t");
								}
								sb.append("}");
							}

						}

						private Two two = null;
						private MoreThanTwo moreThanTwo = null;
						
						public NrOfAntennaPorts() {
						}

						public NrOfAntennaPorts(byte[] code) {
							this.code = code;
						}

						public void setTwo(Two two) {
							this.two = two;
						}

						public Two getTwo() {
							return two;
						}

						public void setMoreThanTwo(MoreThanTwo moreThanTwo) {
							this.moreThanTwo = moreThanTwo;
						}

						public MoreThanTwo getMoreThanTwo() {
							return moreThanTwo;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (moreThanTwo != null) {
								codeLength += moreThanTwo.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
								reverseOS.write(0xA1);
								codeLength += 1;
								return codeLength;
							}
							
							if (two != null) {
								codeLength += two.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
								reverseOS.write(0xA0);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
								two = new Two();
								codeLength += two.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
								moreThanTwo = new MoreThanTwo();
								codeLength += moreThanTwo.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (two != null) {
								sb.append("two: ");
								two.appendAsString(sb, indentLevel + 1);
								return;
							}

							if (moreThanTwo != null) {
								sb.append("moreThanTwo: ");
								moreThanTwo.appendAsString(sb, indentLevel + 1);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private NrOfAntennaPorts nrOfAntennaPorts = null;
					private BerBitString typeISinglePanelRiRestriction = null;
					
					public TypeISinglePanel() {
					}

					public TypeISinglePanel(byte[] code) {
						this.code = code;
					}

					public void setNrOfAntennaPorts(NrOfAntennaPorts nrOfAntennaPorts) {
						this.nrOfAntennaPorts = nrOfAntennaPorts;
					}

					public NrOfAntennaPorts getNrOfAntennaPorts() {
						return nrOfAntennaPorts;
					}

					public void setTypeISinglePanelRiRestriction(BerBitString typeISinglePanelRiRestriction) {
						this.typeISinglePanelRiRestriction = typeISinglePanelRiRestriction;
					}

					public BerBitString getTypeISinglePanelRiRestriction() {
						return typeISinglePanelRiRestriction;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						int sublength;

						codeLength += typeISinglePanelRiRestriction.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						
						sublength = nrOfAntennaPorts.encode(reverseOS);
						codeLength += sublength;
						codeLength += BerLength.encodeLength(reverseOS, sublength);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
							subCodeLength += length.decode(is);
							nrOfAntennaPorts = new NrOfAntennaPorts();
							subCodeLength += nrOfAntennaPorts.decode(is, null);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
							typeISinglePanelRiRestriction = new BerBitString();
							subCodeLength += typeISinglePanelRiRestriction.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (nrOfAntennaPorts != null) {
							sb.append("nrOfAntennaPorts: ");
							nrOfAntennaPorts.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("nrOfAntennaPorts: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (typeISinglePanelRiRestriction != null) {
							sb.append("typeISinglePanelRiRestriction: ").append(typeISinglePanelRiRestriction);
						}
						else {
							sb.append("typeISinglePanelRiRestriction: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class TypeIMultiPanel implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class NgN1N2 implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						private BerBitString twoTwoOneTypeIMultiPanelRestriction = null;
						private BerBitString twoFourOneTypeIMultiPanelRestriction = null;
						private BerBitString fourTwoOneTypeIMultiPanelRestriction = null;
						private BerBitString twoTwoTwoTypeIMultiPanelRestriction = null;
						private BerBitString twoEightOneTypeIMultiPanelRestriction = null;
						private BerBitString fourFourOneTypeIMultiPanelRestriction = null;
						private BerBitString twoFourTwoTypeIMultiPanelRestriction = null;
						private BerBitString fourTwoTwoTypeIMultiPanelRestriction = null;
						
						public NgN1N2() {
						}

						public NgN1N2(byte[] code) {
							this.code = code;
						}

						public void setTwoTwoOneTypeIMultiPanelRestriction(BerBitString twoTwoOneTypeIMultiPanelRestriction) {
							this.twoTwoOneTypeIMultiPanelRestriction = twoTwoOneTypeIMultiPanelRestriction;
						}

						public BerBitString getTwoTwoOneTypeIMultiPanelRestriction() {
							return twoTwoOneTypeIMultiPanelRestriction;
						}

						public void setTwoFourOneTypeIMultiPanelRestriction(BerBitString twoFourOneTypeIMultiPanelRestriction) {
							this.twoFourOneTypeIMultiPanelRestriction = twoFourOneTypeIMultiPanelRestriction;
						}

						public BerBitString getTwoFourOneTypeIMultiPanelRestriction() {
							return twoFourOneTypeIMultiPanelRestriction;
						}

						public void setFourTwoOneTypeIMultiPanelRestriction(BerBitString fourTwoOneTypeIMultiPanelRestriction) {
							this.fourTwoOneTypeIMultiPanelRestriction = fourTwoOneTypeIMultiPanelRestriction;
						}

						public BerBitString getFourTwoOneTypeIMultiPanelRestriction() {
							return fourTwoOneTypeIMultiPanelRestriction;
						}

						public void setTwoTwoTwoTypeIMultiPanelRestriction(BerBitString twoTwoTwoTypeIMultiPanelRestriction) {
							this.twoTwoTwoTypeIMultiPanelRestriction = twoTwoTwoTypeIMultiPanelRestriction;
						}

						public BerBitString getTwoTwoTwoTypeIMultiPanelRestriction() {
							return twoTwoTwoTypeIMultiPanelRestriction;
						}

						public void setTwoEightOneTypeIMultiPanelRestriction(BerBitString twoEightOneTypeIMultiPanelRestriction) {
							this.twoEightOneTypeIMultiPanelRestriction = twoEightOneTypeIMultiPanelRestriction;
						}

						public BerBitString getTwoEightOneTypeIMultiPanelRestriction() {
							return twoEightOneTypeIMultiPanelRestriction;
						}

						public void setFourFourOneTypeIMultiPanelRestriction(BerBitString fourFourOneTypeIMultiPanelRestriction) {
							this.fourFourOneTypeIMultiPanelRestriction = fourFourOneTypeIMultiPanelRestriction;
						}

						public BerBitString getFourFourOneTypeIMultiPanelRestriction() {
							return fourFourOneTypeIMultiPanelRestriction;
						}

						public void setTwoFourTwoTypeIMultiPanelRestriction(BerBitString twoFourTwoTypeIMultiPanelRestriction) {
							this.twoFourTwoTypeIMultiPanelRestriction = twoFourTwoTypeIMultiPanelRestriction;
						}

						public BerBitString getTwoFourTwoTypeIMultiPanelRestriction() {
							return twoFourTwoTypeIMultiPanelRestriction;
						}

						public void setFourTwoTwoTypeIMultiPanelRestriction(BerBitString fourTwoTwoTypeIMultiPanelRestriction) {
							this.fourTwoTwoTypeIMultiPanelRestriction = fourTwoTwoTypeIMultiPanelRestriction;
						}

						public BerBitString getFourTwoTwoTypeIMultiPanelRestriction() {
							return fourTwoTwoTypeIMultiPanelRestriction;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (fourTwoTwoTypeIMultiPanelRestriction != null) {
								codeLength += fourTwoTwoTypeIMultiPanelRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 7
								reverseOS.write(0x87);
								codeLength += 1;
								return codeLength;
							}
							
							if (twoFourTwoTypeIMultiPanelRestriction != null) {
								codeLength += twoFourTwoTypeIMultiPanelRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 6
								reverseOS.write(0x86);
								codeLength += 1;
								return codeLength;
							}
							
							if (fourFourOneTypeIMultiPanelRestriction != null) {
								codeLength += fourFourOneTypeIMultiPanelRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 5
								reverseOS.write(0x85);
								codeLength += 1;
								return codeLength;
							}
							
							if (twoEightOneTypeIMultiPanelRestriction != null) {
								codeLength += twoEightOneTypeIMultiPanelRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 4
								reverseOS.write(0x84);
								codeLength += 1;
								return codeLength;
							}
							
							if (twoTwoTwoTypeIMultiPanelRestriction != null) {
								codeLength += twoTwoTwoTypeIMultiPanelRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 3
								reverseOS.write(0x83);
								codeLength += 1;
								return codeLength;
							}
							
							if (fourTwoOneTypeIMultiPanelRestriction != null) {
								codeLength += fourTwoOneTypeIMultiPanelRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 2
								reverseOS.write(0x82);
								codeLength += 1;
								return codeLength;
							}
							
							if (twoFourOneTypeIMultiPanelRestriction != null) {
								codeLength += twoFourOneTypeIMultiPanelRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 1
								reverseOS.write(0x81);
								codeLength += 1;
								return codeLength;
							}
							
							if (twoTwoOneTypeIMultiPanelRestriction != null) {
								codeLength += twoTwoOneTypeIMultiPanelRestriction.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
								twoTwoOneTypeIMultiPanelRestriction = new BerBitString();
								codeLength += twoTwoOneTypeIMultiPanelRestriction.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
								twoFourOneTypeIMultiPanelRestriction = new BerBitString();
								codeLength += twoFourOneTypeIMultiPanelRestriction.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
								fourTwoOneTypeIMultiPanelRestriction = new BerBitString();
								codeLength += fourTwoOneTypeIMultiPanelRestriction.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
								twoTwoTwoTypeIMultiPanelRestriction = new BerBitString();
								codeLength += twoTwoTwoTypeIMultiPanelRestriction.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
								twoEightOneTypeIMultiPanelRestriction = new BerBitString();
								codeLength += twoEightOneTypeIMultiPanelRestriction.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
								fourFourOneTypeIMultiPanelRestriction = new BerBitString();
								codeLength += fourFourOneTypeIMultiPanelRestriction.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
								twoFourTwoTypeIMultiPanelRestriction = new BerBitString();
								codeLength += twoFourTwoTypeIMultiPanelRestriction.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
								fourTwoTwoTypeIMultiPanelRestriction = new BerBitString();
								codeLength += fourTwoTwoTypeIMultiPanelRestriction.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (twoTwoOneTypeIMultiPanelRestriction != null) {
								sb.append("twoTwoOneTypeIMultiPanelRestriction: ").append(twoTwoOneTypeIMultiPanelRestriction);
								return;
							}

							if (twoFourOneTypeIMultiPanelRestriction != null) {
								sb.append("twoFourOneTypeIMultiPanelRestriction: ").append(twoFourOneTypeIMultiPanelRestriction);
								return;
							}

							if (fourTwoOneTypeIMultiPanelRestriction != null) {
								sb.append("fourTwoOneTypeIMultiPanelRestriction: ").append(fourTwoOneTypeIMultiPanelRestriction);
								return;
							}

							if (twoTwoTwoTypeIMultiPanelRestriction != null) {
								sb.append("twoTwoTwoTypeIMultiPanelRestriction: ").append(twoTwoTwoTypeIMultiPanelRestriction);
								return;
							}

							if (twoEightOneTypeIMultiPanelRestriction != null) {
								sb.append("twoEightOneTypeIMultiPanelRestriction: ").append(twoEightOneTypeIMultiPanelRestriction);
								return;
							}

							if (fourFourOneTypeIMultiPanelRestriction != null) {
								sb.append("fourFourOneTypeIMultiPanelRestriction: ").append(fourFourOneTypeIMultiPanelRestriction);
								return;
							}

							if (twoFourTwoTypeIMultiPanelRestriction != null) {
								sb.append("twoFourTwoTypeIMultiPanelRestriction: ").append(twoFourTwoTypeIMultiPanelRestriction);
								return;
							}

							if (fourTwoTwoTypeIMultiPanelRestriction != null) {
								sb.append("fourTwoTwoTypeIMultiPanelRestriction: ").append(fourTwoTwoTypeIMultiPanelRestriction);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private NgN1N2 ngN1N2 = null;
					private BerBitString riRestriction = null;
					
					public TypeIMultiPanel() {
					}

					public TypeIMultiPanel(byte[] code) {
						this.code = code;
					}

					public void setNgN1N2(NgN1N2 ngN1N2) {
						this.ngN1N2 = ngN1N2;
					}

					public NgN1N2 getNgN1N2() {
						return ngN1N2;
					}

					public void setRiRestriction(BerBitString riRestriction) {
						this.riRestriction = riRestriction;
					}

					public BerBitString getRiRestriction() {
						return riRestriction;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						int sublength;

						codeLength += riRestriction.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						
						sublength = ngN1N2.encode(reverseOS);
						codeLength += sublength;
						codeLength += BerLength.encodeLength(reverseOS, sublength);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
							subCodeLength += length.decode(is);
							ngN1N2 = new NgN1N2();
							subCodeLength += ngN1N2.decode(is, null);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
							riRestriction = new BerBitString();
							subCodeLength += riRestriction.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (ngN1N2 != null) {
							sb.append("ngN1N2: ");
							ngN1N2.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("ngN1N2: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (riRestriction != null) {
							sb.append("riRestriction: ").append(riRestriction);
						}
						else {
							sb.append("riRestriction: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				private TypeISinglePanel typeISinglePanel = null;
				private TypeIMultiPanel typeIMultiPanel = null;
				
				public SubType() {
				}

				public SubType(byte[] code) {
					this.code = code;
				}

				public void setTypeISinglePanel(TypeISinglePanel typeISinglePanel) {
					this.typeISinglePanel = typeISinglePanel;
				}

				public TypeISinglePanel getTypeISinglePanel() {
					return typeISinglePanel;
				}

				public void setTypeIMultiPanel(TypeIMultiPanel typeIMultiPanel) {
					this.typeIMultiPanel = typeIMultiPanel;
				}

				public TypeIMultiPanel getTypeIMultiPanel() {
					return typeIMultiPanel;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (typeIMultiPanel != null) {
						codeLength += typeIMultiPanel.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (typeISinglePanel != null) {
						codeLength += typeISinglePanel.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						typeISinglePanel = new TypeISinglePanel();
						codeLength += typeISinglePanel.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						typeIMultiPanel = new TypeIMultiPanel();
						codeLength += typeIMultiPanel.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (typeISinglePanel != null) {
						sb.append("typeISinglePanel: ");
						typeISinglePanel.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (typeIMultiPanel != null) {
						sb.append("typeIMultiPanel: ");
						typeIMultiPanel.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private SubType subType = null;
			private BerInteger codebookMode = null;
			
			public Type1() {
			}

			public Type1(byte[] code) {
				this.code = code;
			}

			public void setSubType(SubType subType) {
				this.subType = subType;
			}

			public SubType getSubType() {
				return subType;
			}

			public void setCodebookMode(BerInteger codebookMode) {
				this.codebookMode = codebookMode;
			}

			public BerInteger getCodebookMode() {
				return codebookMode;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += codebookMode.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				sublength = subType.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					subType = new SubType();
					subCodeLength += subType.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					codebookMode = new BerInteger();
					subCodeLength += codebookMode.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subType != null) {
					sb.append("subType: ");
					subType.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("subType: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (codebookMode != null) {
					sb.append("codebookMode: ").append(codebookMode);
				}
				else {
					sb.append("codebookMode: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Type2 implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class SubType implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class TypeII implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class N1N2CodebookSubsetRestriction implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						private BerBitString twoOne = null;
						private BerBitString twoTwo = null;
						private BerBitString fourOne = null;
						private BerBitString threeTwo = null;
						private BerBitString sixOne = null;
						private BerBitString fourTwo = null;
						private BerBitString eightOne = null;
						private BerBitString fourThree = null;
						private BerBitString sixTwo = null;
						private BerBitString twelveOne = null;
						private BerBitString fourFour = null;
						private BerBitString eightTwo = null;
						private BerBitString sixteenOne = null;
						
						public N1N2CodebookSubsetRestriction() {
						}

						public N1N2CodebookSubsetRestriction(byte[] code) {
							this.code = code;
						}

						public void setTwoOne(BerBitString twoOne) {
							this.twoOne = twoOne;
						}

						public BerBitString getTwoOne() {
							return twoOne;
						}

						public void setTwoTwo(BerBitString twoTwo) {
							this.twoTwo = twoTwo;
						}

						public BerBitString getTwoTwo() {
							return twoTwo;
						}

						public void setFourOne(BerBitString fourOne) {
							this.fourOne = fourOne;
						}

						public BerBitString getFourOne() {
							return fourOne;
						}

						public void setThreeTwo(BerBitString threeTwo) {
							this.threeTwo = threeTwo;
						}

						public BerBitString getThreeTwo() {
							return threeTwo;
						}

						public void setSixOne(BerBitString sixOne) {
							this.sixOne = sixOne;
						}

						public BerBitString getSixOne() {
							return sixOne;
						}

						public void setFourTwo(BerBitString fourTwo) {
							this.fourTwo = fourTwo;
						}

						public BerBitString getFourTwo() {
							return fourTwo;
						}

						public void setEightOne(BerBitString eightOne) {
							this.eightOne = eightOne;
						}

						public BerBitString getEightOne() {
							return eightOne;
						}

						public void setFourThree(BerBitString fourThree) {
							this.fourThree = fourThree;
						}

						public BerBitString getFourThree() {
							return fourThree;
						}

						public void setSixTwo(BerBitString sixTwo) {
							this.sixTwo = sixTwo;
						}

						public BerBitString getSixTwo() {
							return sixTwo;
						}

						public void setTwelveOne(BerBitString twelveOne) {
							this.twelveOne = twelveOne;
						}

						public BerBitString getTwelveOne() {
							return twelveOne;
						}

						public void setFourFour(BerBitString fourFour) {
							this.fourFour = fourFour;
						}

						public BerBitString getFourFour() {
							return fourFour;
						}

						public void setEightTwo(BerBitString eightTwo) {
							this.eightTwo = eightTwo;
						}

						public BerBitString getEightTwo() {
							return eightTwo;
						}

						public void setSixteenOne(BerBitString sixteenOne) {
							this.sixteenOne = sixteenOne;
						}

						public BerBitString getSixteenOne() {
							return sixteenOne;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (sixteenOne != null) {
								codeLength += sixteenOne.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 12
								reverseOS.write(0x8C);
								codeLength += 1;
								return codeLength;
							}
							
							if (eightTwo != null) {
								codeLength += eightTwo.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 11
								reverseOS.write(0x8B);
								codeLength += 1;
								return codeLength;
							}
							
							if (fourFour != null) {
								codeLength += fourFour.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 10
								reverseOS.write(0x8A);
								codeLength += 1;
								return codeLength;
							}
							
							if (twelveOne != null) {
								codeLength += twelveOne.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 9
								reverseOS.write(0x89);
								codeLength += 1;
								return codeLength;
							}
							
							if (sixTwo != null) {
								codeLength += sixTwo.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 8
								reverseOS.write(0x88);
								codeLength += 1;
								return codeLength;
							}
							
							if (fourThree != null) {
								codeLength += fourThree.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 7
								reverseOS.write(0x87);
								codeLength += 1;
								return codeLength;
							}
							
							if (eightOne != null) {
								codeLength += eightOne.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 6
								reverseOS.write(0x86);
								codeLength += 1;
								return codeLength;
							}
							
							if (fourTwo != null) {
								codeLength += fourTwo.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 5
								reverseOS.write(0x85);
								codeLength += 1;
								return codeLength;
							}
							
							if (sixOne != null) {
								codeLength += sixOne.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 4
								reverseOS.write(0x84);
								codeLength += 1;
								return codeLength;
							}
							
							if (threeTwo != null) {
								codeLength += threeTwo.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 3
								reverseOS.write(0x83);
								codeLength += 1;
								return codeLength;
							}
							
							if (fourOne != null) {
								codeLength += fourOne.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 2
								reverseOS.write(0x82);
								codeLength += 1;
								return codeLength;
							}
							
							if (twoTwo != null) {
								codeLength += twoTwo.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 1
								reverseOS.write(0x81);
								codeLength += 1;
								return codeLength;
							}
							
							if (twoOne != null) {
								codeLength += twoOne.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
								twoOne = new BerBitString();
								codeLength += twoOne.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
								twoTwo = new BerBitString();
								codeLength += twoTwo.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
								fourOne = new BerBitString();
								codeLength += fourOne.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
								threeTwo = new BerBitString();
								codeLength += threeTwo.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
								sixOne = new BerBitString();
								codeLength += sixOne.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
								fourTwo = new BerBitString();
								codeLength += fourTwo.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
								eightOne = new BerBitString();
								codeLength += eightOne.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
								fourThree = new BerBitString();
								codeLength += fourThree.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
								sixTwo = new BerBitString();
								codeLength += sixTwo.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
								twelveOne = new BerBitString();
								codeLength += twelveOne.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
								fourFour = new BerBitString();
								codeLength += fourFour.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
								eightTwo = new BerBitString();
								codeLength += eightTwo.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
								sixteenOne = new BerBitString();
								codeLength += sixteenOne.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (twoOne != null) {
								sb.append("twoOne: ").append(twoOne);
								return;
							}

							if (twoTwo != null) {
								sb.append("twoTwo: ").append(twoTwo);
								return;
							}

							if (fourOne != null) {
								sb.append("fourOne: ").append(fourOne);
								return;
							}

							if (threeTwo != null) {
								sb.append("threeTwo: ").append(threeTwo);
								return;
							}

							if (sixOne != null) {
								sb.append("sixOne: ").append(sixOne);
								return;
							}

							if (fourTwo != null) {
								sb.append("fourTwo: ").append(fourTwo);
								return;
							}

							if (eightOne != null) {
								sb.append("eightOne: ").append(eightOne);
								return;
							}

							if (fourThree != null) {
								sb.append("fourThree: ").append(fourThree);
								return;
							}

							if (sixTwo != null) {
								sb.append("sixTwo: ").append(sixTwo);
								return;
							}

							if (twelveOne != null) {
								sb.append("twelveOne: ").append(twelveOne);
								return;
							}

							if (fourFour != null) {
								sb.append("fourFour: ").append(fourFour);
								return;
							}

							if (eightTwo != null) {
								sb.append("eightTwo: ").append(eightTwo);
								return;
							}

							if (sixteenOne != null) {
								sb.append("sixteenOne: ").append(sixteenOne);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private N1N2CodebookSubsetRestriction n1N2CodebookSubsetRestriction = null;
					private BerBitString typeIIRIRestriction = null;
					
					public TypeII() {
					}

					public TypeII(byte[] code) {
						this.code = code;
					}

					public void setN1N2CodebookSubsetRestriction(N1N2CodebookSubsetRestriction n1N2CodebookSubsetRestriction) {
						this.n1N2CodebookSubsetRestriction = n1N2CodebookSubsetRestriction;
					}

					public N1N2CodebookSubsetRestriction getN1N2CodebookSubsetRestriction() {
						return n1N2CodebookSubsetRestriction;
					}

					public void setTypeIIRIRestriction(BerBitString typeIIRIRestriction) {
						this.typeIIRIRestriction = typeIIRIRestriction;
					}

					public BerBitString getTypeIIRIRestriction() {
						return typeIIRIRestriction;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						int sublength;

						codeLength += typeIIRIRestriction.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						
						sublength = n1N2CodebookSubsetRestriction.encode(reverseOS);
						codeLength += sublength;
						codeLength += BerLength.encodeLength(reverseOS, sublength);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
							subCodeLength += length.decode(is);
							n1N2CodebookSubsetRestriction = new N1N2CodebookSubsetRestriction();
							subCodeLength += n1N2CodebookSubsetRestriction.decode(is, null);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
							typeIIRIRestriction = new BerBitString();
							subCodeLength += typeIIRIRestriction.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (n1N2CodebookSubsetRestriction != null) {
							sb.append("n1N2CodebookSubsetRestriction: ");
							n1N2CodebookSubsetRestriction.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("n1N2CodebookSubsetRestriction: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (typeIIRIRestriction != null) {
							sb.append("typeIIRIRestriction: ").append(typeIIRIRestriction);
						}
						else {
							sb.append("typeIIRIRestriction: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class TypeIIPortSelection implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerEnum portSelectionSamplingSize = null;
					private BerBitString typeIIPortSelectionRIRestriction = null;
					
					public TypeIIPortSelection() {
					}

					public TypeIIPortSelection(byte[] code) {
						this.code = code;
					}

					public void setPortSelectionSamplingSize(BerEnum portSelectionSamplingSize) {
						this.portSelectionSamplingSize = portSelectionSamplingSize;
					}

					public BerEnum getPortSelectionSamplingSize() {
						return portSelectionSamplingSize;
					}

					public void setTypeIIPortSelectionRIRestriction(BerBitString typeIIPortSelectionRIRestriction) {
						this.typeIIPortSelectionRIRestriction = typeIIPortSelectionRIRestriction;
					}

					public BerBitString getTypeIIPortSelectionRIRestriction() {
						return typeIIPortSelectionRIRestriction;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += typeIIPortSelectionRIRestriction.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						
						if (portSelectionSamplingSize != null) {
							codeLength += portSelectionSamplingSize.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 0
							reverseOS.write(0x80);
							codeLength += 1;
						}
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
							portSelectionSamplingSize = new BerEnum();
							subCodeLength += portSelectionSamplingSize.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
							typeIIPortSelectionRIRestriction = new BerBitString();
							subCodeLength += typeIIPortSelectionRIRestriction.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						boolean firstSelectedElement = true;
						if (portSelectionSamplingSize != null) {
							sb.append("\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append("portSelectionSamplingSize: ").append(portSelectionSamplingSize);
							firstSelectedElement = false;
						}
						
						if (!firstSelectedElement) {
							sb.append(",\n");
						}
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (typeIIPortSelectionRIRestriction != null) {
							sb.append("typeIIPortSelectionRIRestriction: ").append(typeIIPortSelectionRIRestriction);
						}
						else {
							sb.append("typeIIPortSelectionRIRestriction: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				private TypeII typeII = null;
				private TypeIIPortSelection typeIIPortSelection = null;
				
				public SubType() {
				}

				public SubType(byte[] code) {
					this.code = code;
				}

				public void setTypeII(TypeII typeII) {
					this.typeII = typeII;
				}

				public TypeII getTypeII() {
					return typeII;
				}

				public void setTypeIIPortSelection(TypeIIPortSelection typeIIPortSelection) {
					this.typeIIPortSelection = typeIIPortSelection;
				}

				public TypeIIPortSelection getTypeIIPortSelection() {
					return typeIIPortSelection;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (typeIIPortSelection != null) {
						codeLength += typeIIPortSelection.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (typeII != null) {
						codeLength += typeII.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						typeII = new TypeII();
						codeLength += typeII.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						typeIIPortSelection = new TypeIIPortSelection();
						codeLength += typeIIPortSelection.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (typeII != null) {
						sb.append("typeII: ");
						typeII.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (typeIIPortSelection != null) {
						sb.append("typeIIPortSelection: ");
						typeIIPortSelection.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private SubType subType = null;
			private BerEnum phaseAlphabetSize = null;
			private BerBoolean subbandAmplitude = null;
			private BerEnum numberOfBeams = null;
			
			public Type2() {
			}

			public Type2(byte[] code) {
				this.code = code;
			}

			public void setSubType(SubType subType) {
				this.subType = subType;
			}

			public SubType getSubType() {
				return subType;
			}

			public void setPhaseAlphabetSize(BerEnum phaseAlphabetSize) {
				this.phaseAlphabetSize = phaseAlphabetSize;
			}

			public BerEnum getPhaseAlphabetSize() {
				return phaseAlphabetSize;
			}

			public void setSubbandAmplitude(BerBoolean subbandAmplitude) {
				this.subbandAmplitude = subbandAmplitude;
			}

			public BerBoolean getSubbandAmplitude() {
				return subbandAmplitude;
			}

			public void setNumberOfBeams(BerEnum numberOfBeams) {
				this.numberOfBeams = numberOfBeams;
			}

			public BerEnum getNumberOfBeams() {
				return numberOfBeams;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				int sublength;

				codeLength += numberOfBeams.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				
				codeLength += subbandAmplitude.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				codeLength += phaseAlphabetSize.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				
				sublength = subType.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					subCodeLength += length.decode(is);
					subType = new SubType();
					subCodeLength += subType.decode(is, null);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					phaseAlphabetSize = new BerEnum();
					subCodeLength += phaseAlphabetSize.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					subbandAmplitude = new BerBoolean();
					subCodeLength += subbandAmplitude.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					numberOfBeams = new BerEnum();
					subCodeLength += numberOfBeams.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subType != null) {
					sb.append("subType: ");
					subType.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("subType: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (phaseAlphabetSize != null) {
					sb.append("phaseAlphabetSize: ").append(phaseAlphabetSize);
				}
				else {
					sb.append("phaseAlphabetSize: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subbandAmplitude != null) {
					sb.append("subbandAmplitude: ").append(subbandAmplitude);
				}
				else {
					sb.append("subbandAmplitude: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (numberOfBeams != null) {
					sb.append("numberOfBeams: ").append(numberOfBeams);
				}
				else {
					sb.append("numberOfBeams: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private Type1 type1 = null;
		private Type2 type2 = null;
		
		public CodebookType() {
		}

		public CodebookType(byte[] code) {
			this.code = code;
		}

		public void setType1(Type1 type1) {
			this.type1 = type1;
		}

		public Type1 getType1() {
			return type1;
		}

		public void setType2(Type2 type2) {
			this.type2 = type2;
		}

		public Type2 getType2() {
			return type2;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (type2 != null) {
				codeLength += type2.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (type1 != null) {
				codeLength += type1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				type1 = new Type1();
				codeLength += type1.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				type2 = new Type2();
				codeLength += type2.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (type1 != null) {
				sb.append("type1: ");
				type1.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (type2 != null) {
				sb.append("type2: ");
				type2.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private CodebookType codebookType = null;
	
	public CodebookConfig() {
	}

	public CodebookConfig(byte[] code) {
		this.code = code;
	}

	public void setCodebookType(CodebookType codebookType) {
		this.codebookType = codebookType;
	}

	public CodebookType getCodebookType() {
		return codebookType;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		sublength = codebookType.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			subCodeLength += length.decode(is);
			codebookType = new CodebookType();
			subCodeLength += codebookType.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (codebookType != null) {
			sb.append("codebookType: ");
			codebookType.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("codebookType: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

