/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class ServingCellConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class DownlinkBWPToReleaseList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<BWPId> seqOf = null;

		public DownlinkBWPToReleaseList() {
			seqOf = new ArrayList<BWPId>();
		}

		public DownlinkBWPToReleaseList(byte[] code) {
			this.code = code;
		}

		public List<BWPId> getBWPId() {
			if (seqOf == null) {
				seqOf = new ArrayList<BWPId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				BWPId element = new BWPId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<BWPId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class DownlinkBWPToAddModList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<BWPDownlink> seqOf = null;

		public DownlinkBWPToAddModList() {
			seqOf = new ArrayList<BWPDownlink>();
		}

		public DownlinkBWPToAddModList(byte[] code) {
			this.code = code;
		}

		public List<BWPDownlink> getBWPDownlink() {
			if (seqOf == null) {
				seqOf = new ArrayList<BWPDownlink>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				BWPDownlink element = new BWPDownlink();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<BWPDownlink> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private TDDULDLConfigDedicated tddULDLConfigurationDedicated = null;
	private BWPDownlinkDedicated initialDownlinkBWP = null;
	private DownlinkBWPToReleaseList downlinkBWPToReleaseList = null;
	private DownlinkBWPToAddModList downlinkBWPToAddModList = null;
	private BWPId firstActiveDownlinkBWPId = null;
	private BerEnum bwpInactivityTimer = null;
	private BWPId defaultDownlinkBWPId = null;
	private UplinkConfig uplinkConfig = null;
	private UplinkConfig supplementaryUplink = null;
	private SetupRelease pdcchServingCellConfig = null;
	private SetupRelease pdschServingCellConfig = null;
	private SetupRelease csiMeasConfig = null;
	private BerEnum sCellDeactivationTimer = null;
	private CrossCarrierSchedulingConfig crossCarrierSchedulingConfig = null;
	private TAGId tagId = null;
	private BerEnum ueBeamLockFunction = null;
	private BerEnum pathlossReferenceLinking = null;
	private MeasObjectId servingCellMO = null;
	
	public ServingCellConfig() {
	}

	public ServingCellConfig(byte[] code) {
		this.code = code;
	}

	public void setTddULDLConfigurationDedicated(TDDULDLConfigDedicated tddULDLConfigurationDedicated) {
		this.tddULDLConfigurationDedicated = tddULDLConfigurationDedicated;
	}

	public TDDULDLConfigDedicated getTddULDLConfigurationDedicated() {
		return tddULDLConfigurationDedicated;
	}

	public void setInitialDownlinkBWP(BWPDownlinkDedicated initialDownlinkBWP) {
		this.initialDownlinkBWP = initialDownlinkBWP;
	}

	public BWPDownlinkDedicated getInitialDownlinkBWP() {
		return initialDownlinkBWP;
	}

	public void setDownlinkBWPToReleaseList(DownlinkBWPToReleaseList downlinkBWPToReleaseList) {
		this.downlinkBWPToReleaseList = downlinkBWPToReleaseList;
	}

	public DownlinkBWPToReleaseList getDownlinkBWPToReleaseList() {
		return downlinkBWPToReleaseList;
	}

	public void setDownlinkBWPToAddModList(DownlinkBWPToAddModList downlinkBWPToAddModList) {
		this.downlinkBWPToAddModList = downlinkBWPToAddModList;
	}

	public DownlinkBWPToAddModList getDownlinkBWPToAddModList() {
		return downlinkBWPToAddModList;
	}

	public void setFirstActiveDownlinkBWPId(BWPId firstActiveDownlinkBWPId) {
		this.firstActiveDownlinkBWPId = firstActiveDownlinkBWPId;
	}

	public BWPId getFirstActiveDownlinkBWPId() {
		return firstActiveDownlinkBWPId;
	}

	public void setBwpInactivityTimer(BerEnum bwpInactivityTimer) {
		this.bwpInactivityTimer = bwpInactivityTimer;
	}

	public BerEnum getBwpInactivityTimer() {
		return bwpInactivityTimer;
	}

	public void setDefaultDownlinkBWPId(BWPId defaultDownlinkBWPId) {
		this.defaultDownlinkBWPId = defaultDownlinkBWPId;
	}

	public BWPId getDefaultDownlinkBWPId() {
		return defaultDownlinkBWPId;
	}

	public void setUplinkConfig(UplinkConfig uplinkConfig) {
		this.uplinkConfig = uplinkConfig;
	}

	public UplinkConfig getUplinkConfig() {
		return uplinkConfig;
	}

	public void setSupplementaryUplink(UplinkConfig supplementaryUplink) {
		this.supplementaryUplink = supplementaryUplink;
	}

	public UplinkConfig getSupplementaryUplink() {
		return supplementaryUplink;
	}

	public void setPdcchServingCellConfig(SetupRelease pdcchServingCellConfig) {
		this.pdcchServingCellConfig = pdcchServingCellConfig;
	}

	public SetupRelease getPdcchServingCellConfig() {
		return pdcchServingCellConfig;
	}

	public void setPdschServingCellConfig(SetupRelease pdschServingCellConfig) {
		this.pdschServingCellConfig = pdschServingCellConfig;
	}

	public SetupRelease getPdschServingCellConfig() {
		return pdschServingCellConfig;
	}

	public void setCsiMeasConfig(SetupRelease csiMeasConfig) {
		this.csiMeasConfig = csiMeasConfig;
	}

	public SetupRelease getCsiMeasConfig() {
		return csiMeasConfig;
	}

	public void setSCellDeactivationTimer(BerEnum sCellDeactivationTimer) {
		this.sCellDeactivationTimer = sCellDeactivationTimer;
	}

	public BerEnum getSCellDeactivationTimer() {
		return sCellDeactivationTimer;
	}

	public void setCrossCarrierSchedulingConfig(CrossCarrierSchedulingConfig crossCarrierSchedulingConfig) {
		this.crossCarrierSchedulingConfig = crossCarrierSchedulingConfig;
	}

	public CrossCarrierSchedulingConfig getCrossCarrierSchedulingConfig() {
		return crossCarrierSchedulingConfig;
	}

	public void setTagId(TAGId tagId) {
		this.tagId = tagId;
	}

	public TAGId getTagId() {
		return tagId;
	}

	public void setUeBeamLockFunction(BerEnum ueBeamLockFunction) {
		this.ueBeamLockFunction = ueBeamLockFunction;
	}

	public BerEnum getUeBeamLockFunction() {
		return ueBeamLockFunction;
	}

	public void setPathlossReferenceLinking(BerEnum pathlossReferenceLinking) {
		this.pathlossReferenceLinking = pathlossReferenceLinking;
	}

	public BerEnum getPathlossReferenceLinking() {
		return pathlossReferenceLinking;
	}

	public void setServingCellMO(MeasObjectId servingCellMO) {
		this.servingCellMO = servingCellMO;
	}

	public MeasObjectId getServingCellMO() {
		return servingCellMO;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (servingCellMO != null) {
			codeLength += servingCellMO.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			reverseOS.write(0x91);
			codeLength += 1;
		}
		
		if (pathlossReferenceLinking != null) {
			codeLength += pathlossReferenceLinking.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			reverseOS.write(0x90);
			codeLength += 1;
		}
		
		if (ueBeamLockFunction != null) {
			codeLength += ueBeamLockFunction.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			reverseOS.write(0x8F);
			codeLength += 1;
		}
		
		codeLength += tagId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 14
		reverseOS.write(0x8E);
		codeLength += 1;
		
		if (crossCarrierSchedulingConfig != null) {
			codeLength += crossCarrierSchedulingConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			reverseOS.write(0xAD);
			codeLength += 1;
		}
		
		if (sCellDeactivationTimer != null) {
			codeLength += sCellDeactivationTimer.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			reverseOS.write(0x8C);
			codeLength += 1;
		}
		
		if (csiMeasConfig != null) {
			sublength = csiMeasConfig.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (pdschServingCellConfig != null) {
			sublength = pdschServingCellConfig.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (pdcchServingCellConfig != null) {
			sublength = pdcchServingCellConfig.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (supplementaryUplink != null) {
			codeLength += supplementaryUplink.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (uplinkConfig != null) {
			codeLength += uplinkConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (defaultDownlinkBWPId != null) {
			codeLength += defaultDownlinkBWPId.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (bwpInactivityTimer != null) {
			codeLength += bwpInactivityTimer.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (firstActiveDownlinkBWPId != null) {
			codeLength += firstActiveDownlinkBWPId.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (downlinkBWPToAddModList != null) {
			codeLength += downlinkBWPToAddModList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (downlinkBWPToReleaseList != null) {
			codeLength += downlinkBWPToReleaseList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (initialDownlinkBWP != null) {
			codeLength += initialDownlinkBWP.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		if (tddULDLConfigurationDedicated != null) {
			codeLength += tddULDLConfigurationDedicated.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			tddULDLConfigurationDedicated = new TDDULDLConfigDedicated();
			subCodeLength += tddULDLConfigurationDedicated.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			initialDownlinkBWP = new BWPDownlinkDedicated();
			subCodeLength += initialDownlinkBWP.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			downlinkBWPToReleaseList = new DownlinkBWPToReleaseList();
			subCodeLength += downlinkBWPToReleaseList.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			downlinkBWPToAddModList = new DownlinkBWPToAddModList();
			subCodeLength += downlinkBWPToAddModList.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			firstActiveDownlinkBWPId = new BWPId();
			subCodeLength += firstActiveDownlinkBWPId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			bwpInactivityTimer = new BerEnum();
			subCodeLength += bwpInactivityTimer.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			defaultDownlinkBWPId = new BWPId();
			subCodeLength += defaultDownlinkBWPId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			uplinkConfig = new UplinkConfig();
			subCodeLength += uplinkConfig.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			supplementaryUplink = new UplinkConfig();
			subCodeLength += supplementaryUplink.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			subCodeLength += length.decode(is);
			pdcchServingCellConfig = new SetupRelease();
			subCodeLength += pdcchServingCellConfig.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			subCodeLength += length.decode(is);
			pdschServingCellConfig = new SetupRelease();
			subCodeLength += pdschServingCellConfig.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			subCodeLength += length.decode(is);
			csiMeasConfig = new SetupRelease();
			subCodeLength += csiMeasConfig.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			sCellDeactivationTimer = new BerEnum();
			subCodeLength += sCellDeactivationTimer.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			crossCarrierSchedulingConfig = new CrossCarrierSchedulingConfig();
			subCodeLength += crossCarrierSchedulingConfig.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			tagId = new TAGId();
			subCodeLength += tagId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			ueBeamLockFunction = new BerEnum();
			subCodeLength += ueBeamLockFunction.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			pathlossReferenceLinking = new BerEnum();
			subCodeLength += pathlossReferenceLinking.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			servingCellMO = new MeasObjectId();
			subCodeLength += servingCellMO.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (tddULDLConfigurationDedicated != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tddULDLConfigurationDedicated: ");
			tddULDLConfigurationDedicated.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (initialDownlinkBWP != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("initialDownlinkBWP: ");
			initialDownlinkBWP.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (downlinkBWPToReleaseList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("downlinkBWPToReleaseList: ");
			downlinkBWPToReleaseList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (downlinkBWPToAddModList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("downlinkBWPToAddModList: ");
			downlinkBWPToAddModList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (firstActiveDownlinkBWPId != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("firstActiveDownlinkBWPId: ").append(firstActiveDownlinkBWPId);
			firstSelectedElement = false;
		}
		
		if (bwpInactivityTimer != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("bwpInactivityTimer: ").append(bwpInactivityTimer);
			firstSelectedElement = false;
		}
		
		if (defaultDownlinkBWPId != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("defaultDownlinkBWPId: ").append(defaultDownlinkBWPId);
			firstSelectedElement = false;
		}
		
		if (uplinkConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uplinkConfig: ");
			uplinkConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (supplementaryUplink != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supplementaryUplink: ");
			supplementaryUplink.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (pdcchServingCellConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdcchServingCellConfig: ");
			pdcchServingCellConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (pdschServingCellConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pdschServingCellConfig: ");
			pdschServingCellConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (csiMeasConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("csiMeasConfig: ");
			csiMeasConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (sCellDeactivationTimer != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sCellDeactivationTimer: ").append(sCellDeactivationTimer);
			firstSelectedElement = false;
		}
		
		if (crossCarrierSchedulingConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("crossCarrierSchedulingConfig: ");
			crossCarrierSchedulingConfig.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (tagId != null) {
			sb.append("tagId: ").append(tagId);
		}
		else {
			sb.append("tagId: <empty-required-field>");
		}
		
		if (ueBeamLockFunction != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ueBeamLockFunction: ").append(ueBeamLockFunction);
		}
		
		if (pathlossReferenceLinking != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pathlossReferenceLinking: ").append(pathlossReferenceLinking);
		}
		
		if (servingCellMO != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingCellMO: ").append(servingCellMO);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

