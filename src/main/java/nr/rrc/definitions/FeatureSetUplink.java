/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class FeatureSetUplink implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class FeatureSetListPerUplinkCC implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<FeatureSetUplinkPerCCId> seqOf = null;

		public FeatureSetListPerUplinkCC() {
			seqOf = new ArrayList<FeatureSetUplinkPerCCId>();
		}

		public FeatureSetListPerUplinkCC(byte[] code) {
			this.code = code;
		}

		public List<FeatureSetUplinkPerCCId> getFeatureSetUplinkPerCCId() {
			if (seqOf == null) {
				seqOf = new ArrayList<FeatureSetUplinkPerCCId>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				FeatureSetUplinkPerCCId element = new FeatureSetUplinkPerCCId();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<FeatureSetUplinkPerCCId> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PuschDifferentTBPerSlot implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum scs15kHz = null;
		private BerEnum scs30kHz = null;
		private BerEnum scs60kHz = null;
		private BerEnum scs120kHz = null;
		
		public PuschDifferentTBPerSlot() {
		}

		public PuschDifferentTBPerSlot(byte[] code) {
			this.code = code;
		}

		public void setScs15kHz(BerEnum scs15kHz) {
			this.scs15kHz = scs15kHz;
		}

		public BerEnum getScs15kHz() {
			return scs15kHz;
		}

		public void setScs30kHz(BerEnum scs30kHz) {
			this.scs30kHz = scs30kHz;
		}

		public BerEnum getScs30kHz() {
			return scs30kHz;
		}

		public void setScs60kHz(BerEnum scs60kHz) {
			this.scs60kHz = scs60kHz;
		}

		public BerEnum getScs60kHz() {
			return scs60kHz;
		}

		public void setScs120kHz(BerEnum scs120kHz) {
			this.scs120kHz = scs120kHz;
		}

		public BerEnum getScs120kHz() {
			return scs120kHz;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (scs120kHz != null) {
				codeLength += scs120kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
			}
			
			if (scs60kHz != null) {
				codeLength += scs60kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
			}
			
			if (scs30kHz != null) {
				codeLength += scs30kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
			}
			
			if (scs15kHz != null) {
				codeLength += scs15kHz.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				scs15kHz = new BerEnum();
				subCodeLength += scs15kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				scs30kHz = new BerEnum();
				subCodeLength += scs30kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				scs60kHz = new BerEnum();
				subCodeLength += scs60kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				scs120kHz = new BerEnum();
				subCodeLength += scs120kHz.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (scs15kHz != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs15kHz: ").append(scs15kHz);
				firstSelectedElement = false;
			}
			
			if (scs30kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs30kHz: ").append(scs30kHz);
				firstSelectedElement = false;
			}
			
			if (scs60kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs60kHz: ").append(scs60kHz);
				firstSelectedElement = false;
			}
			
			if (scs120kHz != null) {
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("scs120kHz: ").append(scs120kHz);
				firstSelectedElement = false;
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private FeatureSetListPerUplinkCC featureSetListPerUplinkCC = null;
	private BerEnum scalingFactor = null;
	private BerEnum crossCarrierSchedulingULOtherSCS = null;
	private FreqSeparationClass intraBandFreqSeparationUL = null;
	private BerEnum searchSpaceSharingCAUL = null;
	private SRSTxSwitch srsTxSwitch = null;
	private SRSResources supportedSRSResources = null;
	private BerEnum twoPUCCHGroup = null;
	private BerEnum dynamicSwitchSUL = null;
	private PuschDifferentTBPerSlot puschDifferentTBPerSlot = null;
	private CSIReportFramework csiReportFramework = null;
	
	public FeatureSetUplink() {
	}

	public FeatureSetUplink(byte[] code) {
		this.code = code;
	}

	public void setFeatureSetListPerUplinkCC(FeatureSetListPerUplinkCC featureSetListPerUplinkCC) {
		this.featureSetListPerUplinkCC = featureSetListPerUplinkCC;
	}

	public FeatureSetListPerUplinkCC getFeatureSetListPerUplinkCC() {
		return featureSetListPerUplinkCC;
	}

	public void setScalingFactor(BerEnum scalingFactor) {
		this.scalingFactor = scalingFactor;
	}

	public BerEnum getScalingFactor() {
		return scalingFactor;
	}

	public void setCrossCarrierSchedulingULOtherSCS(BerEnum crossCarrierSchedulingULOtherSCS) {
		this.crossCarrierSchedulingULOtherSCS = crossCarrierSchedulingULOtherSCS;
	}

	public BerEnum getCrossCarrierSchedulingULOtherSCS() {
		return crossCarrierSchedulingULOtherSCS;
	}

	public void setIntraBandFreqSeparationUL(FreqSeparationClass intraBandFreqSeparationUL) {
		this.intraBandFreqSeparationUL = intraBandFreqSeparationUL;
	}

	public FreqSeparationClass getIntraBandFreqSeparationUL() {
		return intraBandFreqSeparationUL;
	}

	public void setSearchSpaceSharingCAUL(BerEnum searchSpaceSharingCAUL) {
		this.searchSpaceSharingCAUL = searchSpaceSharingCAUL;
	}

	public BerEnum getSearchSpaceSharingCAUL() {
		return searchSpaceSharingCAUL;
	}

	public void setSrsTxSwitch(SRSTxSwitch srsTxSwitch) {
		this.srsTxSwitch = srsTxSwitch;
	}

	public SRSTxSwitch getSrsTxSwitch() {
		return srsTxSwitch;
	}

	public void setSupportedSRSResources(SRSResources supportedSRSResources) {
		this.supportedSRSResources = supportedSRSResources;
	}

	public SRSResources getSupportedSRSResources() {
		return supportedSRSResources;
	}

	public void setTwoPUCCHGroup(BerEnum twoPUCCHGroup) {
		this.twoPUCCHGroup = twoPUCCHGroup;
	}

	public BerEnum getTwoPUCCHGroup() {
		return twoPUCCHGroup;
	}

	public void setDynamicSwitchSUL(BerEnum dynamicSwitchSUL) {
		this.dynamicSwitchSUL = dynamicSwitchSUL;
	}

	public BerEnum getDynamicSwitchSUL() {
		return dynamicSwitchSUL;
	}

	public void setPuschDifferentTBPerSlot(PuschDifferentTBPerSlot puschDifferentTBPerSlot) {
		this.puschDifferentTBPerSlot = puschDifferentTBPerSlot;
	}

	public PuschDifferentTBPerSlot getPuschDifferentTBPerSlot() {
		return puschDifferentTBPerSlot;
	}

	public void setCsiReportFramework(CSIReportFramework csiReportFramework) {
		this.csiReportFramework = csiReportFramework;
	}

	public CSIReportFramework getCsiReportFramework() {
		return csiReportFramework;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (csiReportFramework != null) {
			codeLength += csiReportFramework.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
		}
		
		if (puschDifferentTBPerSlot != null) {
			codeLength += puschDifferentTBPerSlot.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
			reverseOS.write(0xA9);
			codeLength += 1;
		}
		
		if (dynamicSwitchSUL != null) {
			codeLength += dynamicSwitchSUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (twoPUCCHGroup != null) {
			codeLength += twoPUCCHGroup.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
		}
		
		if (supportedSRSResources != null) {
			codeLength += supportedSRSResources.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (srsTxSwitch != null) {
			codeLength += srsTxSwitch.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (searchSpaceSharingCAUL != null) {
			codeLength += searchSpaceSharingCAUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (intraBandFreqSeparationUL != null) {
			codeLength += intraBandFreqSeparationUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (crossCarrierSchedulingULOtherSCS != null) {
			codeLength += crossCarrierSchedulingULOtherSCS.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (scalingFactor != null) {
			codeLength += scalingFactor.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += featureSetListPerUplinkCC.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			featureSetListPerUplinkCC = new FeatureSetListPerUplinkCC();
			subCodeLength += featureSetListPerUplinkCC.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			scalingFactor = new BerEnum();
			subCodeLength += scalingFactor.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			crossCarrierSchedulingULOtherSCS = new BerEnum();
			subCodeLength += crossCarrierSchedulingULOtherSCS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			intraBandFreqSeparationUL = new FreqSeparationClass();
			subCodeLength += intraBandFreqSeparationUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			searchSpaceSharingCAUL = new BerEnum();
			subCodeLength += searchSpaceSharingCAUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			srsTxSwitch = new SRSTxSwitch();
			subCodeLength += srsTxSwitch.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			supportedSRSResources = new SRSResources();
			subCodeLength += supportedSRSResources.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			twoPUCCHGroup = new BerEnum();
			subCodeLength += twoPUCCHGroup.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			dynamicSwitchSUL = new BerEnum();
			subCodeLength += dynamicSwitchSUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			puschDifferentTBPerSlot = new PuschDifferentTBPerSlot();
			subCodeLength += puschDifferentTBPerSlot.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			csiReportFramework = new CSIReportFramework();
			subCodeLength += csiReportFramework.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (featureSetListPerUplinkCC != null) {
			sb.append("featureSetListPerUplinkCC: ");
			featureSetListPerUplinkCC.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("featureSetListPerUplinkCC: <empty-required-field>");
		}
		
		if (scalingFactor != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scalingFactor: ").append(scalingFactor);
		}
		
		if (crossCarrierSchedulingULOtherSCS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("crossCarrierSchedulingULOtherSCS: ").append(crossCarrierSchedulingULOtherSCS);
		}
		
		if (intraBandFreqSeparationUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("intraBandFreqSeparationUL: ").append(intraBandFreqSeparationUL);
		}
		
		if (searchSpaceSharingCAUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("searchSpaceSharingCAUL: ").append(searchSpaceSharingCAUL);
		}
		
		if (srsTxSwitch != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("srsTxSwitch: ");
			srsTxSwitch.appendAsString(sb, indentLevel + 1);
		}
		
		if (supportedSRSResources != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supportedSRSResources: ");
			supportedSRSResources.appendAsString(sb, indentLevel + 1);
		}
		
		if (twoPUCCHGroup != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("twoPUCCHGroup: ").append(twoPUCCHGroup);
		}
		
		if (dynamicSwitchSUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dynamicSwitchSUL: ").append(dynamicSwitchSUL);
		}
		
		if (puschDifferentTBPerSlot != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("puschDifferentTBPerSlot: ");
			puschDifferentTBPerSlot.appendAsString(sb, indentLevel + 1);
		}
		
		if (csiReportFramework != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("csiReportFramework: ");
			csiReportFramework.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

