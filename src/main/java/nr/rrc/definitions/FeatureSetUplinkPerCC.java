/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class FeatureSetUplinkPerCC implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class MimoCBPUSCH implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private MIMOLayersUL maxNumberMIMOLayersCBPUSCH = null;
		private BerInteger maxNumberSRSResourcePerSet = null;
		
		public MimoCBPUSCH() {
		}

		public MimoCBPUSCH(byte[] code) {
			this.code = code;
		}

		public void setMaxNumberMIMOLayersCBPUSCH(MIMOLayersUL maxNumberMIMOLayersCBPUSCH) {
			this.maxNumberMIMOLayersCBPUSCH = maxNumberMIMOLayersCBPUSCH;
		}

		public MIMOLayersUL getMaxNumberMIMOLayersCBPUSCH() {
			return maxNumberMIMOLayersCBPUSCH;
		}

		public void setMaxNumberSRSResourcePerSet(BerInteger maxNumberSRSResourcePerSet) {
			this.maxNumberSRSResourcePerSet = maxNumberSRSResourcePerSet;
		}

		public BerInteger getMaxNumberSRSResourcePerSet() {
			return maxNumberSRSResourcePerSet;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += maxNumberSRSResourcePerSet.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			if (maxNumberMIMOLayersCBPUSCH != null) {
				codeLength += maxNumberMIMOLayersCBPUSCH.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
			}
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				maxNumberMIMOLayersCBPUSCH = new MIMOLayersUL();
				subCodeLength += maxNumberMIMOLayersCBPUSCH.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				maxNumberSRSResourcePerSet = new BerInteger();
				subCodeLength += maxNumberSRSResourcePerSet.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			boolean firstSelectedElement = true;
			if (maxNumberMIMOLayersCBPUSCH != null) {
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("maxNumberMIMOLayersCBPUSCH: ").append(maxNumberMIMOLayersCBPUSCH);
				firstSelectedElement = false;
			}
			
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (maxNumberSRSResourcePerSet != null) {
				sb.append("maxNumberSRSResourcePerSet: ").append(maxNumberSRSResourcePerSet);
			}
			else {
				sb.append("maxNumberSRSResourcePerSet: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private SubcarrierSpacing supportedSubcarrierSpacingUL = null;
	private SupportedBandwidth supportedBandwidthUL = null;
	private BerEnum channelBW90mhz = null;
	private MimoCBPUSCH mimoCBPUSCH = null;
	private MIMOLayersUL maxNumberMIMOLayersNonCBPUSCH = null;
	private ModulationOrder supportedModulationOrderUL = null;
	private BerEnum simultaneousTxSULNonSUL = null;
	
	public FeatureSetUplinkPerCC() {
	}

	public FeatureSetUplinkPerCC(byte[] code) {
		this.code = code;
	}

	public void setSupportedSubcarrierSpacingUL(SubcarrierSpacing supportedSubcarrierSpacingUL) {
		this.supportedSubcarrierSpacingUL = supportedSubcarrierSpacingUL;
	}

	public SubcarrierSpacing getSupportedSubcarrierSpacingUL() {
		return supportedSubcarrierSpacingUL;
	}

	public void setSupportedBandwidthUL(SupportedBandwidth supportedBandwidthUL) {
		this.supportedBandwidthUL = supportedBandwidthUL;
	}

	public SupportedBandwidth getSupportedBandwidthUL() {
		return supportedBandwidthUL;
	}

	public void setChannelBW90mhz(BerEnum channelBW90mhz) {
		this.channelBW90mhz = channelBW90mhz;
	}

	public BerEnum getChannelBW90mhz() {
		return channelBW90mhz;
	}

	public void setMimoCBPUSCH(MimoCBPUSCH mimoCBPUSCH) {
		this.mimoCBPUSCH = mimoCBPUSCH;
	}

	public MimoCBPUSCH getMimoCBPUSCH() {
		return mimoCBPUSCH;
	}

	public void setMaxNumberMIMOLayersNonCBPUSCH(MIMOLayersUL maxNumberMIMOLayersNonCBPUSCH) {
		this.maxNumberMIMOLayersNonCBPUSCH = maxNumberMIMOLayersNonCBPUSCH;
	}

	public MIMOLayersUL getMaxNumberMIMOLayersNonCBPUSCH() {
		return maxNumberMIMOLayersNonCBPUSCH;
	}

	public void setSupportedModulationOrderUL(ModulationOrder supportedModulationOrderUL) {
		this.supportedModulationOrderUL = supportedModulationOrderUL;
	}

	public ModulationOrder getSupportedModulationOrderUL() {
		return supportedModulationOrderUL;
	}

	public void setSimultaneousTxSULNonSUL(BerEnum simultaneousTxSULNonSUL) {
		this.simultaneousTxSULNonSUL = simultaneousTxSULNonSUL;
	}

	public BerEnum getSimultaneousTxSULNonSUL() {
		return simultaneousTxSULNonSUL;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (simultaneousTxSULNonSUL != null) {
			codeLength += simultaneousTxSULNonSUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (supportedModulationOrderUL != null) {
			codeLength += supportedModulationOrderUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (maxNumberMIMOLayersNonCBPUSCH != null) {
			codeLength += maxNumberMIMOLayersNonCBPUSCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (mimoCBPUSCH != null) {
			codeLength += mimoCBPUSCH.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (channelBW90mhz != null) {
			codeLength += channelBW90mhz.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		sublength = supportedBandwidthUL.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		codeLength += supportedSubcarrierSpacingUL.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			supportedSubcarrierSpacingUL = new SubcarrierSpacing();
			subCodeLength += supportedSubcarrierSpacingUL.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			supportedBandwidthUL = new SupportedBandwidth();
			subCodeLength += supportedBandwidthUL.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			channelBW90mhz = new BerEnum();
			subCodeLength += channelBW90mhz.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			mimoCBPUSCH = new MimoCBPUSCH();
			subCodeLength += mimoCBPUSCH.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			maxNumberMIMOLayersNonCBPUSCH = new MIMOLayersUL();
			subCodeLength += maxNumberMIMOLayersNonCBPUSCH.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			supportedModulationOrderUL = new ModulationOrder();
			subCodeLength += supportedModulationOrderUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			simultaneousTxSULNonSUL = new BerEnum();
			subCodeLength += simultaneousTxSULNonSUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (supportedSubcarrierSpacingUL != null) {
			sb.append("supportedSubcarrierSpacingUL: ").append(supportedSubcarrierSpacingUL);
		}
		else {
			sb.append("supportedSubcarrierSpacingUL: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (supportedBandwidthUL != null) {
			sb.append("supportedBandwidthUL: ");
			supportedBandwidthUL.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("supportedBandwidthUL: <empty-required-field>");
		}
		
		if (channelBW90mhz != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("channelBW90mhz: ").append(channelBW90mhz);
		}
		
		if (mimoCBPUSCH != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mimoCBPUSCH: ");
			mimoCBPUSCH.appendAsString(sb, indentLevel + 1);
		}
		
		if (maxNumberMIMOLayersNonCBPUSCH != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxNumberMIMOLayersNonCBPUSCH: ").append(maxNumberMIMOLayersNonCBPUSCH);
		}
		
		if (supportedModulationOrderUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supportedModulationOrderUL: ").append(supportedModulationOrderUL);
		}
		
		if (simultaneousTxSULNonSUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("simultaneousTxSULNonSUL: ").append(simultaneousTxSULNonSUL);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

