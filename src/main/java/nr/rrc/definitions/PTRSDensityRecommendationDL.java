/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PTRSDensityRecommendationDL implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger frequencyDensity1 = null;
	private BerInteger frequencyDensity2 = null;
	private BerInteger timeDensity1 = null;
	private BerInteger timeDensity2 = null;
	private BerInteger timeDensity3 = null;
	
	public PTRSDensityRecommendationDL() {
	}

	public PTRSDensityRecommendationDL(byte[] code) {
		this.code = code;
	}

	public void setFrequencyDensity1(BerInteger frequencyDensity1) {
		this.frequencyDensity1 = frequencyDensity1;
	}

	public BerInteger getFrequencyDensity1() {
		return frequencyDensity1;
	}

	public void setFrequencyDensity2(BerInteger frequencyDensity2) {
		this.frequencyDensity2 = frequencyDensity2;
	}

	public BerInteger getFrequencyDensity2() {
		return frequencyDensity2;
	}

	public void setTimeDensity1(BerInteger timeDensity1) {
		this.timeDensity1 = timeDensity1;
	}

	public BerInteger getTimeDensity1() {
		return timeDensity1;
	}

	public void setTimeDensity2(BerInteger timeDensity2) {
		this.timeDensity2 = timeDensity2;
	}

	public BerInteger getTimeDensity2() {
		return timeDensity2;
	}

	public void setTimeDensity3(BerInteger timeDensity3) {
		this.timeDensity3 = timeDensity3;
	}

	public BerInteger getTimeDensity3() {
		return timeDensity3;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += timeDensity3.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += timeDensity2.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += timeDensity1.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += frequencyDensity2.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += frequencyDensity1.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			frequencyDensity1 = new BerInteger();
			subCodeLength += frequencyDensity1.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			frequencyDensity2 = new BerInteger();
			subCodeLength += frequencyDensity2.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			timeDensity1 = new BerInteger();
			subCodeLength += timeDensity1.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			timeDensity2 = new BerInteger();
			subCodeLength += timeDensity2.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			timeDensity3 = new BerInteger();
			subCodeLength += timeDensity3.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (frequencyDensity1 != null) {
			sb.append("frequencyDensity1: ").append(frequencyDensity1);
		}
		else {
			sb.append("frequencyDensity1: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (frequencyDensity2 != null) {
			sb.append("frequencyDensity2: ").append(frequencyDensity2);
		}
		else {
			sb.append("frequencyDensity2: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (timeDensity1 != null) {
			sb.append("timeDensity1: ").append(timeDensity1);
		}
		else {
			sb.append("timeDensity1: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (timeDensity2 != null) {
			sb.append("timeDensity2: ").append(timeDensity2);
		}
		else {
			sb.append("timeDensity2: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (timeDensity3 != null) {
			sb.append("timeDensity3: ").append(timeDensity3);
		}
		else {
			sb.append("timeDensity3: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

