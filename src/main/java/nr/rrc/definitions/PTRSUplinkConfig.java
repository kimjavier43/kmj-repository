/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PTRSUplinkConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class ModeSpecificParameters implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class CpOFDM implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class FrequencyDensity implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<BerInteger> seqOf = null;

				public FrequencyDensity() {
					seqOf = new ArrayList<BerInteger>();
				}

				public FrequencyDensity(byte[] code) {
					this.code = code;
				}

				public List<BerInteger> getBerInteger() {
					if (seqOf == null) {
						seqOf = new ArrayList<BerInteger>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						BerInteger element = new BerInteger();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<BerInteger> it = seqOf.iterator();
						if (it.hasNext()) {
							sb.append(it.next());
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								sb.append(it.next());
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TimeDensity implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<BerInteger> seqOf = null;

				public TimeDensity() {
					seqOf = new ArrayList<BerInteger>();
				}

				public TimeDensity(byte[] code) {
					this.code = code;
				}

				public List<BerInteger> getBerInteger() {
					if (seqOf == null) {
						seqOf = new ArrayList<BerInteger>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						BerInteger element = new BerInteger();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<BerInteger> it = seqOf.iterator();
						if (it.hasNext()) {
							sb.append(it.next());
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								sb.append(it.next());
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private FrequencyDensity frequencyDensity = null;
			private TimeDensity timeDensity = null;
			private BerEnum maxNrofPorts = null;
			private BerEnum resourceElementOffset = null;
			private BerEnum ptrsPower = null;
			
			public CpOFDM() {
			}

			public CpOFDM(byte[] code) {
				this.code = code;
			}

			public void setFrequencyDensity(FrequencyDensity frequencyDensity) {
				this.frequencyDensity = frequencyDensity;
			}

			public FrequencyDensity getFrequencyDensity() {
				return frequencyDensity;
			}

			public void setTimeDensity(TimeDensity timeDensity) {
				this.timeDensity = timeDensity;
			}

			public TimeDensity getTimeDensity() {
				return timeDensity;
			}

			public void setMaxNrofPorts(BerEnum maxNrofPorts) {
				this.maxNrofPorts = maxNrofPorts;
			}

			public BerEnum getMaxNrofPorts() {
				return maxNrofPorts;
			}

			public void setResourceElementOffset(BerEnum resourceElementOffset) {
				this.resourceElementOffset = resourceElementOffset;
			}

			public BerEnum getResourceElementOffset() {
				return resourceElementOffset;
			}

			public void setPtrsPower(BerEnum ptrsPower) {
				this.ptrsPower = ptrsPower;
			}

			public BerEnum getPtrsPower() {
				return ptrsPower;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += ptrsPower.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				
				if (resourceElementOffset != null) {
					codeLength += resourceElementOffset.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 3
					reverseOS.write(0x83);
					codeLength += 1;
				}
				
				codeLength += maxNrofPorts.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				
				if (timeDensity != null) {
					codeLength += timeDensity.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					reverseOS.write(0xA1);
					codeLength += 1;
				}
				
				if (frequencyDensity != null) {
					codeLength += frequencyDensity.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
					reverseOS.write(0xA0);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					frequencyDensity = new FrequencyDensity();
					subCodeLength += frequencyDensity.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					timeDensity = new TimeDensity();
					subCodeLength += timeDensity.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					maxNrofPorts = new BerEnum();
					subCodeLength += maxNrofPorts.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
					resourceElementOffset = new BerEnum();
					subCodeLength += resourceElementOffset.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
					ptrsPower = new BerEnum();
					subCodeLength += ptrsPower.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				boolean firstSelectedElement = true;
				if (frequencyDensity != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("frequencyDensity: ");
					frequencyDensity.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (timeDensity != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("timeDensity: ");
					timeDensity.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (!firstSelectedElement) {
					sb.append(",\n");
				}
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (maxNrofPorts != null) {
					sb.append("maxNrofPorts: ").append(maxNrofPorts);
				}
				else {
					sb.append("maxNrofPorts: <empty-required-field>");
				}
				
				if (resourceElementOffset != null) {
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("resourceElementOffset: ").append(resourceElementOffset);
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (ptrsPower != null) {
					sb.append("ptrsPower: ").append(ptrsPower);
				}
				else {
					sb.append("ptrsPower: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class DftSOFDM implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class SampleDensity implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<BerInteger> seqOf = null;

				public SampleDensity() {
					seqOf = new ArrayList<BerInteger>();
				}

				public SampleDensity(byte[] code) {
					this.code = code;
				}

				public List<BerInteger> getBerInteger() {
					if (seqOf == null) {
						seqOf = new ArrayList<BerInteger>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						BerInteger element = new BerInteger();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<BerInteger> it = seqOf.iterator();
						if (it.hasNext()) {
							sb.append(it.next());
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								sb.append(it.next());
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private SampleDensity sampleDensity = null;
			private BerEnum timeDensityTransformPrecoding = null;
			
			public DftSOFDM() {
			}

			public DftSOFDM(byte[] code) {
				this.code = code;
			}

			public void setSampleDensity(SampleDensity sampleDensity) {
				this.sampleDensity = sampleDensity;
			}

			public SampleDensity getSampleDensity() {
				return sampleDensity;
			}

			public void setTimeDensityTransformPrecoding(BerEnum timeDensityTransformPrecoding) {
				this.timeDensityTransformPrecoding = timeDensityTransformPrecoding;
			}

			public BerEnum getTimeDensityTransformPrecoding() {
				return timeDensityTransformPrecoding;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (timeDensityTransformPrecoding != null) {
					codeLength += timeDensityTransformPrecoding.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 1
					reverseOS.write(0x81);
					codeLength += 1;
				}
				
				codeLength += sampleDensity.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					sampleDensity = new SampleDensity();
					subCodeLength += sampleDensity.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					timeDensityTransformPrecoding = new BerEnum();
					subCodeLength += timeDensityTransformPrecoding.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (sampleDensity != null) {
					sb.append("sampleDensity: ");
					sampleDensity.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("sampleDensity: <empty-required-field>");
				}
				
				if (timeDensityTransformPrecoding != null) {
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("timeDensityTransformPrecoding: ").append(timeDensityTransformPrecoding);
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private CpOFDM cpOFDM = null;
		private DftSOFDM dftSOFDM = null;
		
		public ModeSpecificParameters() {
		}

		public ModeSpecificParameters(byte[] code) {
			this.code = code;
		}

		public void setCpOFDM(CpOFDM cpOFDM) {
			this.cpOFDM = cpOFDM;
		}

		public CpOFDM getCpOFDM() {
			return cpOFDM;
		}

		public void setDftSOFDM(DftSOFDM dftSOFDM) {
			this.dftSOFDM = dftSOFDM;
		}

		public DftSOFDM getDftSOFDM() {
			return dftSOFDM;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (dftSOFDM != null) {
				codeLength += dftSOFDM.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (cpOFDM != null) {
				codeLength += cpOFDM.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				cpOFDM = new CpOFDM();
				codeLength += cpOFDM.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				dftSOFDM = new DftSOFDM();
				codeLength += dftSOFDM.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (cpOFDM != null) {
				sb.append("cpOFDM: ");
				cpOFDM.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (dftSOFDM != null) {
				sb.append("dftSOFDM: ");
				dftSOFDM.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private ModeSpecificParameters modeSpecificParameters = null;
	
	public PTRSUplinkConfig() {
	}

	public PTRSUplinkConfig(byte[] code) {
		this.code = code;
	}

	public void setModeSpecificParameters(ModeSpecificParameters modeSpecificParameters) {
		this.modeSpecificParameters = modeSpecificParameters;
	}

	public ModeSpecificParameters getModeSpecificParameters() {
		return modeSpecificParameters;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (modeSpecificParameters != null) {
			sublength = modeSpecificParameters.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			subCodeLength += length.decode(is);
			modeSpecificParameters = new ModeSpecificParameters();
			subCodeLength += modeSpecificParameters.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		if (modeSpecificParameters != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("modeSpecificParameters: ");
			modeSpecificParameters.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

