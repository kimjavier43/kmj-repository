/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class RACHConfigGeneric implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger prachConfigurationIndex = null;
	private BerEnum msg1FDM = null;
	private BerInteger msg1FrequencyStart = null;
	private BerInteger zeroCorrelationZoneConfig = null;
	private BerInteger preambleReceivedTargetPower = null;
	private BerEnum preambleTransMax = null;
	private BerEnum powerRampingStep = null;
	private BerEnum raResponseWindow = null;
	
	public RACHConfigGeneric() {
	}

	public RACHConfigGeneric(byte[] code) {
		this.code = code;
	}

	public void setPrachConfigurationIndex(BerInteger prachConfigurationIndex) {
		this.prachConfigurationIndex = prachConfigurationIndex;
	}

	public BerInteger getPrachConfigurationIndex() {
		return prachConfigurationIndex;
	}

	public void setMsg1FDM(BerEnum msg1FDM) {
		this.msg1FDM = msg1FDM;
	}

	public BerEnum getMsg1FDM() {
		return msg1FDM;
	}

	public void setMsg1FrequencyStart(BerInteger msg1FrequencyStart) {
		this.msg1FrequencyStart = msg1FrequencyStart;
	}

	public BerInteger getMsg1FrequencyStart() {
		return msg1FrequencyStart;
	}

	public void setZeroCorrelationZoneConfig(BerInteger zeroCorrelationZoneConfig) {
		this.zeroCorrelationZoneConfig = zeroCorrelationZoneConfig;
	}

	public BerInteger getZeroCorrelationZoneConfig() {
		return zeroCorrelationZoneConfig;
	}

	public void setPreambleReceivedTargetPower(BerInteger preambleReceivedTargetPower) {
		this.preambleReceivedTargetPower = preambleReceivedTargetPower;
	}

	public BerInteger getPreambleReceivedTargetPower() {
		return preambleReceivedTargetPower;
	}

	public void setPreambleTransMax(BerEnum preambleTransMax) {
		this.preambleTransMax = preambleTransMax;
	}

	public BerEnum getPreambleTransMax() {
		return preambleTransMax;
	}

	public void setPowerRampingStep(BerEnum powerRampingStep) {
		this.powerRampingStep = powerRampingStep;
	}

	public BerEnum getPowerRampingStep() {
		return powerRampingStep;
	}

	public void setRaResponseWindow(BerEnum raResponseWindow) {
		this.raResponseWindow = raResponseWindow;
	}

	public BerEnum getRaResponseWindow() {
		return raResponseWindow;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += raResponseWindow.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 7
		reverseOS.write(0x87);
		codeLength += 1;
		
		codeLength += powerRampingStep.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		codeLength += preambleTransMax.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += preambleReceivedTargetPower.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += zeroCorrelationZoneConfig.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += msg1FrequencyStart.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += msg1FDM.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += prachConfigurationIndex.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			prachConfigurationIndex = new BerInteger();
			subCodeLength += prachConfigurationIndex.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			msg1FDM = new BerEnum();
			subCodeLength += msg1FDM.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			msg1FrequencyStart = new BerInteger();
			subCodeLength += msg1FrequencyStart.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			zeroCorrelationZoneConfig = new BerInteger();
			subCodeLength += zeroCorrelationZoneConfig.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			preambleReceivedTargetPower = new BerInteger();
			subCodeLength += preambleReceivedTargetPower.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			preambleTransMax = new BerEnum();
			subCodeLength += preambleTransMax.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			powerRampingStep = new BerEnum();
			subCodeLength += powerRampingStep.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			raResponseWindow = new BerEnum();
			subCodeLength += raResponseWindow.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (prachConfigurationIndex != null) {
			sb.append("prachConfigurationIndex: ").append(prachConfigurationIndex);
		}
		else {
			sb.append("prachConfigurationIndex: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (msg1FDM != null) {
			sb.append("msg1FDM: ").append(msg1FDM);
		}
		else {
			sb.append("msg1FDM: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (msg1FrequencyStart != null) {
			sb.append("msg1FrequencyStart: ").append(msg1FrequencyStart);
		}
		else {
			sb.append("msg1FrequencyStart: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (zeroCorrelationZoneConfig != null) {
			sb.append("zeroCorrelationZoneConfig: ").append(zeroCorrelationZoneConfig);
		}
		else {
			sb.append("zeroCorrelationZoneConfig: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (preambleReceivedTargetPower != null) {
			sb.append("preambleReceivedTargetPower: ").append(preambleReceivedTargetPower);
		}
		else {
			sb.append("preambleReceivedTargetPower: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (preambleTransMax != null) {
			sb.append("preambleTransMax: ").append(preambleTransMax);
		}
		else {
			sb.append("preambleTransMax: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (powerRampingStep != null) {
			sb.append("powerRampingStep: ").append(powerRampingStep);
		}
		else {
			sb.append("powerRampingStep: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (raResponseWindow != null) {
			sb.append("raResponseWindow: ").append(raResponseWindow);
		}
		else {
			sb.append("raResponseWindow: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

