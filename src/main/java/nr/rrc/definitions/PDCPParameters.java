/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PDCPParameters implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SupportedROHCProfiles implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerBoolean profile0x0000 = null;
		private BerBoolean profile0x0001 = null;
		private BerBoolean profile0x0002 = null;
		private BerBoolean profile0x0003 = null;
		private BerBoolean profile0x0004 = null;
		private BerBoolean profile0x0006 = null;
		private BerBoolean profile0x0101 = null;
		private BerBoolean profile0x0102 = null;
		private BerBoolean profile0x0103 = null;
		private BerBoolean profile0x0104 = null;
		
		public SupportedROHCProfiles() {
		}

		public SupportedROHCProfiles(byte[] code) {
			this.code = code;
		}

		public void setProfile0x0000(BerBoolean profile0x0000) {
			this.profile0x0000 = profile0x0000;
		}

		public BerBoolean getProfile0x0000() {
			return profile0x0000;
		}

		public void setProfile0x0001(BerBoolean profile0x0001) {
			this.profile0x0001 = profile0x0001;
		}

		public BerBoolean getProfile0x0001() {
			return profile0x0001;
		}

		public void setProfile0x0002(BerBoolean profile0x0002) {
			this.profile0x0002 = profile0x0002;
		}

		public BerBoolean getProfile0x0002() {
			return profile0x0002;
		}

		public void setProfile0x0003(BerBoolean profile0x0003) {
			this.profile0x0003 = profile0x0003;
		}

		public BerBoolean getProfile0x0003() {
			return profile0x0003;
		}

		public void setProfile0x0004(BerBoolean profile0x0004) {
			this.profile0x0004 = profile0x0004;
		}

		public BerBoolean getProfile0x0004() {
			return profile0x0004;
		}

		public void setProfile0x0006(BerBoolean profile0x0006) {
			this.profile0x0006 = profile0x0006;
		}

		public BerBoolean getProfile0x0006() {
			return profile0x0006;
		}

		public void setProfile0x0101(BerBoolean profile0x0101) {
			this.profile0x0101 = profile0x0101;
		}

		public BerBoolean getProfile0x0101() {
			return profile0x0101;
		}

		public void setProfile0x0102(BerBoolean profile0x0102) {
			this.profile0x0102 = profile0x0102;
		}

		public BerBoolean getProfile0x0102() {
			return profile0x0102;
		}

		public void setProfile0x0103(BerBoolean profile0x0103) {
			this.profile0x0103 = profile0x0103;
		}

		public BerBoolean getProfile0x0103() {
			return profile0x0103;
		}

		public void setProfile0x0104(BerBoolean profile0x0104) {
			this.profile0x0104 = profile0x0104;
		}

		public BerBoolean getProfile0x0104() {
			return profile0x0104;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += profile0x0104.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
			
			codeLength += profile0x0103.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
			
			codeLength += profile0x0102.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			reverseOS.write(0x87);
			codeLength += 1;
			
			codeLength += profile0x0101.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
			
			codeLength += profile0x0006.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
			
			codeLength += profile0x0004.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
			
			codeLength += profile0x0003.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
			
			codeLength += profile0x0002.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			
			codeLength += profile0x0001.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += profile0x0000.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				profile0x0000 = new BerBoolean();
				subCodeLength += profile0x0000.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				profile0x0001 = new BerBoolean();
				subCodeLength += profile0x0001.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				profile0x0002 = new BerBoolean();
				subCodeLength += profile0x0002.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				profile0x0003 = new BerBoolean();
				subCodeLength += profile0x0003.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				profile0x0004 = new BerBoolean();
				subCodeLength += profile0x0004.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				profile0x0006 = new BerBoolean();
				subCodeLength += profile0x0006.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				profile0x0101 = new BerBoolean();
				subCodeLength += profile0x0101.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				profile0x0102 = new BerBoolean();
				subCodeLength += profile0x0102.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				profile0x0103 = new BerBoolean();
				subCodeLength += profile0x0103.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				profile0x0104 = new BerBoolean();
				subCodeLength += profile0x0104.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0000 != null) {
				sb.append("profile0x0000: ").append(profile0x0000);
			}
			else {
				sb.append("profile0x0000: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0001 != null) {
				sb.append("profile0x0001: ").append(profile0x0001);
			}
			else {
				sb.append("profile0x0001: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0002 != null) {
				sb.append("profile0x0002: ").append(profile0x0002);
			}
			else {
				sb.append("profile0x0002: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0003 != null) {
				sb.append("profile0x0003: ").append(profile0x0003);
			}
			else {
				sb.append("profile0x0003: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0004 != null) {
				sb.append("profile0x0004: ").append(profile0x0004);
			}
			else {
				sb.append("profile0x0004: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0006 != null) {
				sb.append("profile0x0006: ").append(profile0x0006);
			}
			else {
				sb.append("profile0x0006: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0101 != null) {
				sb.append("profile0x0101: ").append(profile0x0101);
			}
			else {
				sb.append("profile0x0101: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0102 != null) {
				sb.append("profile0x0102: ").append(profile0x0102);
			}
			else {
				sb.append("profile0x0102: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0103 != null) {
				sb.append("profile0x0103: ").append(profile0x0103);
			}
			else {
				sb.append("profile0x0103: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (profile0x0104 != null) {
				sb.append("profile0x0104: ").append(profile0x0104);
			}
			else {
				sb.append("profile0x0104: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private SupportedROHCProfiles supportedROHCProfiles = null;
	private BerEnum maxNumberROHCContextSessions = null;
	private BerEnum uplinkOnlyROHCProfiles = null;
	private BerEnum continueROHCContext = null;
	private BerEnum outOfOrderDelivery = null;
	private BerEnum shortSN = null;
	
	public PDCPParameters() {
	}

	public PDCPParameters(byte[] code) {
		this.code = code;
	}

	public void setSupportedROHCProfiles(SupportedROHCProfiles supportedROHCProfiles) {
		this.supportedROHCProfiles = supportedROHCProfiles;
	}

	public SupportedROHCProfiles getSupportedROHCProfiles() {
		return supportedROHCProfiles;
	}

	public void setMaxNumberROHCContextSessions(BerEnum maxNumberROHCContextSessions) {
		this.maxNumberROHCContextSessions = maxNumberROHCContextSessions;
	}

	public BerEnum getMaxNumberROHCContextSessions() {
		return maxNumberROHCContextSessions;
	}

	public void setUplinkOnlyROHCProfiles(BerEnum uplinkOnlyROHCProfiles) {
		this.uplinkOnlyROHCProfiles = uplinkOnlyROHCProfiles;
	}

	public BerEnum getUplinkOnlyROHCProfiles() {
		return uplinkOnlyROHCProfiles;
	}

	public void setContinueROHCContext(BerEnum continueROHCContext) {
		this.continueROHCContext = continueROHCContext;
	}

	public BerEnum getContinueROHCContext() {
		return continueROHCContext;
	}

	public void setOutOfOrderDelivery(BerEnum outOfOrderDelivery) {
		this.outOfOrderDelivery = outOfOrderDelivery;
	}

	public BerEnum getOutOfOrderDelivery() {
		return outOfOrderDelivery;
	}

	public void setShortSN(BerEnum shortSN) {
		this.shortSN = shortSN;
	}

	public BerEnum getShortSN() {
		return shortSN;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (shortSN != null) {
			codeLength += shortSN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (outOfOrderDelivery != null) {
			codeLength += outOfOrderDelivery.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (continueROHCContext != null) {
			codeLength += continueROHCContext.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (uplinkOnlyROHCProfiles != null) {
			codeLength += uplinkOnlyROHCProfiles.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		codeLength += maxNumberROHCContextSessions.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += supportedROHCProfiles.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			supportedROHCProfiles = new SupportedROHCProfiles();
			subCodeLength += supportedROHCProfiles.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			maxNumberROHCContextSessions = new BerEnum();
			subCodeLength += maxNumberROHCContextSessions.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			uplinkOnlyROHCProfiles = new BerEnum();
			subCodeLength += uplinkOnlyROHCProfiles.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			continueROHCContext = new BerEnum();
			subCodeLength += continueROHCContext.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			outOfOrderDelivery = new BerEnum();
			subCodeLength += outOfOrderDelivery.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			shortSN = new BerEnum();
			subCodeLength += shortSN.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (supportedROHCProfiles != null) {
			sb.append("supportedROHCProfiles: ");
			supportedROHCProfiles.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("supportedROHCProfiles: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (maxNumberROHCContextSessions != null) {
			sb.append("maxNumberROHCContextSessions: ").append(maxNumberROHCContextSessions);
		}
		else {
			sb.append("maxNumberROHCContextSessions: <empty-required-field>");
		}
		
		if (uplinkOnlyROHCProfiles != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("uplinkOnlyROHCProfiles: ").append(uplinkOnlyROHCProfiles);
		}
		
		if (continueROHCContext != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("continueROHCContext: ").append(continueROHCContext);
		}
		
		if (outOfOrderDelivery != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("outOfOrderDelivery: ").append(outOfOrderDelivery);
		}
		
		if (shortSN != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("shortSN: ").append(shortSN);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

