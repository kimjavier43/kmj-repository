/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class BeamFailureRecoveryConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class CandidateBeamRSList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<PRACHResourceDedicatedBFR> seqOf = null;

		public CandidateBeamRSList() {
			seqOf = new ArrayList<PRACHResourceDedicatedBFR>();
		}

		public CandidateBeamRSList(byte[] code) {
			this.code = code;
		}

		public List<PRACHResourceDedicatedBFR> getPRACHResourceDedicatedBFR() {
			if (seqOf == null) {
				seqOf = new ArrayList<PRACHResourceDedicatedBFR>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				PRACHResourceDedicatedBFR element = new PRACHResourceDedicatedBFR();
				subCodeLength += element.decode(is, null);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<PRACHResourceDedicatedBFR> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger rootSequenceIndexBFR = null;
	private RACHConfigGeneric rachConfigBFR = null;
	private RSRPRange rsrpThresholdSSB = null;
	private CandidateBeamRSList candidateBeamRSList = null;
	private BerEnum ssbPerRACHOccasion = null;
	private BerInteger raSsbOccasionMaskIndex = null;
	private SearchSpaceId recoverySearchSpaceId = null;
	private RAPrioritization raPrioritization = null;
	private BerEnum beamFailureRecoveryTimer = null;
	
	public BeamFailureRecoveryConfig() {
	}

	public BeamFailureRecoveryConfig(byte[] code) {
		this.code = code;
	}

	public void setRootSequenceIndexBFR(BerInteger rootSequenceIndexBFR) {
		this.rootSequenceIndexBFR = rootSequenceIndexBFR;
	}

	public BerInteger getRootSequenceIndexBFR() {
		return rootSequenceIndexBFR;
	}

	public void setRachConfigBFR(RACHConfigGeneric rachConfigBFR) {
		this.rachConfigBFR = rachConfigBFR;
	}

	public RACHConfigGeneric getRachConfigBFR() {
		return rachConfigBFR;
	}

	public void setRsrpThresholdSSB(RSRPRange rsrpThresholdSSB) {
		this.rsrpThresholdSSB = rsrpThresholdSSB;
	}

	public RSRPRange getRsrpThresholdSSB() {
		return rsrpThresholdSSB;
	}

	public void setCandidateBeamRSList(CandidateBeamRSList candidateBeamRSList) {
		this.candidateBeamRSList = candidateBeamRSList;
	}

	public CandidateBeamRSList getCandidateBeamRSList() {
		return candidateBeamRSList;
	}

	public void setSsbPerRACHOccasion(BerEnum ssbPerRACHOccasion) {
		this.ssbPerRACHOccasion = ssbPerRACHOccasion;
	}

	public BerEnum getSsbPerRACHOccasion() {
		return ssbPerRACHOccasion;
	}

	public void setRaSsbOccasionMaskIndex(BerInteger raSsbOccasionMaskIndex) {
		this.raSsbOccasionMaskIndex = raSsbOccasionMaskIndex;
	}

	public BerInteger getRaSsbOccasionMaskIndex() {
		return raSsbOccasionMaskIndex;
	}

	public void setRecoverySearchSpaceId(SearchSpaceId recoverySearchSpaceId) {
		this.recoverySearchSpaceId = recoverySearchSpaceId;
	}

	public SearchSpaceId getRecoverySearchSpaceId() {
		return recoverySearchSpaceId;
	}

	public void setRaPrioritization(RAPrioritization raPrioritization) {
		this.raPrioritization = raPrioritization;
	}

	public RAPrioritization getRaPrioritization() {
		return raPrioritization;
	}

	public void setBeamFailureRecoveryTimer(BerEnum beamFailureRecoveryTimer) {
		this.beamFailureRecoveryTimer = beamFailureRecoveryTimer;
	}

	public BerEnum getBeamFailureRecoveryTimer() {
		return beamFailureRecoveryTimer;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (beamFailureRecoveryTimer != null) {
			codeLength += beamFailureRecoveryTimer.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (raPrioritization != null) {
			codeLength += raPrioritization.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (recoverySearchSpaceId != null) {
			codeLength += recoverySearchSpaceId.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (raSsbOccasionMaskIndex != null) {
			codeLength += raSsbOccasionMaskIndex.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (ssbPerRACHOccasion != null) {
			codeLength += ssbPerRACHOccasion.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (candidateBeamRSList != null) {
			codeLength += candidateBeamRSList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (rsrpThresholdSSB != null) {
			codeLength += rsrpThresholdSSB.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (rachConfigBFR != null) {
			codeLength += rachConfigBFR.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		if (rootSequenceIndexBFR != null) {
			codeLength += rootSequenceIndexBFR.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			rootSequenceIndexBFR = new BerInteger();
			subCodeLength += rootSequenceIndexBFR.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			rachConfigBFR = new RACHConfigGeneric();
			subCodeLength += rachConfigBFR.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			rsrpThresholdSSB = new RSRPRange();
			subCodeLength += rsrpThresholdSSB.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			candidateBeamRSList = new CandidateBeamRSList();
			subCodeLength += candidateBeamRSList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			ssbPerRACHOccasion = new BerEnum();
			subCodeLength += ssbPerRACHOccasion.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			raSsbOccasionMaskIndex = new BerInteger();
			subCodeLength += raSsbOccasionMaskIndex.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			recoverySearchSpaceId = new SearchSpaceId();
			subCodeLength += recoverySearchSpaceId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			raPrioritization = new RAPrioritization();
			subCodeLength += raPrioritization.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			beamFailureRecoveryTimer = new BerEnum();
			subCodeLength += beamFailureRecoveryTimer.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (rootSequenceIndexBFR != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rootSequenceIndexBFR: ").append(rootSequenceIndexBFR);
			firstSelectedElement = false;
		}
		
		if (rachConfigBFR != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rachConfigBFR: ");
			rachConfigBFR.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (rsrpThresholdSSB != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rsrpThresholdSSB: ").append(rsrpThresholdSSB);
			firstSelectedElement = false;
		}
		
		if (candidateBeamRSList != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("candidateBeamRSList: ");
			candidateBeamRSList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (ssbPerRACHOccasion != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ssbPerRACHOccasion: ").append(ssbPerRACHOccasion);
			firstSelectedElement = false;
		}
		
		if (raSsbOccasionMaskIndex != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("raSsbOccasionMaskIndex: ").append(raSsbOccasionMaskIndex);
			firstSelectedElement = false;
		}
		
		if (recoverySearchSpaceId != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("recoverySearchSpaceId: ").append(recoverySearchSpaceId);
			firstSelectedElement = false;
		}
		
		if (raPrioritization != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("raPrioritization: ");
			raPrioritization.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (beamFailureRecoveryTimer != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("beamFailureRecoveryTimer: ").append(beamFailureRecoveryTimer);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

