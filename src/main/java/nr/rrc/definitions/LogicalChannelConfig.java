/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class LogicalChannelConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class UlSpecificParameters implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static class AllowedServingCells implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
			public byte[] code = null;
			private List<ServCellIndex> seqOf = null;

			public AllowedServingCells() {
				seqOf = new ArrayList<ServCellIndex>();
			}

			public AllowedServingCells(byte[] code) {
				this.code = code;
			}

			public List<ServCellIndex> getServCellIndex() {
				if (seqOf == null) {
					seqOf = new ArrayList<ServCellIndex>();
				}
				return seqOf;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(reverseOS, true);
				}

				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);
				int totalLength = length.val;

				while (subCodeLength < totalLength) {
					ServCellIndex element = new ServCellIndex();
					subCodeLength += element.decode(is, true);
					seqOf.add(element);
				}
				if (subCodeLength != totalLength) {
					throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

				}
				codeLength += subCodeLength;

				return codeLength;
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (seqOf == null) {
					sb.append("null");
				}
				else {
					Iterator<ServCellIndex> it = seqOf.iterator();
					if (it.hasNext()) {
						sb.append(it.next());
						while (it.hasNext()) {
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append(it.next());
						}
					}
				}

				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class AllowedSCSList implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
			public byte[] code = null;
			private List<SubcarrierSpacing> seqOf = null;

			public AllowedSCSList() {
				seqOf = new ArrayList<SubcarrierSpacing>();
			}

			public AllowedSCSList(byte[] code) {
				this.code = code;
			}

			public List<SubcarrierSpacing> getSubcarrierSpacing() {
				if (seqOf == null) {
					seqOf = new ArrayList<SubcarrierSpacing>();
				}
				return seqOf;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(reverseOS, true);
				}

				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);
				int totalLength = length.val;

				while (subCodeLength < totalLength) {
					SubcarrierSpacing element = new SubcarrierSpacing();
					subCodeLength += element.decode(is, true);
					seqOf.add(element);
				}
				if (subCodeLength != totalLength) {
					throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

				}
				codeLength += subCodeLength;

				return codeLength;
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (seqOf == null) {
					sb.append("null");
				}
				else {
					Iterator<SubcarrierSpacing> it = seqOf.iterator();
					if (it.hasNext()) {
						sb.append(it.next());
						while (it.hasNext()) {
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append(it.next());
						}
					}
				}

				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger priority = null;
		private BerEnum prioritisedBitRate = null;
		private BerEnum bucketSizeDuration = null;
		private AllowedServingCells allowedServingCells = null;
		private AllowedSCSList allowedSCSList = null;
		private BerEnum maxPUSCHDuration = null;
		private BerEnum configuredGrantType1Allowed = null;
		private BerInteger logicalChannelGroup = null;
		private SchedulingRequestId schedulingRequestID = null;
		private BerBoolean logicalChannelSRMask = null;
		private BerBoolean logicalChannelSRDelayTimerApplied = null;
		
		public UlSpecificParameters() {
		}

		public UlSpecificParameters(byte[] code) {
			this.code = code;
		}

		public void setPriority(BerInteger priority) {
			this.priority = priority;
		}

		public BerInteger getPriority() {
			return priority;
		}

		public void setPrioritisedBitRate(BerEnum prioritisedBitRate) {
			this.prioritisedBitRate = prioritisedBitRate;
		}

		public BerEnum getPrioritisedBitRate() {
			return prioritisedBitRate;
		}

		public void setBucketSizeDuration(BerEnum bucketSizeDuration) {
			this.bucketSizeDuration = bucketSizeDuration;
		}

		public BerEnum getBucketSizeDuration() {
			return bucketSizeDuration;
		}

		public void setAllowedServingCells(AllowedServingCells allowedServingCells) {
			this.allowedServingCells = allowedServingCells;
		}

		public AllowedServingCells getAllowedServingCells() {
			return allowedServingCells;
		}

		public void setAllowedSCSList(AllowedSCSList allowedSCSList) {
			this.allowedSCSList = allowedSCSList;
		}

		public AllowedSCSList getAllowedSCSList() {
			return allowedSCSList;
		}

		public void setMaxPUSCHDuration(BerEnum maxPUSCHDuration) {
			this.maxPUSCHDuration = maxPUSCHDuration;
		}

		public BerEnum getMaxPUSCHDuration() {
			return maxPUSCHDuration;
		}

		public void setConfiguredGrantType1Allowed(BerEnum configuredGrantType1Allowed) {
			this.configuredGrantType1Allowed = configuredGrantType1Allowed;
		}

		public BerEnum getConfiguredGrantType1Allowed() {
			return configuredGrantType1Allowed;
		}

		public void setLogicalChannelGroup(BerInteger logicalChannelGroup) {
			this.logicalChannelGroup = logicalChannelGroup;
		}

		public BerInteger getLogicalChannelGroup() {
			return logicalChannelGroup;
		}

		public void setSchedulingRequestID(SchedulingRequestId schedulingRequestID) {
			this.schedulingRequestID = schedulingRequestID;
		}

		public SchedulingRequestId getSchedulingRequestID() {
			return schedulingRequestID;
		}

		public void setLogicalChannelSRMask(BerBoolean logicalChannelSRMask) {
			this.logicalChannelSRMask = logicalChannelSRMask;
		}

		public BerBoolean getLogicalChannelSRMask() {
			return logicalChannelSRMask;
		}

		public void setLogicalChannelSRDelayTimerApplied(BerBoolean logicalChannelSRDelayTimerApplied) {
			this.logicalChannelSRDelayTimerApplied = logicalChannelSRDelayTimerApplied;
		}

		public BerBoolean getLogicalChannelSRDelayTimerApplied() {
			return logicalChannelSRDelayTimerApplied;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += logicalChannelSRDelayTimerApplied.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
			
			codeLength += logicalChannelSRMask.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
			
			if (schedulingRequestID != null) {
				codeLength += schedulingRequestID.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 8
				reverseOS.write(0x88);
				codeLength += 1;
			}
			
			if (logicalChannelGroup != null) {
				codeLength += logicalChannelGroup.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 7
				reverseOS.write(0x87);
				codeLength += 1;
			}
			
			if (configuredGrantType1Allowed != null) {
				codeLength += configuredGrantType1Allowed.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 6
				reverseOS.write(0x86);
				codeLength += 1;
			}
			
			if (maxPUSCHDuration != null) {
				codeLength += maxPUSCHDuration.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 5
				reverseOS.write(0x85);
				codeLength += 1;
			}
			
			if (allowedSCSList != null) {
				codeLength += allowedSCSList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				reverseOS.write(0xA4);
				codeLength += 1;
			}
			
			if (allowedServingCells != null) {
				codeLength += allowedServingCells.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
			}
			
			codeLength += bucketSizeDuration.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			
			codeLength += prioritisedBitRate.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += priority.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				priority = new BerInteger();
				subCodeLength += priority.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				prioritisedBitRate = new BerEnum();
				subCodeLength += prioritisedBitRate.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				bucketSizeDuration = new BerEnum();
				subCodeLength += bucketSizeDuration.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				allowedServingCells = new AllowedServingCells();
				subCodeLength += allowedServingCells.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				allowedSCSList = new AllowedSCSList();
				subCodeLength += allowedSCSList.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				maxPUSCHDuration = new BerEnum();
				subCodeLength += maxPUSCHDuration.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				configuredGrantType1Allowed = new BerEnum();
				subCodeLength += configuredGrantType1Allowed.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				logicalChannelGroup = new BerInteger();
				subCodeLength += logicalChannelGroup.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				schedulingRequestID = new SchedulingRequestId();
				subCodeLength += schedulingRequestID.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				logicalChannelSRMask = new BerBoolean();
				subCodeLength += logicalChannelSRMask.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
				logicalChannelSRDelayTimerApplied = new BerBoolean();
				subCodeLength += logicalChannelSRDelayTimerApplied.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (priority != null) {
				sb.append("priority: ").append(priority);
			}
			else {
				sb.append("priority: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (prioritisedBitRate != null) {
				sb.append("prioritisedBitRate: ").append(prioritisedBitRate);
			}
			else {
				sb.append("prioritisedBitRate: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (bucketSizeDuration != null) {
				sb.append("bucketSizeDuration: ").append(bucketSizeDuration);
			}
			else {
				sb.append("bucketSizeDuration: <empty-required-field>");
			}
			
			if (allowedServingCells != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("allowedServingCells: ");
				allowedServingCells.appendAsString(sb, indentLevel + 1);
			}
			
			if (allowedSCSList != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("allowedSCSList: ");
				allowedSCSList.appendAsString(sb, indentLevel + 1);
			}
			
			if (maxPUSCHDuration != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("maxPUSCHDuration: ").append(maxPUSCHDuration);
			}
			
			if (configuredGrantType1Allowed != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("configuredGrantType1Allowed: ").append(configuredGrantType1Allowed);
			}
			
			if (logicalChannelGroup != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("logicalChannelGroup: ").append(logicalChannelGroup);
			}
			
			if (schedulingRequestID != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("schedulingRequestID: ").append(schedulingRequestID);
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (logicalChannelSRMask != null) {
				sb.append("logicalChannelSRMask: ").append(logicalChannelSRMask);
			}
			else {
				sb.append("logicalChannelSRMask: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (logicalChannelSRDelayTimerApplied != null) {
				sb.append("logicalChannelSRDelayTimerApplied: ").append(logicalChannelSRDelayTimerApplied);
			}
			else {
				sb.append("logicalChannelSRDelayTimerApplied: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private UlSpecificParameters ulSpecificParameters = null;
	
	public LogicalChannelConfig() {
	}

	public LogicalChannelConfig(byte[] code) {
		this.code = code;
	}

	public void setUlSpecificParameters(UlSpecificParameters ulSpecificParameters) {
		this.ulSpecificParameters = ulSpecificParameters;
	}

	public UlSpecificParameters getUlSpecificParameters() {
		return ulSpecificParameters;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (ulSpecificParameters != null) {
			codeLength += ulSpecificParameters.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			ulSpecificParameters = new UlSpecificParameters();
			subCodeLength += ulSpecificParameters.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		if (ulSpecificParameters != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ulSpecificParameters: ");
			ulSpecificParameters.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

