/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class RACHConfigCommon implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SsbPerRACHOccasionAndCBPreamblesPerSSB implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerEnum oneEighth = null;
		private BerEnum oneFourth = null;
		private BerEnum oneHalf = null;
		private BerEnum one = null;
		private BerEnum two = null;
		private BerInteger four = null;
		private BerInteger eight = null;
		private BerInteger sixteen = null;
		
		public SsbPerRACHOccasionAndCBPreamblesPerSSB() {
		}

		public SsbPerRACHOccasionAndCBPreamblesPerSSB(byte[] code) {
			this.code = code;
		}

		public void setOneEighth(BerEnum oneEighth) {
			this.oneEighth = oneEighth;
		}

		public BerEnum getOneEighth() {
			return oneEighth;
		}

		public void setOneFourth(BerEnum oneFourth) {
			this.oneFourth = oneFourth;
		}

		public BerEnum getOneFourth() {
			return oneFourth;
		}

		public void setOneHalf(BerEnum oneHalf) {
			this.oneHalf = oneHalf;
		}

		public BerEnum getOneHalf() {
			return oneHalf;
		}

		public void setOne(BerEnum one) {
			this.one = one;
		}

		public BerEnum getOne() {
			return one;
		}

		public void setTwo(BerEnum two) {
			this.two = two;
		}

		public BerEnum getTwo() {
			return two;
		}

		public void setFour(BerInteger four) {
			this.four = four;
		}

		public BerInteger getFour() {
			return four;
		}

		public void setEight(BerInteger eight) {
			this.eight = eight;
		}

		public BerInteger getEight() {
			return eight;
		}

		public void setSixteen(BerInteger sixteen) {
			this.sixteen = sixteen;
		}

		public BerInteger getSixteen() {
			return sixteen;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (sixteen != null) {
				codeLength += sixteen.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 7
				reverseOS.write(0x87);
				codeLength += 1;
				return codeLength;
			}
			
			if (eight != null) {
				codeLength += eight.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 6
				reverseOS.write(0x86);
				codeLength += 1;
				return codeLength;
			}
			
			if (four != null) {
				codeLength += four.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 5
				reverseOS.write(0x85);
				codeLength += 1;
				return codeLength;
			}
			
			if (two != null) {
				codeLength += two.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				return codeLength;
			}
			
			if (one != null) {
				codeLength += one.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				return codeLength;
			}
			
			if (oneHalf != null) {
				codeLength += oneHalf.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				return codeLength;
			}
			
			if (oneFourth != null) {
				codeLength += oneFourth.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (oneEighth != null) {
				codeLength += oneEighth.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				oneEighth = new BerEnum();
				codeLength += oneEighth.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				oneFourth = new BerEnum();
				codeLength += oneFourth.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				oneHalf = new BerEnum();
				codeLength += oneHalf.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				one = new BerEnum();
				codeLength += one.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				two = new BerEnum();
				codeLength += two.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				four = new BerInteger();
				codeLength += four.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				eight = new BerInteger();
				codeLength += eight.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				sixteen = new BerInteger();
				codeLength += sixteen.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (oneEighth != null) {
				sb.append("oneEighth: ").append(oneEighth);
				return;
			}

			if (oneFourth != null) {
				sb.append("oneFourth: ").append(oneFourth);
				return;
			}

			if (oneHalf != null) {
				sb.append("oneHalf: ").append(oneHalf);
				return;
			}

			if (one != null) {
				sb.append("one: ").append(one);
				return;
			}

			if (two != null) {
				sb.append("two: ").append(two);
				return;
			}

			if (four != null) {
				sb.append("four: ").append(four);
				return;
			}

			if (eight != null) {
				sb.append("eight: ").append(eight);
				return;
			}

			if (sixteen != null) {
				sb.append("sixteen: ").append(sixteen);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class GroupBconfigured implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum raMsg3SizeGroupA = null;
		private BerEnum messagePowerOffsetGroupB = null;
		private BerInteger numberOfRAPreamblesGroupA = null;
		
		public GroupBconfigured() {
		}

		public GroupBconfigured(byte[] code) {
			this.code = code;
		}

		public void setRaMsg3SizeGroupA(BerEnum raMsg3SizeGroupA) {
			this.raMsg3SizeGroupA = raMsg3SizeGroupA;
		}

		public BerEnum getRaMsg3SizeGroupA() {
			return raMsg3SizeGroupA;
		}

		public void setMessagePowerOffsetGroupB(BerEnum messagePowerOffsetGroupB) {
			this.messagePowerOffsetGroupB = messagePowerOffsetGroupB;
		}

		public BerEnum getMessagePowerOffsetGroupB() {
			return messagePowerOffsetGroupB;
		}

		public void setNumberOfRAPreamblesGroupA(BerInteger numberOfRAPreamblesGroupA) {
			this.numberOfRAPreamblesGroupA = numberOfRAPreamblesGroupA;
		}

		public BerInteger getNumberOfRAPreamblesGroupA() {
			return numberOfRAPreamblesGroupA;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += numberOfRAPreamblesGroupA.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			
			codeLength += messagePowerOffsetGroupB.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += raMsg3SizeGroupA.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				raMsg3SizeGroupA = new BerEnum();
				subCodeLength += raMsg3SizeGroupA.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				messagePowerOffsetGroupB = new BerEnum();
				subCodeLength += messagePowerOffsetGroupB.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				numberOfRAPreamblesGroupA = new BerInteger();
				subCodeLength += numberOfRAPreamblesGroupA.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (raMsg3SizeGroupA != null) {
				sb.append("raMsg3SizeGroupA: ").append(raMsg3SizeGroupA);
			}
			else {
				sb.append("raMsg3SizeGroupA: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (messagePowerOffsetGroupB != null) {
				sb.append("messagePowerOffsetGroupB: ").append(messagePowerOffsetGroupB);
			}
			else {
				sb.append("messagePowerOffsetGroupB: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (numberOfRAPreamblesGroupA != null) {
				sb.append("numberOfRAPreamblesGroupA: ").append(numberOfRAPreamblesGroupA);
			}
			else {
				sb.append("numberOfRAPreamblesGroupA: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class PrachRootSequenceIndex implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerInteger l839 = null;
		private BerInteger l139 = null;
		
		public PrachRootSequenceIndex() {
		}

		public PrachRootSequenceIndex(byte[] code) {
			this.code = code;
		}

		public void setL839(BerInteger l839) {
			this.l839 = l839;
		}

		public BerInteger getL839() {
			return l839;
		}

		public void setL139(BerInteger l139) {
			this.l139 = l139;
		}

		public BerInteger getL139() {
			return l139;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (l139 != null) {
				codeLength += l139.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (l839 != null) {
				codeLength += l839.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				l839 = new BerInteger();
				codeLength += l839.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				l139 = new BerInteger();
				codeLength += l139.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (l839 != null) {
				sb.append("l839: ").append(l839);
				return;
			}

			if (l139 != null) {
				sb.append("l139: ").append(l139);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private RACHConfigGeneric rachConfigGeneric = null;
	private BerInteger totalNumberOfRAPreambles = null;
	private SsbPerRACHOccasionAndCBPreamblesPerSSB ssbPerRACHOccasionAndCBPreamblesPerSSB = null;
	private GroupBconfigured groupBconfigured = null;
	private BerEnum raContentionResolutionTimer = null;
	private RSRPRange rsrpThresholdSSB = null;
	private RSRPRange rsrpThresholdSSBSUL = null;
	private PrachRootSequenceIndex prachRootSequenceIndex = null;
	private SubcarrierSpacing msg1SubcarrierSpacing = null;
	private BerEnum restrictedSetConfig = null;
	private BerEnum msg3TransformPrecoding = null;
	
	public RACHConfigCommon() {
	}

	public RACHConfigCommon(byte[] code) {
		this.code = code;
	}

	public void setRachConfigGeneric(RACHConfigGeneric rachConfigGeneric) {
		this.rachConfigGeneric = rachConfigGeneric;
	}

	public RACHConfigGeneric getRachConfigGeneric() {
		return rachConfigGeneric;
	}

	public void setTotalNumberOfRAPreambles(BerInteger totalNumberOfRAPreambles) {
		this.totalNumberOfRAPreambles = totalNumberOfRAPreambles;
	}

	public BerInteger getTotalNumberOfRAPreambles() {
		return totalNumberOfRAPreambles;
	}

	public void setSsbPerRACHOccasionAndCBPreamblesPerSSB(SsbPerRACHOccasionAndCBPreamblesPerSSB ssbPerRACHOccasionAndCBPreamblesPerSSB) {
		this.ssbPerRACHOccasionAndCBPreamblesPerSSB = ssbPerRACHOccasionAndCBPreamblesPerSSB;
	}

	public SsbPerRACHOccasionAndCBPreamblesPerSSB getSsbPerRACHOccasionAndCBPreamblesPerSSB() {
		return ssbPerRACHOccasionAndCBPreamblesPerSSB;
	}

	public void setGroupBconfigured(GroupBconfigured groupBconfigured) {
		this.groupBconfigured = groupBconfigured;
	}

	public GroupBconfigured getGroupBconfigured() {
		return groupBconfigured;
	}

	public void setRaContentionResolutionTimer(BerEnum raContentionResolutionTimer) {
		this.raContentionResolutionTimer = raContentionResolutionTimer;
	}

	public BerEnum getRaContentionResolutionTimer() {
		return raContentionResolutionTimer;
	}

	public void setRsrpThresholdSSB(RSRPRange rsrpThresholdSSB) {
		this.rsrpThresholdSSB = rsrpThresholdSSB;
	}

	public RSRPRange getRsrpThresholdSSB() {
		return rsrpThresholdSSB;
	}

	public void setRsrpThresholdSSBSUL(RSRPRange rsrpThresholdSSBSUL) {
		this.rsrpThresholdSSBSUL = rsrpThresholdSSBSUL;
	}

	public RSRPRange getRsrpThresholdSSBSUL() {
		return rsrpThresholdSSBSUL;
	}

	public void setPrachRootSequenceIndex(PrachRootSequenceIndex prachRootSequenceIndex) {
		this.prachRootSequenceIndex = prachRootSequenceIndex;
	}

	public PrachRootSequenceIndex getPrachRootSequenceIndex() {
		return prachRootSequenceIndex;
	}

	public void setMsg1SubcarrierSpacing(SubcarrierSpacing msg1SubcarrierSpacing) {
		this.msg1SubcarrierSpacing = msg1SubcarrierSpacing;
	}

	public SubcarrierSpacing getMsg1SubcarrierSpacing() {
		return msg1SubcarrierSpacing;
	}

	public void setRestrictedSetConfig(BerEnum restrictedSetConfig) {
		this.restrictedSetConfig = restrictedSetConfig;
	}

	public BerEnum getRestrictedSetConfig() {
		return restrictedSetConfig;
	}

	public void setMsg3TransformPrecoding(BerEnum msg3TransformPrecoding) {
		this.msg3TransformPrecoding = msg3TransformPrecoding;
	}

	public BerEnum getMsg3TransformPrecoding() {
		return msg3TransformPrecoding;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (msg3TransformPrecoding != null) {
			codeLength += msg3TransformPrecoding.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		codeLength += restrictedSetConfig.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 9
		reverseOS.write(0x89);
		codeLength += 1;
		
		if (msg1SubcarrierSpacing != null) {
			codeLength += msg1SubcarrierSpacing.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		sublength = prachRootSequenceIndex.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
		reverseOS.write(0xA7);
		codeLength += 1;
		
		if (rsrpThresholdSSBSUL != null) {
			codeLength += rsrpThresholdSSBSUL.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (rsrpThresholdSSB != null) {
			codeLength += rsrpThresholdSSB.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		codeLength += raContentionResolutionTimer.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		if (groupBconfigured != null) {
			codeLength += groupBconfigured.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (ssbPerRACHOccasionAndCBPreamblesPerSSB != null) {
			sublength = ssbPerRACHOccasionAndCBPreamblesPerSSB.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (totalNumberOfRAPreambles != null) {
			codeLength += totalNumberOfRAPreambles.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += rachConfigGeneric.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		reverseOS.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			rachConfigGeneric = new RACHConfigGeneric();
			subCodeLength += rachConfigGeneric.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			totalNumberOfRAPreambles = new BerInteger();
			subCodeLength += totalNumberOfRAPreambles.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			subCodeLength += length.decode(is);
			ssbPerRACHOccasionAndCBPreamblesPerSSB = new SsbPerRACHOccasionAndCBPreamblesPerSSB();
			subCodeLength += ssbPerRACHOccasionAndCBPreamblesPerSSB.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			groupBconfigured = new GroupBconfigured();
			subCodeLength += groupBconfigured.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			raContentionResolutionTimer = new BerEnum();
			subCodeLength += raContentionResolutionTimer.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			rsrpThresholdSSB = new RSRPRange();
			subCodeLength += rsrpThresholdSSB.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			rsrpThresholdSSBSUL = new RSRPRange();
			subCodeLength += rsrpThresholdSSBSUL.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			subCodeLength += length.decode(is);
			prachRootSequenceIndex = new PrachRootSequenceIndex();
			subCodeLength += prachRootSequenceIndex.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			msg1SubcarrierSpacing = new SubcarrierSpacing();
			subCodeLength += msg1SubcarrierSpacing.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			restrictedSetConfig = new BerEnum();
			subCodeLength += restrictedSetConfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			msg3TransformPrecoding = new BerEnum();
			subCodeLength += msg3TransformPrecoding.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rachConfigGeneric != null) {
			sb.append("rachConfigGeneric: ");
			rachConfigGeneric.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("rachConfigGeneric: <empty-required-field>");
		}
		
		if (totalNumberOfRAPreambles != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("totalNumberOfRAPreambles: ").append(totalNumberOfRAPreambles);
		}
		
		if (ssbPerRACHOccasionAndCBPreamblesPerSSB != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ssbPerRACHOccasionAndCBPreamblesPerSSB: ");
			ssbPerRACHOccasionAndCBPreamblesPerSSB.appendAsString(sb, indentLevel + 1);
		}
		
		if (groupBconfigured != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("groupBconfigured: ");
			groupBconfigured.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (raContentionResolutionTimer != null) {
			sb.append("raContentionResolutionTimer: ").append(raContentionResolutionTimer);
		}
		else {
			sb.append("raContentionResolutionTimer: <empty-required-field>");
		}
		
		if (rsrpThresholdSSB != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rsrpThresholdSSB: ").append(rsrpThresholdSSB);
		}
		
		if (rsrpThresholdSSBSUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("rsrpThresholdSSBSUL: ").append(rsrpThresholdSSBSUL);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (prachRootSequenceIndex != null) {
			sb.append("prachRootSequenceIndex: ");
			prachRootSequenceIndex.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("prachRootSequenceIndex: <empty-required-field>");
		}
		
		if (msg1SubcarrierSpacing != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("msg1SubcarrierSpacing: ").append(msg1SubcarrierSpacing);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (restrictedSetConfig != null) {
			sb.append("restrictedSetConfig: ").append(restrictedSetConfig);
		}
		else {
			sb.append("restrictedSetConfig: <empty-required-field>");
		}
		
		if (msg3TransformPrecoding != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("msg3TransformPrecoding: ").append(msg3TransformPrecoding);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

