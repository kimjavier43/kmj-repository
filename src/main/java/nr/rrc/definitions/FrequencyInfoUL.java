/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class FrequencyInfoUL implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class ScsSpecificCarrierList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SCSSpecificCarrier> seqOf = null;

		public ScsSpecificCarrierList() {
			seqOf = new ArrayList<SCSSpecificCarrier>();
		}

		public ScsSpecificCarrierList(byte[] code) {
			this.code = code;
		}

		public List<SCSSpecificCarrier> getSCSSpecificCarrier() {
			if (seqOf == null) {
				seqOf = new ArrayList<SCSSpecificCarrier>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SCSSpecificCarrier element = new SCSSpecificCarrier();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SCSSpecificCarrier> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private MultiFrequencyBandListNR frequencyBandList = null;
	private ARFCNValueNR absoluteFrequencyPointA = null;
	private ScsSpecificCarrierList scsSpecificCarrierList = null;
	private AdditionalSpectrumEmission additionalSpectrumEmission = null;
	private PMax pMax = null;
	private BerEnum frequencyShift7p5khz = null;
	
	public FrequencyInfoUL() {
	}

	public FrequencyInfoUL(byte[] code) {
		this.code = code;
	}

	public void setFrequencyBandList(MultiFrequencyBandListNR frequencyBandList) {
		this.frequencyBandList = frequencyBandList;
	}

	public MultiFrequencyBandListNR getFrequencyBandList() {
		return frequencyBandList;
	}

	public void setAbsoluteFrequencyPointA(ARFCNValueNR absoluteFrequencyPointA) {
		this.absoluteFrequencyPointA = absoluteFrequencyPointA;
	}

	public ARFCNValueNR getAbsoluteFrequencyPointA() {
		return absoluteFrequencyPointA;
	}

	public void setScsSpecificCarrierList(ScsSpecificCarrierList scsSpecificCarrierList) {
		this.scsSpecificCarrierList = scsSpecificCarrierList;
	}

	public ScsSpecificCarrierList getScsSpecificCarrierList() {
		return scsSpecificCarrierList;
	}

	public void setAdditionalSpectrumEmission(AdditionalSpectrumEmission additionalSpectrumEmission) {
		this.additionalSpectrumEmission = additionalSpectrumEmission;
	}

	public AdditionalSpectrumEmission getAdditionalSpectrumEmission() {
		return additionalSpectrumEmission;
	}

	public void setPMax(PMax pMax) {
		this.pMax = pMax;
	}

	public PMax getPMax() {
		return pMax;
	}

	public void setFrequencyShift7p5khz(BerEnum frequencyShift7p5khz) {
		this.frequencyShift7p5khz = frequencyShift7p5khz;
	}

	public BerEnum getFrequencyShift7p5khz() {
		return frequencyShift7p5khz;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (frequencyShift7p5khz != null) {
			codeLength += frequencyShift7p5khz.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
		}
		
		if (pMax != null) {
			codeLength += pMax.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (additionalSpectrumEmission != null) {
			codeLength += additionalSpectrumEmission.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		codeLength += scsSpecificCarrierList.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
		reverseOS.write(0xA2);
		codeLength += 1;
		
		if (absoluteFrequencyPointA != null) {
			codeLength += absoluteFrequencyPointA.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		if (frequencyBandList != null) {
			codeLength += frequencyBandList.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			frequencyBandList = new MultiFrequencyBandListNR();
			subCodeLength += frequencyBandList.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			absoluteFrequencyPointA = new ARFCNValueNR();
			subCodeLength += absoluteFrequencyPointA.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			scsSpecificCarrierList = new ScsSpecificCarrierList();
			subCodeLength += scsSpecificCarrierList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			additionalSpectrumEmission = new AdditionalSpectrumEmission();
			subCodeLength += additionalSpectrumEmission.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			pMax = new PMax();
			subCodeLength += pMax.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			frequencyShift7p5khz = new BerEnum();
			subCodeLength += frequencyShift7p5khz.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (frequencyBandList != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("frequencyBandList: ");
			frequencyBandList.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (absoluteFrequencyPointA != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("absoluteFrequencyPointA: ").append(absoluteFrequencyPointA);
			firstSelectedElement = false;
		}
		
		if (!firstSelectedElement) {
			sb.append(",\n");
		}
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (scsSpecificCarrierList != null) {
			sb.append("scsSpecificCarrierList: ");
			scsSpecificCarrierList.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("scsSpecificCarrierList: <empty-required-field>");
		}
		
		if (additionalSpectrumEmission != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("additionalSpectrumEmission: ").append(additionalSpectrumEmission);
		}
		
		if (pMax != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("pMax: ").append(pMax);
		}
		
		if (frequencyShift7p5khz != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("frequencyShift7p5khz: ").append(frequencyShift7p5khz);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

