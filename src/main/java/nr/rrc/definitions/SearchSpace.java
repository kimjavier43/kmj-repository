/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SearchSpace implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class MonitoringSlotPeriodicityAndOffset implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerNull sl1 = null;
		private BerInteger sl2 = null;
		private BerInteger sl4 = null;
		private BerInteger sl5 = null;
		private BerInteger sl8 = null;
		private BerInteger sl10 = null;
		private BerInteger sl16 = null;
		private BerInteger sl20 = null;
		private BerInteger sl40 = null;
		private BerInteger sl80 = null;
		private BerInteger sl160 = null;
		private BerInteger sl320 = null;
		private BerInteger sl640 = null;
		private BerInteger sl1280 = null;
		private BerInteger sl2560 = null;
		
		public MonitoringSlotPeriodicityAndOffset() {
		}

		public MonitoringSlotPeriodicityAndOffset(byte[] code) {
			this.code = code;
		}

		public void setSl1(BerNull sl1) {
			this.sl1 = sl1;
		}

		public BerNull getSl1() {
			return sl1;
		}

		public void setSl2(BerInteger sl2) {
			this.sl2 = sl2;
		}

		public BerInteger getSl2() {
			return sl2;
		}

		public void setSl4(BerInteger sl4) {
			this.sl4 = sl4;
		}

		public BerInteger getSl4() {
			return sl4;
		}

		public void setSl5(BerInteger sl5) {
			this.sl5 = sl5;
		}

		public BerInteger getSl5() {
			return sl5;
		}

		public void setSl8(BerInteger sl8) {
			this.sl8 = sl8;
		}

		public BerInteger getSl8() {
			return sl8;
		}

		public void setSl10(BerInteger sl10) {
			this.sl10 = sl10;
		}

		public BerInteger getSl10() {
			return sl10;
		}

		public void setSl16(BerInteger sl16) {
			this.sl16 = sl16;
		}

		public BerInteger getSl16() {
			return sl16;
		}

		public void setSl20(BerInteger sl20) {
			this.sl20 = sl20;
		}

		public BerInteger getSl20() {
			return sl20;
		}

		public void setSl40(BerInteger sl40) {
			this.sl40 = sl40;
		}

		public BerInteger getSl40() {
			return sl40;
		}

		public void setSl80(BerInteger sl80) {
			this.sl80 = sl80;
		}

		public BerInteger getSl80() {
			return sl80;
		}

		public void setSl160(BerInteger sl160) {
			this.sl160 = sl160;
		}

		public BerInteger getSl160() {
			return sl160;
		}

		public void setSl320(BerInteger sl320) {
			this.sl320 = sl320;
		}

		public BerInteger getSl320() {
			return sl320;
		}

		public void setSl640(BerInteger sl640) {
			this.sl640 = sl640;
		}

		public BerInteger getSl640() {
			return sl640;
		}

		public void setSl1280(BerInteger sl1280) {
			this.sl1280 = sl1280;
		}

		public BerInteger getSl1280() {
			return sl1280;
		}

		public void setSl2560(BerInteger sl2560) {
			this.sl2560 = sl2560;
		}

		public BerInteger getSl2560() {
			return sl2560;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (sl2560 != null) {
				codeLength += sl2560.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 14
				reverseOS.write(0x8E);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl1280 != null) {
				codeLength += sl1280.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 13
				reverseOS.write(0x8D);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl640 != null) {
				codeLength += sl640.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 12
				reverseOS.write(0x8C);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl320 != null) {
				codeLength += sl320.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 11
				reverseOS.write(0x8B);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl160 != null) {
				codeLength += sl160.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 10
				reverseOS.write(0x8A);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl80 != null) {
				codeLength += sl80.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 9
				reverseOS.write(0x89);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl40 != null) {
				codeLength += sl40.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 8
				reverseOS.write(0x88);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl20 != null) {
				codeLength += sl20.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 7
				reverseOS.write(0x87);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl16 != null) {
				codeLength += sl16.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 6
				reverseOS.write(0x86);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl10 != null) {
				codeLength += sl10.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 5
				reverseOS.write(0x85);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl8 != null) {
				codeLength += sl8.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl5 != null) {
				codeLength += sl5.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl4 != null) {
				codeLength += sl4.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl2 != null) {
				codeLength += sl2.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (sl1 != null) {
				codeLength += sl1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				sl1 = new BerNull();
				codeLength += sl1.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				sl2 = new BerInteger();
				codeLength += sl2.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				sl4 = new BerInteger();
				codeLength += sl4.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				sl5 = new BerInteger();
				codeLength += sl5.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				sl8 = new BerInteger();
				codeLength += sl8.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				sl10 = new BerInteger();
				codeLength += sl10.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
				sl16 = new BerInteger();
				codeLength += sl16.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
				sl20 = new BerInteger();
				codeLength += sl20.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
				sl40 = new BerInteger();
				codeLength += sl40.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
				sl80 = new BerInteger();
				codeLength += sl80.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
				sl160 = new BerInteger();
				codeLength += sl160.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
				sl320 = new BerInteger();
				codeLength += sl320.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
				sl640 = new BerInteger();
				codeLength += sl640.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
				sl1280 = new BerInteger();
				codeLength += sl1280.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
				sl2560 = new BerInteger();
				codeLength += sl2560.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (sl1 != null) {
				sb.append("sl1: ").append(sl1);
				return;
			}

			if (sl2 != null) {
				sb.append("sl2: ").append(sl2);
				return;
			}

			if (sl4 != null) {
				sb.append("sl4: ").append(sl4);
				return;
			}

			if (sl5 != null) {
				sb.append("sl5: ").append(sl5);
				return;
			}

			if (sl8 != null) {
				sb.append("sl8: ").append(sl8);
				return;
			}

			if (sl10 != null) {
				sb.append("sl10: ").append(sl10);
				return;
			}

			if (sl16 != null) {
				sb.append("sl16: ").append(sl16);
				return;
			}

			if (sl20 != null) {
				sb.append("sl20: ").append(sl20);
				return;
			}

			if (sl40 != null) {
				sb.append("sl40: ").append(sl40);
				return;
			}

			if (sl80 != null) {
				sb.append("sl80: ").append(sl80);
				return;
			}

			if (sl160 != null) {
				sb.append("sl160: ").append(sl160);
				return;
			}

			if (sl320 != null) {
				sb.append("sl320: ").append(sl320);
				return;
			}

			if (sl640 != null) {
				sb.append("sl640: ").append(sl640);
				return;
			}

			if (sl1280 != null) {
				sb.append("sl1280: ").append(sl1280);
				return;
			}

			if (sl2560 != null) {
				sb.append("sl2560: ").append(sl2560);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class NrofCandidates implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum aggregationLevel1 = null;
		private BerEnum aggregationLevel2 = null;
		private BerEnum aggregationLevel4 = null;
		private BerEnum aggregationLevel8 = null;
		private BerEnum aggregationLevel16 = null;
		
		public NrofCandidates() {
		}

		public NrofCandidates(byte[] code) {
			this.code = code;
		}

		public void setAggregationLevel1(BerEnum aggregationLevel1) {
			this.aggregationLevel1 = aggregationLevel1;
		}

		public BerEnum getAggregationLevel1() {
			return aggregationLevel1;
		}

		public void setAggregationLevel2(BerEnum aggregationLevel2) {
			this.aggregationLevel2 = aggregationLevel2;
		}

		public BerEnum getAggregationLevel2() {
			return aggregationLevel2;
		}

		public void setAggregationLevel4(BerEnum aggregationLevel4) {
			this.aggregationLevel4 = aggregationLevel4;
		}

		public BerEnum getAggregationLevel4() {
			return aggregationLevel4;
		}

		public void setAggregationLevel8(BerEnum aggregationLevel8) {
			this.aggregationLevel8 = aggregationLevel8;
		}

		public BerEnum getAggregationLevel8() {
			return aggregationLevel8;
		}

		public void setAggregationLevel16(BerEnum aggregationLevel16) {
			this.aggregationLevel16 = aggregationLevel16;
		}

		public BerEnum getAggregationLevel16() {
			return aggregationLevel16;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += aggregationLevel16.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
			
			codeLength += aggregationLevel8.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
			
			codeLength += aggregationLevel4.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			
			codeLength += aggregationLevel2.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += aggregationLevel1.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				aggregationLevel1 = new BerEnum();
				subCodeLength += aggregationLevel1.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				aggregationLevel2 = new BerEnum();
				subCodeLength += aggregationLevel2.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				aggregationLevel4 = new BerEnum();
				subCodeLength += aggregationLevel4.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				aggregationLevel8 = new BerEnum();
				subCodeLength += aggregationLevel8.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				aggregationLevel16 = new BerEnum();
				subCodeLength += aggregationLevel16.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (aggregationLevel1 != null) {
				sb.append("aggregationLevel1: ").append(aggregationLevel1);
			}
			else {
				sb.append("aggregationLevel1: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (aggregationLevel2 != null) {
				sb.append("aggregationLevel2: ").append(aggregationLevel2);
			}
			else {
				sb.append("aggregationLevel2: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (aggregationLevel4 != null) {
				sb.append("aggregationLevel4: ").append(aggregationLevel4);
			}
			else {
				sb.append("aggregationLevel4: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (aggregationLevel8 != null) {
				sb.append("aggregationLevel8: ").append(aggregationLevel8);
			}
			else {
				sb.append("aggregationLevel8: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (aggregationLevel16 != null) {
				sb.append("aggregationLevel16: ").append(aggregationLevel16);
			}
			else {
				sb.append("aggregationLevel16: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class SearchSpaceType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Common implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class DciFormat00AndFormat10 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				
				public DciFormat00AndFormat10() {
				}

				public DciFormat00AndFormat10(byte[] code) {
					this.code = code;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					if (totalLength == 0) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
					return subCodeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class DciFormat20 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static class NrofCandidatesSFI implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerEnum aggregationLevel1 = null;
					private BerEnum aggregationLevel2 = null;
					private BerEnum aggregationLevel4 = null;
					private BerEnum aggregationLevel8 = null;
					private BerEnum aggregationLevel16 = null;
					
					public NrofCandidatesSFI() {
					}

					public NrofCandidatesSFI(byte[] code) {
						this.code = code;
					}

					public void setAggregationLevel1(BerEnum aggregationLevel1) {
						this.aggregationLevel1 = aggregationLevel1;
					}

					public BerEnum getAggregationLevel1() {
						return aggregationLevel1;
					}

					public void setAggregationLevel2(BerEnum aggregationLevel2) {
						this.aggregationLevel2 = aggregationLevel2;
					}

					public BerEnum getAggregationLevel2() {
						return aggregationLevel2;
					}

					public void setAggregationLevel4(BerEnum aggregationLevel4) {
						this.aggregationLevel4 = aggregationLevel4;
					}

					public BerEnum getAggregationLevel4() {
						return aggregationLevel4;
					}

					public void setAggregationLevel8(BerEnum aggregationLevel8) {
						this.aggregationLevel8 = aggregationLevel8;
					}

					public BerEnum getAggregationLevel8() {
						return aggregationLevel8;
					}

					public void setAggregationLevel16(BerEnum aggregationLevel16) {
						this.aggregationLevel16 = aggregationLevel16;
					}

					public BerEnum getAggregationLevel16() {
						return aggregationLevel16;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						if (aggregationLevel16 != null) {
							codeLength += aggregationLevel16.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 4
							reverseOS.write(0x84);
							codeLength += 1;
						}
						
						if (aggregationLevel8 != null) {
							codeLength += aggregationLevel8.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 3
							reverseOS.write(0x83);
							codeLength += 1;
						}
						
						if (aggregationLevel4 != null) {
							codeLength += aggregationLevel4.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 2
							reverseOS.write(0x82);
							codeLength += 1;
						}
						
						if (aggregationLevel2 != null) {
							codeLength += aggregationLevel2.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 1
							reverseOS.write(0x81);
							codeLength += 1;
						}
						
						if (aggregationLevel1 != null) {
							codeLength += aggregationLevel1.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 0
							reverseOS.write(0x80);
							codeLength += 1;
						}
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						if (totalLength == 0) {
							return codeLength;
						}
						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
							aggregationLevel1 = new BerEnum();
							subCodeLength += aggregationLevel1.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
							subCodeLength += berTag.decode(is);
						}
						
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
							aggregationLevel2 = new BerEnum();
							subCodeLength += aggregationLevel2.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
							subCodeLength += berTag.decode(is);
						}
						
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
							aggregationLevel4 = new BerEnum();
							subCodeLength += aggregationLevel4.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
							subCodeLength += berTag.decode(is);
						}
						
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
							aggregationLevel8 = new BerEnum();
							subCodeLength += aggregationLevel8.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
							subCodeLength += berTag.decode(is);
						}
						
						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
							aggregationLevel16 = new BerEnum();
							subCodeLength += aggregationLevel16.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						boolean firstSelectedElement = true;
						if (aggregationLevel1 != null) {
							sb.append("\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append("aggregationLevel1: ").append(aggregationLevel1);
							firstSelectedElement = false;
						}
						
						if (aggregationLevel2 != null) {
							if (!firstSelectedElement) {
								sb.append(",\n");
							}
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append("aggregationLevel2: ").append(aggregationLevel2);
							firstSelectedElement = false;
						}
						
						if (aggregationLevel4 != null) {
							if (!firstSelectedElement) {
								sb.append(",\n");
							}
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append("aggregationLevel4: ").append(aggregationLevel4);
							firstSelectedElement = false;
						}
						
						if (aggregationLevel8 != null) {
							if (!firstSelectedElement) {
								sb.append(",\n");
							}
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append("aggregationLevel8: ").append(aggregationLevel8);
							firstSelectedElement = false;
						}
						
						if (aggregationLevel16 != null) {
							if (!firstSelectedElement) {
								sb.append(",\n");
							}
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append("aggregationLevel16: ").append(aggregationLevel16);
							firstSelectedElement = false;
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private NrofCandidatesSFI nrofCandidatesSFI = null;
				
				public DciFormat20() {
				}

				public DciFormat20(byte[] code) {
					this.code = code;
				}

				public void setNrofCandidatesSFI(NrofCandidatesSFI nrofCandidatesSFI) {
					this.nrofCandidatesSFI = nrofCandidatesSFI;
				}

				public NrofCandidatesSFI getNrofCandidatesSFI() {
					return nrofCandidatesSFI;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += nrofCandidatesSFI.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
					reverseOS.write(0xA0);
					codeLength += 1;
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						nrofCandidatesSFI = new NrofCandidatesSFI();
						subCodeLength += nrofCandidatesSFI.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (nrofCandidatesSFI != null) {
						sb.append("nrofCandidatesSFI: ");
						nrofCandidatesSFI.appendAsString(sb, indentLevel + 1);
					}
					else {
						sb.append("nrofCandidatesSFI: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class DciFormat21 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				
				public DciFormat21() {
				}

				public DciFormat21(byte[] code) {
					this.code = code;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					if (totalLength == 0) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
					return subCodeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class DciFormat22 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				
				public DciFormat22() {
				}

				public DciFormat22(byte[] code) {
					this.code = code;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					if (totalLength == 0) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
					return subCodeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class DciFormat23 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerEnum monitoringPeriodicity = null;
				private BerEnum nrofPDCCHCandidates = null;
				
				public DciFormat23() {
				}

				public DciFormat23(byte[] code) {
					this.code = code;
				}

				public void setMonitoringPeriodicity(BerEnum monitoringPeriodicity) {
					this.monitoringPeriodicity = monitoringPeriodicity;
				}

				public BerEnum getMonitoringPeriodicity() {
					return monitoringPeriodicity;
				}

				public void setNrofPDCCHCandidates(BerEnum nrofPDCCHCandidates) {
					this.nrofPDCCHCandidates = nrofPDCCHCandidates;
				}

				public BerEnum getNrofPDCCHCandidates() {
					return nrofPDCCHCandidates;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += nrofPDCCHCandidates.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 1
					reverseOS.write(0x81);
					codeLength += 1;
					
					if (monitoringPeriodicity != null) {
						codeLength += monitoringPeriodicity.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 0
						reverseOS.write(0x80);
						codeLength += 1;
					}
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
						monitoringPeriodicity = new BerEnum();
						subCodeLength += monitoringPeriodicity.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					
					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
						nrofPDCCHCandidates = new BerEnum();
						subCodeLength += nrofPDCCHCandidates.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					boolean firstSelectedElement = true;
					if (monitoringPeriodicity != null) {
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append("monitoringPeriodicity: ").append(monitoringPeriodicity);
						firstSelectedElement = false;
					}
					
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (nrofPDCCHCandidates != null) {
						sb.append("nrofPDCCHCandidates: ").append(nrofPDCCHCandidates);
					}
					else {
						sb.append("nrofPDCCHCandidates: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private DciFormat00AndFormat10 dciFormat00AndFormat10 = null;
			private DciFormat20 dciFormat20 = null;
			private DciFormat21 dciFormat21 = null;
			private DciFormat22 dciFormat22 = null;
			private DciFormat23 dciFormat23 = null;
			
			public Common() {
			}

			public Common(byte[] code) {
				this.code = code;
			}

			public void setDciFormat00AndFormat10(DciFormat00AndFormat10 dciFormat00AndFormat10) {
				this.dciFormat00AndFormat10 = dciFormat00AndFormat10;
			}

			public DciFormat00AndFormat10 getDciFormat00AndFormat10() {
				return dciFormat00AndFormat10;
			}

			public void setDciFormat20(DciFormat20 dciFormat20) {
				this.dciFormat20 = dciFormat20;
			}

			public DciFormat20 getDciFormat20() {
				return dciFormat20;
			}

			public void setDciFormat21(DciFormat21 dciFormat21) {
				this.dciFormat21 = dciFormat21;
			}

			public DciFormat21 getDciFormat21() {
				return dciFormat21;
			}

			public void setDciFormat22(DciFormat22 dciFormat22) {
				this.dciFormat22 = dciFormat22;
			}

			public DciFormat22 getDciFormat22() {
				return dciFormat22;
			}

			public void setDciFormat23(DciFormat23 dciFormat23) {
				this.dciFormat23 = dciFormat23;
			}

			public DciFormat23 getDciFormat23() {
				return dciFormat23;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (dciFormat23 != null) {
					codeLength += dciFormat23.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
					reverseOS.write(0xA4);
					codeLength += 1;
				}
				
				if (dciFormat22 != null) {
					codeLength += dciFormat22.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
					reverseOS.write(0xA3);
					codeLength += 1;
				}
				
				if (dciFormat21 != null) {
					codeLength += dciFormat21.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
					reverseOS.write(0xA2);
					codeLength += 1;
				}
				
				if (dciFormat20 != null) {
					codeLength += dciFormat20.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					reverseOS.write(0xA1);
					codeLength += 1;
				}
				
				if (dciFormat00AndFormat10 != null) {
					codeLength += dciFormat00AndFormat10.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
					reverseOS.write(0xA0);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == 0) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					dciFormat00AndFormat10 = new DciFormat00AndFormat10();
					subCodeLength += dciFormat00AndFormat10.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					dciFormat20 = new DciFormat20();
					subCodeLength += dciFormat20.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
					dciFormat21 = new DciFormat21();
					subCodeLength += dciFormat21.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
					dciFormat22 = new DciFormat22();
					subCodeLength += dciFormat22.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
					dciFormat23 = new DciFormat23();
					subCodeLength += dciFormat23.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				boolean firstSelectedElement = true;
				if (dciFormat00AndFormat10 != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("dciFormat00AndFormat10: ");
					dciFormat00AndFormat10.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (dciFormat20 != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("dciFormat20: ");
					dciFormat20.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (dciFormat21 != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("dciFormat21: ");
					dciFormat21.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (dciFormat22 != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("dciFormat22: ");
					dciFormat22.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (dciFormat23 != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("dciFormat23: ");
					dciFormat23.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class UeSpecific implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum dciFormats = null;
			
			public UeSpecific() {
			}

			public UeSpecific(byte[] code) {
				this.code = code;
			}

			public void setDciFormats(BerEnum dciFormats) {
				this.dciFormats = dciFormats;
			}

			public BerEnum getDciFormats() {
				return dciFormats;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += dciFormats.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					dciFormats = new BerEnum();
					subCodeLength += dciFormats.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (dciFormats != null) {
					sb.append("dciFormats: ").append(dciFormats);
				}
				else {
					sb.append("dciFormats: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private Common common = null;
		private UeSpecific ueSpecific = null;
		
		public SearchSpaceType() {
		}

		public SearchSpaceType(byte[] code) {
			this.code = code;
		}

		public void setCommon(Common common) {
			this.common = common;
		}

		public Common getCommon() {
			return common;
		}

		public void setUeSpecific(UeSpecific ueSpecific) {
			this.ueSpecific = ueSpecific;
		}

		public UeSpecific getUeSpecific() {
			return ueSpecific;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (ueSpecific != null) {
				codeLength += ueSpecific.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (common != null) {
				codeLength += common.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				common = new Common();
				codeLength += common.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				ueSpecific = new UeSpecific();
				codeLength += ueSpecific.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (common != null) {
				sb.append("common: ");
				common.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (ueSpecific != null) {
				sb.append("ueSpecific: ");
				ueSpecific.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private SearchSpaceId searchSpaceId = null;
	private ControlResourceSetId controlResourceSetId = null;
	private MonitoringSlotPeriodicityAndOffset monitoringSlotPeriodicityAndOffset = null;
	private BerInteger duration = null;
	private BerBitString monitoringSymbolsWithinSlot = null;
	private NrofCandidates nrofCandidates = null;
	private SearchSpaceType searchSpaceType = null;
	
	public SearchSpace() {
	}

	public SearchSpace(byte[] code) {
		this.code = code;
	}

	public void setSearchSpaceId(SearchSpaceId searchSpaceId) {
		this.searchSpaceId = searchSpaceId;
	}

	public SearchSpaceId getSearchSpaceId() {
		return searchSpaceId;
	}

	public void setControlResourceSetId(ControlResourceSetId controlResourceSetId) {
		this.controlResourceSetId = controlResourceSetId;
	}

	public ControlResourceSetId getControlResourceSetId() {
		return controlResourceSetId;
	}

	public void setMonitoringSlotPeriodicityAndOffset(MonitoringSlotPeriodicityAndOffset monitoringSlotPeriodicityAndOffset) {
		this.monitoringSlotPeriodicityAndOffset = monitoringSlotPeriodicityAndOffset;
	}

	public MonitoringSlotPeriodicityAndOffset getMonitoringSlotPeriodicityAndOffset() {
		return monitoringSlotPeriodicityAndOffset;
	}

	public void setDuration(BerInteger duration) {
		this.duration = duration;
	}

	public BerInteger getDuration() {
		return duration;
	}

	public void setMonitoringSymbolsWithinSlot(BerBitString monitoringSymbolsWithinSlot) {
		this.monitoringSymbolsWithinSlot = monitoringSymbolsWithinSlot;
	}

	public BerBitString getMonitoringSymbolsWithinSlot() {
		return monitoringSymbolsWithinSlot;
	}

	public void setNrofCandidates(NrofCandidates nrofCandidates) {
		this.nrofCandidates = nrofCandidates;
	}

	public NrofCandidates getNrofCandidates() {
		return nrofCandidates;
	}

	public void setSearchSpaceType(SearchSpaceType searchSpaceType) {
		this.searchSpaceType = searchSpaceType;
	}

	public SearchSpaceType getSearchSpaceType() {
		return searchSpaceType;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (searchSpaceType != null) {
			sublength = searchSpaceType.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (nrofCandidates != null) {
			codeLength += nrofCandidates.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (monitoringSymbolsWithinSlot != null) {
			codeLength += monitoringSymbolsWithinSlot.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (duration != null) {
			codeLength += duration.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
		}
		
		if (monitoringSlotPeriodicityAndOffset != null) {
			sublength = monitoringSlotPeriodicityAndOffset.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (controlResourceSetId != null) {
			codeLength += controlResourceSetId.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		codeLength += searchSpaceId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			searchSpaceId = new SearchSpaceId();
			subCodeLength += searchSpaceId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			controlResourceSetId = new ControlResourceSetId();
			subCodeLength += controlResourceSetId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			subCodeLength += length.decode(is);
			monitoringSlotPeriodicityAndOffset = new MonitoringSlotPeriodicityAndOffset();
			subCodeLength += monitoringSlotPeriodicityAndOffset.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			duration = new BerInteger();
			subCodeLength += duration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			monitoringSymbolsWithinSlot = new BerBitString();
			subCodeLength += monitoringSymbolsWithinSlot.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			nrofCandidates = new NrofCandidates();
			subCodeLength += nrofCandidates.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			subCodeLength += length.decode(is);
			searchSpaceType = new SearchSpaceType();
			subCodeLength += searchSpaceType.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (searchSpaceId != null) {
			sb.append("searchSpaceId: ").append(searchSpaceId);
		}
		else {
			sb.append("searchSpaceId: <empty-required-field>");
		}
		
		if (controlResourceSetId != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("controlResourceSetId: ").append(controlResourceSetId);
		}
		
		if (monitoringSlotPeriodicityAndOffset != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("monitoringSlotPeriodicityAndOffset: ");
			monitoringSlotPeriodicityAndOffset.appendAsString(sb, indentLevel + 1);
		}
		
		if (duration != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("duration: ").append(duration);
		}
		
		if (monitoringSymbolsWithinSlot != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("monitoringSymbolsWithinSlot: ").append(monitoringSymbolsWithinSlot);
		}
		
		if (nrofCandidates != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nrofCandidates: ");
			nrofCandidates.appendAsString(sb, indentLevel + 1);
		}
		
		if (searchSpaceType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("searchSpaceType: ");
			searchSpaceType.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

