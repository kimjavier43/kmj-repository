/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class MIB implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerBitString systemFrameNumber = null;
	private BerEnum subCarrierSpacingCommon = null;
	private BerInteger ssbSubcarrierOffset = null;
	private BerEnum dmrsTypeAPosition = null;
	private BerInteger pdcchConfigSIB1 = null;
	private BerEnum cellBarred = null;
	private BerEnum intraFreqReselection = null;
	private BerBitString spare = null;
	
	public MIB() {
	}

	public MIB(byte[] code) {
		this.code = code;
	}

	public void setSystemFrameNumber(BerBitString systemFrameNumber) {
		this.systemFrameNumber = systemFrameNumber;
	}

	public BerBitString getSystemFrameNumber() {
		return systemFrameNumber;
	}

	public void setSubCarrierSpacingCommon(BerEnum subCarrierSpacingCommon) {
		this.subCarrierSpacingCommon = subCarrierSpacingCommon;
	}

	public BerEnum getSubCarrierSpacingCommon() {
		return subCarrierSpacingCommon;
	}

	public void setSsbSubcarrierOffset(BerInteger ssbSubcarrierOffset) {
		this.ssbSubcarrierOffset = ssbSubcarrierOffset;
	}

	public BerInteger getSsbSubcarrierOffset() {
		return ssbSubcarrierOffset;
	}

	public void setDmrsTypeAPosition(BerEnum dmrsTypeAPosition) {
		this.dmrsTypeAPosition = dmrsTypeAPosition;
	}

	public BerEnum getDmrsTypeAPosition() {
		return dmrsTypeAPosition;
	}

	public void setPdcchConfigSIB1(BerInteger pdcchConfigSIB1) {
		this.pdcchConfigSIB1 = pdcchConfigSIB1;
	}

	public BerInteger getPdcchConfigSIB1() {
		return pdcchConfigSIB1;
	}

	public void setCellBarred(BerEnum cellBarred) {
		this.cellBarred = cellBarred;
	}

	public BerEnum getCellBarred() {
		return cellBarred;
	}

	public void setIntraFreqReselection(BerEnum intraFreqReselection) {
		this.intraFreqReselection = intraFreqReselection;
	}

	public BerEnum getIntraFreqReselection() {
		return intraFreqReselection;
	}

	public void setSpare(BerBitString spare) {
		this.spare = spare;
	}

	public BerBitString getSpare() {
		return spare;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += spare.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 7
		reverseOS.write(0x87);
		codeLength += 1;
		
		codeLength += intraFreqReselection.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		reverseOS.write(0x86);
		codeLength += 1;
		
		codeLength += cellBarred.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += pdcchConfigSIB1.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += dmrsTypeAPosition.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += ssbSubcarrierOffset.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		codeLength += subCarrierSpacingCommon.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		reverseOS.write(0x81);
		codeLength += 1;
		
		codeLength += systemFrameNumber.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			systemFrameNumber = new BerBitString();
			subCodeLength += systemFrameNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			subCarrierSpacingCommon = new BerEnum();
			subCodeLength += subCarrierSpacingCommon.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			ssbSubcarrierOffset = new BerInteger();
			subCodeLength += ssbSubcarrierOffset.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			dmrsTypeAPosition = new BerEnum();
			subCodeLength += dmrsTypeAPosition.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			pdcchConfigSIB1 = new BerInteger();
			subCodeLength += pdcchConfigSIB1.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			cellBarred = new BerEnum();
			subCodeLength += cellBarred.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			intraFreqReselection = new BerEnum();
			subCodeLength += intraFreqReselection.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			spare = new BerBitString();
			subCodeLength += spare.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (systemFrameNumber != null) {
			sb.append("systemFrameNumber: ").append(systemFrameNumber);
		}
		else {
			sb.append("systemFrameNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (subCarrierSpacingCommon != null) {
			sb.append("subCarrierSpacingCommon: ").append(subCarrierSpacingCommon);
		}
		else {
			sb.append("subCarrierSpacingCommon: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (ssbSubcarrierOffset != null) {
			sb.append("ssbSubcarrierOffset: ").append(ssbSubcarrierOffset);
		}
		else {
			sb.append("ssbSubcarrierOffset: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dmrsTypeAPosition != null) {
			sb.append("dmrsTypeAPosition: ").append(dmrsTypeAPosition);
		}
		else {
			sb.append("dmrsTypeAPosition: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (pdcchConfigSIB1 != null) {
			sb.append("pdcchConfigSIB1: ").append(pdcchConfigSIB1);
		}
		else {
			sb.append("pdcchConfigSIB1: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cellBarred != null) {
			sb.append("cellBarred: ").append(cellBarred);
		}
		else {
			sb.append("cellBarred: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (intraFreqReselection != null) {
			sb.append("intraFreqReselection: ").append(intraFreqReselection);
		}
		else {
			sb.append("intraFreqReselection: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (spare != null) {
			sb.append("spare: ").append(spare);
		}
		else {
			sb.append("spare: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

