/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.rrc.definitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CSIResourceConfig implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class CsiRSResourceSetList implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class NzpCSIRSSSB implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class NzpCSIRSResourceSetList implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<NZPCSIRSResourceSetId> seqOf = null;

				public NzpCSIRSResourceSetList() {
					seqOf = new ArrayList<NZPCSIRSResourceSetId>();
				}

				public NzpCSIRSResourceSetList(byte[] code) {
					this.code = code;
				}

				public List<NZPCSIRSResourceSetId> getNZPCSIRSResourceSetId() {
					if (seqOf == null) {
						seqOf = new ArrayList<NZPCSIRSResourceSetId>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						NZPCSIRSResourceSetId element = new NZPCSIRSResourceSetId();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<NZPCSIRSResourceSetId> it = seqOf.iterator();
						if (it.hasNext()) {
							sb.append(it.next());
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								sb.append(it.next());
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class CsiSSBResourceSetList implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
				public byte[] code = null;
				private List<CSISSBResourceSetId> seqOf = null;

				public CsiSSBResourceSetList() {
					seqOf = new ArrayList<CSISSBResourceSetId>();
				}

				public CsiSSBResourceSetList(byte[] code) {
					this.code = code;
				}

				public List<CSISSBResourceSetId> getCSISSBResourceSetId() {
					if (seqOf == null) {
						seqOf = new ArrayList<CSISSBResourceSetId>();
					}
					return seqOf;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					for (int i = (seqOf.size() - 1); i >= 0; i--) {
						codeLength += seqOf.get(i).encode(reverseOS, true);
					}

					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);
					int totalLength = length.val;

					while (subCodeLength < totalLength) {
						CSISSBResourceSetId element = new CSISSBResourceSetId();
						subCodeLength += element.decode(is, true);
						seqOf.add(element);
					}
					if (subCodeLength != totalLength) {
						throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

					}
					codeLength += subCodeLength;

					return codeLength;
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (seqOf == null) {
						sb.append("null");
					}
					else {
						Iterator<CSISSBResourceSetId> it = seqOf.iterator();
						if (it.hasNext()) {
							sb.append(it.next());
							while (it.hasNext()) {
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								sb.append(it.next());
							}
						}
					}

					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private NzpCSIRSResourceSetList nzpCSIRSResourceSetList = null;
			private CsiSSBResourceSetList csiSSBResourceSetList = null;
			
			public NzpCSIRSSSB() {
			}

			public NzpCSIRSSSB(byte[] code) {
				this.code = code;
			}

			public void setNzpCSIRSResourceSetList(NzpCSIRSResourceSetList nzpCSIRSResourceSetList) {
				this.nzpCSIRSResourceSetList = nzpCSIRSResourceSetList;
			}

			public NzpCSIRSResourceSetList getNzpCSIRSResourceSetList() {
				return nzpCSIRSResourceSetList;
			}

			public void setCsiSSBResourceSetList(CsiSSBResourceSetList csiSSBResourceSetList) {
				this.csiSSBResourceSetList = csiSSBResourceSetList;
			}

			public CsiSSBResourceSetList getCsiSSBResourceSetList() {
				return csiSSBResourceSetList;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				if (csiSSBResourceSetList != null) {
					codeLength += csiSSBResourceSetList.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					reverseOS.write(0xA1);
					codeLength += 1;
				}
				
				if (nzpCSIRSResourceSetList != null) {
					codeLength += nzpCSIRSResourceSetList.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
					reverseOS.write(0xA0);
					codeLength += 1;
				}
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				if (totalLength == 0) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					nzpCSIRSResourceSetList = new NzpCSIRSResourceSetList();
					subCodeLength += nzpCSIRSResourceSetList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					subCodeLength += berTag.decode(is);
				}
				
				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					csiSSBResourceSetList = new CsiSSBResourceSetList();
					subCodeLength += csiSSBResourceSetList.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				boolean firstSelectedElement = true;
				if (nzpCSIRSResourceSetList != null) {
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("nzpCSIRSResourceSetList: ");
					nzpCSIRSResourceSetList.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				if (csiSSBResourceSetList != null) {
					if (!firstSelectedElement) {
						sb.append(",\n");
					}
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					sb.append("csiSSBResourceSetList: ");
					csiSSBResourceSetList.appendAsString(sb, indentLevel + 1);
					firstSelectedElement = false;
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class CsiIMResourceSetList implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
			public byte[] code = null;
			private List<CSIIMResourceSetId> seqOf = null;

			public CsiIMResourceSetList() {
				seqOf = new ArrayList<CSIIMResourceSetId>();
			}

			public CsiIMResourceSetList(byte[] code) {
				this.code = code;
			}

			public List<CSIIMResourceSetId> getCSIIMResourceSetId() {
				if (seqOf == null) {
					seqOf = new ArrayList<CSIIMResourceSetId>();
				}
				return seqOf;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(reverseOS, true);
				}

				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);
				int totalLength = length.val;

				while (subCodeLength < totalLength) {
					CSIIMResourceSetId element = new CSIIMResourceSetId();
					subCodeLength += element.decode(is, true);
					seqOf.add(element);
				}
				if (subCodeLength != totalLength) {
					throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

				}
				codeLength += subCodeLength;

				return codeLength;
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (seqOf == null) {
					sb.append("null");
				}
				else {
					Iterator<CSIIMResourceSetId> it = seqOf.iterator();
					if (it.hasNext()) {
						sb.append(it.next());
						while (it.hasNext()) {
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append(it.next());
						}
					}
				}

				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private NzpCSIRSSSB nzpCSIRSSSB = null;
		private CsiIMResourceSetList csiIMResourceSetList = null;
		
		public CsiRSResourceSetList() {
		}

		public CsiRSResourceSetList(byte[] code) {
			this.code = code;
		}

		public void setNzpCSIRSSSB(NzpCSIRSSSB nzpCSIRSSSB) {
			this.nzpCSIRSSSB = nzpCSIRSSSB;
		}

		public NzpCSIRSSSB getNzpCSIRSSSB() {
			return nzpCSIRSSSB;
		}

		public void setCsiIMResourceSetList(CsiIMResourceSetList csiIMResourceSetList) {
			this.csiIMResourceSetList = csiIMResourceSetList;
		}

		public CsiIMResourceSetList getCsiIMResourceSetList() {
			return csiIMResourceSetList;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (csiIMResourceSetList != null) {
				codeLength += csiIMResourceSetList.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (nzpCSIRSSSB != null) {
				codeLength += nzpCSIRSSSB.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				nzpCSIRSSSB = new NzpCSIRSSSB();
				codeLength += nzpCSIRSSSB.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				csiIMResourceSetList = new CsiIMResourceSetList();
				codeLength += csiIMResourceSetList.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (nzpCSIRSSSB != null) {
				sb.append("nzpCSIRSSSB: ");
				nzpCSIRSSSB.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (csiIMResourceSetList != null) {
				sb.append("csiIMResourceSetList: ");
				csiIMResourceSetList.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private CSIResourceConfigId csiResourceConfigId = null;
	private CsiRSResourceSetList csiRSResourceSetList = null;
	private BWPId bwpId = null;
	private BerEnum resourceType = null;
	
	public CSIResourceConfig() {
	}

	public CSIResourceConfig(byte[] code) {
		this.code = code;
	}

	public void setCsiResourceConfigId(CSIResourceConfigId csiResourceConfigId) {
		this.csiResourceConfigId = csiResourceConfigId;
	}

	public CSIResourceConfigId getCsiResourceConfigId() {
		return csiResourceConfigId;
	}

	public void setCsiRSResourceSetList(CsiRSResourceSetList csiRSResourceSetList) {
		this.csiRSResourceSetList = csiRSResourceSetList;
	}

	public CsiRSResourceSetList getCsiRSResourceSetList() {
		return csiRSResourceSetList;
	}

	public void setBwpId(BWPId bwpId) {
		this.bwpId = bwpId;
	}

	public BWPId getBwpId() {
		return bwpId;
	}

	public void setResourceType(BerEnum resourceType) {
		this.resourceType = resourceType;
	}

	public BerEnum getResourceType() {
		return resourceType;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		codeLength += resourceType.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		codeLength += bwpId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		reverseOS.write(0x82);
		codeLength += 1;
		
		sublength = csiRSResourceSetList.encode(reverseOS);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(reverseOS, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		reverseOS.write(0xA1);
		codeLength += 1;
		
		codeLength += csiResourceConfigId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			csiResourceConfigId = new CSIResourceConfigId();
			subCodeLength += csiResourceConfigId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			csiRSResourceSetList = new CsiRSResourceSetList();
			subCodeLength += csiRSResourceSetList.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			bwpId = new BWPId();
			subCodeLength += bwpId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			resourceType = new BerEnum();
			subCodeLength += resourceType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (csiResourceConfigId != null) {
			sb.append("csiResourceConfigId: ").append(csiResourceConfigId);
		}
		else {
			sb.append("csiResourceConfigId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (csiRSResourceSetList != null) {
			sb.append("csiRSResourceSetList: ");
			csiRSResourceSetList.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("csiRSResourceSetList: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (bwpId != null) {
			sb.append("bwpId: ").append(bwpId);
		}
		else {
			sb.append("bwpId: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (resourceType != null) {
			sb.append("resourceType: ").append(resourceType);
		}
		else {
			sb.append("resourceType: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

