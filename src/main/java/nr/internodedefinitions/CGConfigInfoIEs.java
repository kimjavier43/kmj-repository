/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.internodedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import nr.rrc.definitions.ARFCNValueNR;
import nr.rrc.definitions.CSIRSIndex;
import nr.rrc.definitions.CellIdentity;
import nr.rrc.definitions.GapConfig;
import nr.rrc.definitions.MeasQuantityResults;
import nr.rrc.definitions.MeasResultCellListSFTD;
import nr.rrc.definitions.MeasResultList2NR;
import nr.rrc.definitions.MeasResultSCGFailure;
import nr.rrc.definitions.PMax;
import nr.rrc.definitions.PhysCellId;
import nr.rrc.definitions.RRCReconfiguration;
import nr.rrc.definitions.RadioBearerConfig;
import nr.rrc.definitions.SSBIndex;
import nr.rrc.definitions.SSBMTC;
import nr.rrc.definitions.ServCellIndex;
import nr.rrc.definitions.SetupRelease;
import nr.rrc.definitions.ShortMACI;
import nr.rrc.definitions.UECapabilityRATContainerList;

public class CGConfigInfoIEs implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class ScgFailureInfo implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum failureType = null;
		private BerOctetString measResultSCG = null;
		
		public ScgFailureInfo() {
		}

		public ScgFailureInfo(byte[] code) {
			this.code = code;
		}

		public void setFailureType(BerEnum failureType) {
			this.failureType = failureType;
		}

		public BerEnum getFailureType() {
			return failureType;
		}

		public void setMeasResultSCG(BerOctetString measResultSCG) {
			this.measResultSCG = measResultSCG;
		}

		public BerOctetString getMeasResultSCG() {
			return measResultSCG;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += measResultSCG.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += failureType.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				failureType = new BerEnum();
				subCodeLength += failureType.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				measResultSCG = new BerOctetString();
				subCodeLength += measResultSCG.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (failureType != null) {
				sb.append("failureType: ").append(failureType);
			}
			else {
				sb.append("failureType: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (measResultSCG != null) {
				sb.append("measResultSCG: ").append(measResultSCG);
			}
			else {
				sb.append("measResultSCG: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class NonCriticalExtension implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		
		public NonCriticalExtension() {
		}

		public NonCriticalExtension(byte[] code) {
			this.code = code;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			return subCodeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerOctetString ueCapabilityInfo = null;
	private MeasResultList2NR candidateCellInfoListMN = null;
	private BerOctetString candidateCellInfoListSN = null;
	private MeasResultCellListSFTD measResultCellListSFTD = null;
	private ScgFailureInfo scgFailureInfo = null;
	private ConfigRestrictInfoSCG configRestrictInfo = null;
	private DRXInfo drxInfoMCG = null;
	private MeasConfigMN measConfigMN = null;
	private BerOctetString sourceConfigSCG = null;
	private BerOctetString scgRBConfig = null;
	private BerOctetString mcgRBConfig = null;
	private NonCriticalExtension nonCriticalExtension = null;
	
	public CGConfigInfoIEs() {
	}

	public CGConfigInfoIEs(byte[] code) {
		this.code = code;
	}

	public void setUeCapabilityInfo(BerOctetString ueCapabilityInfo) {
		this.ueCapabilityInfo = ueCapabilityInfo;
	}

	public BerOctetString getUeCapabilityInfo() {
		return ueCapabilityInfo;
	}

	public void setCandidateCellInfoListMN(MeasResultList2NR candidateCellInfoListMN) {
		this.candidateCellInfoListMN = candidateCellInfoListMN;
	}

	public MeasResultList2NR getCandidateCellInfoListMN() {
		return candidateCellInfoListMN;
	}

	public void setCandidateCellInfoListSN(BerOctetString candidateCellInfoListSN) {
		this.candidateCellInfoListSN = candidateCellInfoListSN;
	}

	public BerOctetString getCandidateCellInfoListSN() {
		return candidateCellInfoListSN;
	}

	public void setMeasResultCellListSFTD(MeasResultCellListSFTD measResultCellListSFTD) {
		this.measResultCellListSFTD = measResultCellListSFTD;
	}

	public MeasResultCellListSFTD getMeasResultCellListSFTD() {
		return measResultCellListSFTD;
	}

	public void setScgFailureInfo(ScgFailureInfo scgFailureInfo) {
		this.scgFailureInfo = scgFailureInfo;
	}

	public ScgFailureInfo getScgFailureInfo() {
		return scgFailureInfo;
	}

	public void setConfigRestrictInfo(ConfigRestrictInfoSCG configRestrictInfo) {
		this.configRestrictInfo = configRestrictInfo;
	}

	public ConfigRestrictInfoSCG getConfigRestrictInfo() {
		return configRestrictInfo;
	}

	public void setDrxInfoMCG(DRXInfo drxInfoMCG) {
		this.drxInfoMCG = drxInfoMCG;
	}

	public DRXInfo getDrxInfoMCG() {
		return drxInfoMCG;
	}

	public void setMeasConfigMN(MeasConfigMN measConfigMN) {
		this.measConfigMN = measConfigMN;
	}

	public MeasConfigMN getMeasConfigMN() {
		return measConfigMN;
	}

	public void setSourceConfigSCG(BerOctetString sourceConfigSCG) {
		this.sourceConfigSCG = sourceConfigSCG;
	}

	public BerOctetString getSourceConfigSCG() {
		return sourceConfigSCG;
	}

	public void setScgRBConfig(BerOctetString scgRBConfig) {
		this.scgRBConfig = scgRBConfig;
	}

	public BerOctetString getScgRBConfig() {
		return scgRBConfig;
	}

	public void setMcgRBConfig(BerOctetString mcgRBConfig) {
		this.mcgRBConfig = mcgRBConfig;
	}

	public BerOctetString getMcgRBConfig() {
		return mcgRBConfig;
	}

	public void setNonCriticalExtension(NonCriticalExtension nonCriticalExtension) {
		this.nonCriticalExtension = nonCriticalExtension;
	}

	public NonCriticalExtension getNonCriticalExtension() {
		return nonCriticalExtension;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (nonCriticalExtension != null) {
			codeLength += nonCriticalExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
		}
		
		if (mcgRBConfig != null) {
			codeLength += mcgRBConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			reverseOS.write(0x8A);
			codeLength += 1;
		}
		
		if (scgRBConfig != null) {
			codeLength += scgRBConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			reverseOS.write(0x89);
			codeLength += 1;
		}
		
		if (sourceConfigSCG != null) {
			codeLength += sourceConfigSCG.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			reverseOS.write(0x88);
			codeLength += 1;
		}
		
		if (measConfigMN != null) {
			codeLength += measConfigMN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (drxInfoMCG != null) {
			codeLength += drxInfoMCG.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			reverseOS.write(0xA6);
			codeLength += 1;
		}
		
		if (configRestrictInfo != null) {
			codeLength += configRestrictInfo.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (scgFailureInfo != null) {
			codeLength += scgFailureInfo.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
		}
		
		if (measResultCellListSFTD != null) {
			codeLength += measResultCellListSFTD.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (candidateCellInfoListSN != null) {
			codeLength += candidateCellInfoListSN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (candidateCellInfoListMN != null) {
			codeLength += candidateCellInfoListMN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		if (ueCapabilityInfo != null) {
			codeLength += ueCapabilityInfo.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			ueCapabilityInfo = new BerOctetString();
			subCodeLength += ueCapabilityInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			candidateCellInfoListMN = new MeasResultList2NR();
			subCodeLength += candidateCellInfoListMN.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			candidateCellInfoListSN = new BerOctetString();
			subCodeLength += candidateCellInfoListSN.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			measResultCellListSFTD = new MeasResultCellListSFTD();
			subCodeLength += measResultCellListSFTD.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			scgFailureInfo = new ScgFailureInfo();
			subCodeLength += scgFailureInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			configRestrictInfo = new ConfigRestrictInfoSCG();
			subCodeLength += configRestrictInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			drxInfoMCG = new DRXInfo();
			subCodeLength += drxInfoMCG.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			measConfigMN = new MeasConfigMN();
			subCodeLength += measConfigMN.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			sourceConfigSCG = new BerOctetString();
			subCodeLength += sourceConfigSCG.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			scgRBConfig = new BerOctetString();
			subCodeLength += scgRBConfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			mcgRBConfig = new BerOctetString();
			subCodeLength += mcgRBConfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			nonCriticalExtension = new NonCriticalExtension();
			subCodeLength += nonCriticalExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (ueCapabilityInfo != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ueCapabilityInfo: ").append(ueCapabilityInfo);
			firstSelectedElement = false;
		}
		
		if (candidateCellInfoListMN != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("candidateCellInfoListMN: ");
			candidateCellInfoListMN.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (candidateCellInfoListSN != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("candidateCellInfoListSN: ").append(candidateCellInfoListSN);
			firstSelectedElement = false;
		}
		
		if (measResultCellListSFTD != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("measResultCellListSFTD: ");
			measResultCellListSFTD.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (scgFailureInfo != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scgFailureInfo: ");
			scgFailureInfo.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (configRestrictInfo != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("configRestrictInfo: ");
			configRestrictInfo.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (drxInfoMCG != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("drxInfoMCG: ");
			drxInfoMCG.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (measConfigMN != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("measConfigMN: ");
			measConfigMN.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (sourceConfigSCG != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sourceConfigSCG: ").append(sourceConfigSCG);
			firstSelectedElement = false;
		}
		
		if (scgRBConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scgRBConfig: ").append(scgRBConfig);
			firstSelectedElement = false;
		}
		
		if (mcgRBConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mcgRBConfig: ").append(mcgRBConfig);
			firstSelectedElement = false;
		}
		
		if (nonCriticalExtension != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonCriticalExtension: ");
			nonCriticalExtension.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

