/**
 * This class file was automatically generated by jASN1 v1.10.0 (http://www.openmuc.org)
 */

package nr.internodedefinitions;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import nr.rrc.definitions.ARFCNValueNR;
import nr.rrc.definitions.CSIRSIndex;
import nr.rrc.definitions.CellIdentity;
import nr.rrc.definitions.GapConfig;
import nr.rrc.definitions.MeasQuantityResults;
import nr.rrc.definitions.MeasResultCellListSFTD;
import nr.rrc.definitions.MeasResultList2NR;
import nr.rrc.definitions.MeasResultSCGFailure;
import nr.rrc.definitions.PMax;
import nr.rrc.definitions.PhysCellId;
import nr.rrc.definitions.RRCReconfiguration;
import nr.rrc.definitions.RadioBearerConfig;
import nr.rrc.definitions.SSBIndex;
import nr.rrc.definitions.SSBMTC;
import nr.rrc.definitions.ServCellIndex;
import nr.rrc.definitions.SetupRelease;
import nr.rrc.definitions.ShortMACI;
import nr.rrc.definitions.UECapabilityRATContainerList;

public class CGConfigIEs implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class NonCriticalExtension implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		
		public NonCriticalExtension() {
		}

		public NonCriticalExtension(byte[] code) {
			this.code = code;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			if (totalLength == 0) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
			return subCodeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerOctetString scgCellGroupConfig = null;
	private BerOctetString scgRBConfig = null;
	private ConfigRestrictModReqSCG configRestrictModReq = null;
	private DRXInfo drxInfoSCG = null;
	private BerOctetString candidateCellInfoListSN = null;
	private MeasConfigSN measConfigSN = null;
	private BandCombinationIndex selectedBandCombinationNR = null;
	private FRInfoList frInfoListSCG = null;
	private NonCriticalExtension nonCriticalExtension = null;
	
	public CGConfigIEs() {
	}

	public CGConfigIEs(byte[] code) {
		this.code = code;
	}

	public void setScgCellGroupConfig(BerOctetString scgCellGroupConfig) {
		this.scgCellGroupConfig = scgCellGroupConfig;
	}

	public BerOctetString getScgCellGroupConfig() {
		return scgCellGroupConfig;
	}

	public void setScgRBConfig(BerOctetString scgRBConfig) {
		this.scgRBConfig = scgRBConfig;
	}

	public BerOctetString getScgRBConfig() {
		return scgRBConfig;
	}

	public void setConfigRestrictModReq(ConfigRestrictModReqSCG configRestrictModReq) {
		this.configRestrictModReq = configRestrictModReq;
	}

	public ConfigRestrictModReqSCG getConfigRestrictModReq() {
		return configRestrictModReq;
	}

	public void setDrxInfoSCG(DRXInfo drxInfoSCG) {
		this.drxInfoSCG = drxInfoSCG;
	}

	public DRXInfo getDrxInfoSCG() {
		return drxInfoSCG;
	}

	public void setCandidateCellInfoListSN(BerOctetString candidateCellInfoListSN) {
		this.candidateCellInfoListSN = candidateCellInfoListSN;
	}

	public BerOctetString getCandidateCellInfoListSN() {
		return candidateCellInfoListSN;
	}

	public void setMeasConfigSN(MeasConfigSN measConfigSN) {
		this.measConfigSN = measConfigSN;
	}

	public MeasConfigSN getMeasConfigSN() {
		return measConfigSN;
	}

	public void setSelectedBandCombinationNR(BandCombinationIndex selectedBandCombinationNR) {
		this.selectedBandCombinationNR = selectedBandCombinationNR;
	}

	public BandCombinationIndex getSelectedBandCombinationNR() {
		return selectedBandCombinationNR;
	}

	public void setFrInfoListSCG(FRInfoList frInfoListSCG) {
		this.frInfoListSCG = frInfoListSCG;
	}

	public FRInfoList getFrInfoListSCG() {
		return frInfoListSCG;
	}

	public void setNonCriticalExtension(NonCriticalExtension nonCriticalExtension) {
		this.nonCriticalExtension = nonCriticalExtension;
	}

	public NonCriticalExtension getNonCriticalExtension() {
		return nonCriticalExtension;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (nonCriticalExtension != null) {
			codeLength += nonCriticalExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			reverseOS.write(0xA8);
			codeLength += 1;
		}
		
		if (frInfoListSCG != null) {
			codeLength += frInfoListSCG.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			reverseOS.write(0xA7);
			codeLength += 1;
		}
		
		if (selectedBandCombinationNR != null) {
			codeLength += selectedBandCombinationNR.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			reverseOS.write(0x86);
			codeLength += 1;
		}
		
		if (measConfigSN != null) {
			codeLength += measConfigSN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
		}
		
		if (candidateCellInfoListSN != null) {
			codeLength += candidateCellInfoListSN.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
		}
		
		if (drxInfoSCG != null) {
			codeLength += drxInfoSCG.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
		}
		
		if (configRestrictModReq != null) {
			codeLength += configRestrictModReq.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
		}
		
		if (scgRBConfig != null) {
			codeLength += scgRBConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
		}
		
		if (scgCellGroupConfig != null) {
			codeLength += scgCellGroupConfig.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			scgCellGroupConfig = new BerOctetString();
			subCodeLength += scgCellGroupConfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			scgRBConfig = new BerOctetString();
			subCodeLength += scgRBConfig.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			configRestrictModReq = new ConfigRestrictModReqSCG();
			subCodeLength += configRestrictModReq.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			drxInfoSCG = new DRXInfo();
			subCodeLength += drxInfoSCG.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			candidateCellInfoListSN = new BerOctetString();
			subCodeLength += candidateCellInfoListSN.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			measConfigSN = new MeasConfigSN();
			subCodeLength += measConfigSN.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			selectedBandCombinationNR = new BandCombinationIndex();
			subCodeLength += selectedBandCombinationNR.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			frInfoListSCG = new FRInfoList();
			subCodeLength += frInfoListSCG.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			nonCriticalExtension = new NonCriticalExtension();
			subCodeLength += nonCriticalExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (scgCellGroupConfig != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scgCellGroupConfig: ").append(scgCellGroupConfig);
			firstSelectedElement = false;
		}
		
		if (scgRBConfig != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("scgRBConfig: ").append(scgRBConfig);
			firstSelectedElement = false;
		}
		
		if (configRestrictModReq != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("configRestrictModReq: ");
			configRestrictModReq.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (drxInfoSCG != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("drxInfoSCG: ");
			drxInfoSCG.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (candidateCellInfoListSN != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("candidateCellInfoListSN: ").append(candidateCellInfoListSN);
			firstSelectedElement = false;
		}
		
		if (measConfigSN != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("measConfigSN: ");
			measConfigSN.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (selectedBandCombinationNR != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("selectedBandCombinationNR: ").append(selectedBandCombinationNR);
			firstSelectedElement = false;
		}
		
		if (frInfoListSCG != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("frInfoListSCG: ");
			frInfoListSCG.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (nonCriticalExtension != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonCriticalExtension: ");
			nonCriticalExtension.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

